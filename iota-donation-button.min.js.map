{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/css-loader/dist/runtime/api.js","webpack:///./node_modules/vue-style-loader/lib/listToStyles.js","webpack:///./node_modules/vue-style-loader/lib/addStylesShadow.js","webpack:///./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js","webpack:///./node_modules/@vue/web-component-wrapper/dist/vue-wc-wrapper.js","webpack:///./node_modules/vue-loader/lib/runtime/componentNormalizer.js","webpack:///./src/components/IotaDonationButton.vue?3e52","webpack:///src/components/IotaDonationButton.vue","webpack:///./src/components/IotaDonationButton.vue?c21c","webpack:///./src/components/IotaDonationButton.vue","webpack:///./src/lib.js","webpack:///./node_modules/@vue/cli-service/lib/commands/build/entry-wc.js","webpack:///./src/components/IotaDonationButton.vue?1275","webpack:///./src/assets/iota.svg","webpack:///./src/components/IotaDonationButton.vue?2de0","webpack:///./node_modules/@soda/get-current-script/index.js","webpack:///external \"Vue\"","webpack:///./node_modules/vue-clipboards/dist/vue-clipboards.es.js","webpack:///./node_modules/@tangle-frost/iota-qr-lib/pkg/iota-qr-lib.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/components/IotaDonationButton.vue?7cf9"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","cssWithMappingToString","item","useSourceMap","content","cssMapping","btoa","sourceMapping","toComment","sourceURLs","sources","map","source","concat","sourceRoot","join","sourceMap","base64","unescape","encodeURIComponent","JSON","stringify","data","list","toString","this","mediaQuery","dedupe","alreadyImportedModules","length","id","_i","push","listToStyles","parentId","styles","newStyles","css","media","part","parts","addStylesToShadowDOM","shadowRoot","addStyles","injectedStyles","_injectedStyles","style","j","addStyle","createStyleElement","styleElement","document","createElement","type","appendChild","obj","setAttribute","styleSheet","cssText","firstChild","removeChild","createTextNode","window","currentScript","NEED_CURRENTSCRIPT_POLYFILL","getCurrentScript","src","match","camelizeRE","camelize","str","replace","_","toUpperCase","hyphenateRE","hyphenate","toLowerCase","getInitialProps","propsList","res","forEach","undefined","injectHook","options","hook","unshift","callHooks","vm","hooks","$options","createCustomEvent","args","CustomEvent","bubbles","cancelable","detail","isBoolean","val","test","String","isNumber","convertAttributeValue","parsed","parseFloat","isNaN","toVNodes","h","children","toVNode","node","nodeType","trim","attrs","getAttributes","domProps","innerHTML","slot","tagName","attributes","attr","nodeName","nodeValue","wrap","Vue","Component","isAsync","cid","hyphenatedPropsList","camelizedPropsList","camelizedPropsMap","isInitialized","initialize","Array","isArray","props","keys","originalPropsAsObject","reduce","emit","$emit","$root","customElement","dispatchEvent","CustomElement","_wrapper","newVal","configurable","syncAttribute","el","camelized","hasAttribute","getAttribute","HTMLElement","super","attachShadow","wrapper","slotChildren","ref","observer","MutationObserver","mutations","hasChildrenChange","target","attributeName","freeze","$createElement","childNodes","observe","childList","subtree","characterData","$refs","inner","_isMounted","vueComponent","syncInitialAttributes","then","resolved","default","$mount","$el","normalizeComponent","scriptExports","render","staticRenderFns","functionalTemplate","injectStyles","scopeId","moduleIdentifier","shadowMode","_compiled","functional","_scopeId","context","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","_registeredComponents","add","_ssrRegister","_injectStyles","originalRender","existing","beforeCreate","_vm","_h","_c","_self","qrCodeData","_e","staticClass","address","_v","directives","rawName","expression","on","donate","required","style0","__inject__","component","IotaDonationButton","customElements","define","___CSS_LOADER_API_IMPORT___","root","factory","self","Error","err","pageSource","inlineScriptSourceRegExp","inlineScriptSource","ieStackRegExp","ffStackRegExp","stackDetails","exec","stack","scriptLocation","line","currentLocation","location","href","hash","scripts","getElementsByTagName","documentElement","outerHTML","RegExp","readyState","_typeof","iterator","constructor","global","unwrapExports","x","createCommonjsModule","fn","select","element","selectedText","focus","isReadOnly","setSelectionRange","removeAttribute","selection","getSelection","range","createRange","selectNodeContents","removeAllRanges","addRange","select_1","clipboardAction","commonjsGlobal","_select","_select2","_interopRequireDefault","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","descriptor","writable","protoProps","staticProps","ClipboardAction","resolveOptions","initSelection","arguments","action","container","emitter","text","trigger","selectFake","selectTarget","_this","isRTL","removeFake","fakeHandlerCallback","fakeHandler","addEventListener","fakeElem","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","copyText","removeEventListener","succeeded","execCommand","handleResult","clearSelection","set","_action","_target","E","callback","ctx","e","once","listener","off","apply","slice","evtArr","len","evts","liveEvents","tinyEmitter","is","nodeList","string","DOCUMENT_NODE_TYPE","Element","matches","proto","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","closest","selector","parentNode","closest_1","_delegate","useCapture","listenerFn","destroy","delegate","elements","querySelectorAll","delegateTarget","delegate_1","listen","listenNode","listenNodeList","listenSelector","body","listen_1","clipboard","_clipboardAction","_tinyEmitter","_goodListener","_clipboardAction2","_tinyEmitter2","_goodListener2","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","setPrototypeOf","__proto__","Clipboard","_Emitter","getPrototypeOf","listenClick","defaultAction","defaultTarget","defaultText","_this2","onClick","currentTarget","getAttributeValue","querySelector","actions","support","queryCommandSupported","suffix","attribute","isDom","doubleClickHandler","rng","sel","selectNode","_rng","createTextRange","moveToElementText","clipboard$1","_ref","vnode","Promise","$return","$error","modifiers","option","$parent","componentOptions","listeners","events","withNativeSelection","resolve","$await_2","$If_1","$boundEx","model","elm","offsetParent","parentElement","$clipboards","cb","fns","nselect","unbind","update","binding","def","_defineProperties","numberHelper_1","stringHelper_1","Color","alpha","red","green","blue","NumberHelper","isInteger","_alpha","_red","_green","_blue","Math","round","hex","StringHelper","isString","substr","repeat","parseInt","arrayHelper_1","objectHelper_1","LinearGradient","stops","angle","ArrayHelper","ObjectHelper","isEmpty","_stops","_angle","RadialGradient","offsetXPercent","offsetYPercent","radiusPercent","_offsetXPercent","_offsetYPercent","_radiusPercent","FactoryBase","_types","typeConstructor","getInstance","_instance$_types","_len","_key","includes","every","a","isType","Number","isFinite","floor","valueClassName","getClassName","_constructor","results","chr","charCodeAt","grp","fromCharCode","TrytesHelper","trytes","asciiValue","firstValue","secondValue","ALPHABET","ascii","isTrytes","indexOf","decimalValue","__export","_assertThisInitialized","_getPrototypeOf","_setPrototypeOf","qrDataBase_1","qrDataMode_1","QRAlphaNumeric","_qrDataBase_1$QRDataB","QRDataMode","alphaNumeric","getData","buffer","put","getCode","charAt","QRDataBase","QRByte8","byte8","stringToBytes","utf8","charcode","QRNumber","number","strToNum","substring","num","charToNum","BitBuffer","_buffer","_length","putBit","bit","getLengthInBits","getBit","index","MathHelper","EXP_TABLE","LOG_TABLE","localValue","mathHelper_1","Polynomial","shift","offset","_num","getLength","getAt","glog","_i2","gexp","ratio","_i3","mod","errorCorrectLevel_1","maskPattern_1","polynomial_1","QRHelper","typeNumber","PATTERN_POSITION_TABLE","errorCorrectLevel","ErrorCorrectLevel","L","M","Q","H","MAX_LENGTH","errorCorrectLength","multiply","maskPattern","MaskPattern","PATTERN000","PATTERN001","PATTERN010","PATTERN011","PATTERN100","PATTERN101","PATTERN110","PATTERN111","getBCHDigit","G15","G15_MASK","G18","localData","digit","RSBlock","totalCount","dataCount","_totalCount","_dataCount","rsBlock","getRsBlockTable","count","RS_BLOCK_TABLE","_mode","_data","qrAlphaNumeric_1","qrByte8_1","qrNumber_1","bitBuffer_1","qrHelper_1","rsBlock_1","QR","_typeNumber","_errorCorrectLevel","_qrData","_moduleCount","_modules","qrData","autoDetectTypeNumber","makeImpl","getBestMaskPattern","pixels","y","isDark","row","col","minLostPoint","pattern","lostPoint","getLostPoint","setupPositionProbePattern","setupPositionAdjustPattern","setupTimingPattern","setupTypeInfo","setupTypeNumber","createData","mapData","inc","bitIndex","byteIndex","maskFunc","getMaskMethod","flag","dark","mask","pos","getPatternPosition","bits","getBCHTypeNumber","getBCHTypeInfo","_mod","moduleCount","sameCount","_row","_col","_row2","_col2","_col3","_row3","darkCount","_col4","_row4","abs","rsBlocks","getRSBlocks","getMode","write","totalDataCount","getDataCount","PAD0","PAD1","createBytes","maxDcCount","maxEcCount","dcdata","ecdata","createNumArray","_r","dcCount","ecCount","getTotalCount","max","getBuffer","rsPoly","getErrorCorrectPolynomial","rawPoly","modPoly","_i4","modIndex","totalCodeCount","_i5","_i6","_r2","_i7","_r3","_i8","_regenerator","asyncGeneratorStep","gen","reject","_next","_throw","arg","info","error","done","_asyncToGenerator","trytesHelper_1","qr_1","qrRendererFactory_1","AddressQR","_renderRaw","mark","_callee","rendererType","cellSize","marginSize","rendererOptions","renderer","qr","qrCellData","_context","prev","next","QRRendererFactory","addText","generate","abrupt","renderRaw","stop","_x","_x2","_x3","_x4","_x5","_renderHtml","_callee2","_context2","renderHtml","_x6","_x7","_x8","_x9","_x10","TrinityPaymentQR","amountIota","tagTrytes","message","messageAscii","encodeNonASCII","amount","tag","paymentData","qrTypeNumber","_args","_args2","g","Function","hadRuntime","regeneratorRuntime","getOwnPropertyNames","oldRuntime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","inModule","runtime","GenStateSuspendedStart","GenStateSuspendedYield","GenStateExecuting","GenStateCompleted","ContinueSentinel","IteratorPrototype","getProto","NativeIteratorPrototype","values","Gp","GeneratorFunctionPrototype","Generator","GeneratorFunction","displayName","isGeneratorFunction","genFun","ctor","awrap","__await","defineIteratorMethods","AsyncIterator","async","innerFn","outerFn","tryLocsList","iter","result","reverse","pop","Context","reset","skipTempReset","sent","_sent","method","tryEntries","resetTryEntry","rootEntry","rootRecord","completion","rval","dispatchException","exception","handle","loc","caught","record","entry","tryLoc","hasCatch","hasFinally","catchLoc","finallyLoc","finallyEntry","complete","afterLoc","finish","thrown","delegateYield","iterable","resultName","nextLoc","protoGenerator","generator","_invoke","makeInvokeMethod","tryCatch","invoke","unwrapped","previousPromise","enqueue","callInvokeWithMethodAndArg","state","doneResult","delegateResult","maybeInvokeDelegate","return","pushTryEntry","locs","iteratorMethod","factoryBase_1","_factoryBase_1$Factor","_instance","ImageHelper","mimeType","imageSource","Uint8Array","binary","base64Data","_base64Data","JpegEncoder","_yTable","_uvTable","_fdtblY","_fdtblUV","_bitCode","_category","_outputfDCTQuant","_du","_byteOut","_byteNew","_bytePos","_ydu","_udu","_vdu","_rgbYuvTable","initHuffmanTbl","initCategoryNumber","initRGBYUVTable","width","height","imageData","quality","setQuality","writeWord","writeAPP0","writeDQT","writeSOF0","writeDHT","writeSOS","DCY","DCU","DCV","b","start","quadWidth","processDU","_ydcHashTable","_yacHashTable","_uvdcHashTable","_uvacHashTable","fillbits","writeBits","sf","initQuantTables","YQT","SIG_ZAG","UVQT","u","aasf","k","nrcodes","stdTable","codevalue","posInTable","HT","computeHuffmanTbl","STD_DC_LUMINANCE_NRCODES","STD_DC_LUMINANCE_VALUES","STD_DC_CHROMINANCE_NRCODES","STD_DC_CHROMINANCE_VALUES","STD_AC_LUMINANCE_NRCODES","STD_AC_LUMINANCE_VALUES","STD_AC_CHROMINANCE_NRCODES","STD_AC_CHROMINANCE_VALUES","nrlower","nrupper","cat","nr","nrneg","bs","posval","writeByte","fdtbl","d0","d1","d2","d3","d4","d5","d6","d7","fDCTQuant","dataOff","I8","I64","tmp0","tmp7","tmp1","tmp6","tmp2","tmp5","tmp3","tmp4","tmp10","tmp13","tmp11","tmp12","z1","z5","z2","z4","z3","z11","z13","tmp0p2","tmp7p2","tmp1p2","tmp6p2","tmp2p2","tmp5p2","tmp3p2","tmp4p2","tmp10p2","tmp13p2","tmp11p2","tmp12p2","z1p2","z5p2","z2p2","z4p2","z3p2","z11p2","z13p2","CDU","passedDC","HTDC","HTAC","DC","EOB","m16zeroes","I16","I63","DU_DCT","diff","end0pos","lng","startpos","nrzeroes","nrmarker","__importDefault","deflate_1","PngEncoder","bufs","w","ps","forbidPlte","dels","byteLength","wr","nimg","compressPNG","writeUint","writeASCII","depth","ctype","crc","anim","dl","plte","ti","gotAlpha","fi","frames","fr","rect","writeUshort","dispose","blend","imgd","cimg","_dl","ioff","out","compress","frm","nw","nh","bpl","bpp","fdata","filterZero","img","inBufs","inPs","forGIF","alphaAnd","ilen","cmap","qres","quantize","est","rgba","_j","img32","Uint32Array","_ilen","brute","cc","frms","_j2","cimg32","nx","ny","tlim","tstp","tarea","it","p32","mix","miy","may","sarea","pimg","copyTile","ceil","_nimg","_y","ii","_nimg2","area","qi","fls","filterLine","deflate","tsize","di","paeth","_x11","_x12","_x13","_x14","_x15","pa","pb","pc","buff","sb","sw","sh","tb","tw","th","xoff","yoff","min","si","fa","fg","fb","ba","br","bg","bb","ifa","oa","ioa","_fa","_fr","_fg","_fb","_ba","_br","_bg","_bb","_fa2","_fr2","_fg2","_fb2","_ba2","_br2","_bg2","_bb2","crcUpdate","buf","localC","crcTable","tab","roundAlpha","imgs","totl","alphaMul","nimg32","noff","_i9","il","i0","i1","bst","tdst","left","right","quantizeStats","quantizeEstats","leafs","maxL","mi","_i10","s0","quantizeSplitPixels","eMq255","ln","rn","R","N","_i11","_i12","sort","outBufs","_i13","nd","quantizePlaneDst","stats","m0","m1","m2","m3","iN","rj","A","tmi","m4MultVec","sqrt","m4Dot","m4Sml","q","ia","Cov","eMq","i0in","i1in","quantizeVecDot","v","roundA","canvasRenderer_1","jpegRenderer_1","pngRenderer_1","svgRenderer_1","textRenderer_1","initRender","register","opts","CanvasRenderer","TextRenderer","SvgRenderer","JpegRenderer","PngRenderer","color_1","_options","foreground","fromHex","background","cssClass","cellData","dimensions","canvas","classList","getContext","fillStyle","rgbaText","fillRect","CanvasRendererOptions","imageHelper_1","jpegEncoder_1","dc","colour","encode","raw","dataToImageSource","JpegRendererOptions","pngEncoder_1","PngRendererOptions","linearGradient_1","radialGradient_1","foregroundType","foregroundLinear","foregroundRadial","rendered","renderContent","renderWrapper","svg","createElementNS","fillRef","renderLinearGradient","renderRadialGradient","pathContent","offsetPercent","color","gradient","renderGradientStops","includeXmlDeclaration","SvgRendererOptions","onChar","offChar","_m","div","TextRendererOptions","zlib_deflate","utils","strings","msg","ZStream","Z_NO_FLUSH","Z_FINISH","Z_OK","Z_STREAM_END","Z_SYNC_FLUSH","Z_DEFAULT_COMPRESSION","Z_DEFAULT_STRATEGY","Z_DEFLATED","Deflate","assign","level","chunkSize","windowBits","memLevel","strategy","to","opt","gzip","ended","chunks","strm","avail_out","status","deflateInit2","header","deflateSetHeader","dictionary","dict","string2buf","deflateSetDictionary","_dict_set","input","deflator","deflateRaw","next_in","avail_in","output","Buf8","next_out","onEnd","onData","buf2binstring","shrinkBuf","deflateEnd","chunk","flattenChunks","TYPED_OK","Uint16Array","Int32Array","_has","size","subarray","fnTyped","arraySet","dest","src_offs","dest_offs","fnUntyped","setTyped","Buf16","Buf32","STR_APPLY_OK","STR_APPLY_UIA_OK","__","_utf8len","c2","m_pos","str_len","buf_len","binstring2buf","buf2string","c_len","utf16buf","utf8border","adler32","adler","s1","s2","makeTable","table","crc32","end","configuration_table","trees","Z_PARTIAL_FLUSH","Z_FULL_FLUSH","Z_BLOCK","Z_STREAM_ERROR","Z_DATA_ERROR","Z_BUF_ERROR","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_UNKNOWN","MAX_MEM_LEVEL","MAX_WBITS","DEF_MEM_LEVEL","LENGTH_CODES","LITERALS","L_CODES","D_CODES","BL_CODES","HEAP_SIZE","MAX_BITS","MIN_MATCH","MAX_MATCH","MIN_LOOKAHEAD","PRESET_DICT","INIT_STATE","EXTRA_STATE","NAME_STATE","COMMENT_STATE","HCRC_STATE","BUSY_STATE","FINISH_STATE","BS_NEED_MORE","BS_BLOCK_DONE","BS_FINISH_STARTED","BS_FINISH_DONE","OS_CODE","errorCode","rank","f","zero","flush_pending","pending","pending_buf","pending_out","total_out","flush_block_only","last","_tr_flush_block","block_start","strstart","put_byte","putShortMSB","read_buf","total_in","longest_match","cur_match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","limit","w_size","_win","wmask","w_mask","strend","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","more","_w_size","window_size","hash_size","head","insert","ins_h","hash_shift","hash_mask","deflate_stored","flush","max_block_size","pending_buf_size","max_start","deflate_fast","hash_head","bflush","match_length","_tr_tally","max_lazy_match","last_lit","deflate_slow","max_insert","prev_match","match_available","deflate_rle","deflate_huff","Config","good_length","max_lazy","nice_length","max_chain","func","lm_init","DeflateState","gzhead","gzindex","last_flush","w_bits","hash_bits","dyn_ltree","dyn_dtree","bl_tree","l_desc","d_desc","bl_desc","bl_count","heap","heap_len","heap_max","l_buf","lit_bufsize","d_buf","opt_len","static_len","bi_buf","bi_valid","deflateResetKeep","data_type","_tr_init","deflateReset","ret","deflateInit","old_flush","beg","hcrc","extra","comment","time","os","level_flags","bstate","_tr_align","_tr_stored_block","avail","tmpDict","dictLength","deflateInfo","2","1","0","Z_BINARY","Z_TEXT","STORED_BLOCK","STATIC_TREES","DYN_TREES","Buf_size","MAX_BL_BITS","END_BLOCK","REP_3_6","REPZ_3_10","REPZ_11_138","extra_lbits","extra_dbits","extra_blbits","bl_order","DIST_CODE_LEN","static_ltree","static_dtree","_dist_code","_length_code","base_length","static_l_desc","static_d_desc","static_bl_desc","base_dist","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","TreeDesc","dyn_tree","stat_desc","max_code","d_code","dist","put_short","send_bits","send_code","tree","bi_reverse","code","bi_flush","gen_bitlen","desc","xbits","stree","base","overflow","gen_codes","next_code","tr_static_init","init_block","bi_windup","copy_block","smaller","_n2","_m2","pqdownheap","compress_block","ltree","dtree","lc","lx","build_tree","scan_tree","curlen","prevlen","nextlen","max_count","min_count","send_tree","build_bl_tree","max_blindex","send_all_trees","lcodes","dcodes","blcodes","detect_data_type","black_mask","static_init_done","stored_len","opt_lenb","static_lenb","iota_qr_render_1","locals"],"mappings":"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IAAK,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,GAAI,GAAI,IAAK,CAAC,EAAG,GAAI,GAAI,IAAK,CAAC,EAAG,GAAI,GAAI,IAAK,CAAC,EAAG,GAAI,GAAI,IAAK,CAAC,EAAG,GAAI,GAAI,IAAK,CAAC,EAAG,GAAI,GAAI,IAAK,CAAC,EAAG,GAAI,GAAI,IAAK,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,CAAC,EAAG,GAAI,GAAI,GAAI,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,MAGpzBF,EAASS,WAAa,CAAC,CAAC,CAAC,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,EAAG,IAAK,CAAC,CAAC,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,IAAK,C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AK,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACnG,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KAAM,CAAC,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACvF,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KAAM,CAAC,GAAI,GAAI,IAAK,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,IAC5E,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACpG,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACnG,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACnG,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KAAM,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACnG,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KAAM,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IAAK,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACnG,CAAC,EAAG,IAAK,IAAK,GAAI,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACpG,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KAAM,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IAAK,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACnG,CAAC,EAAG,IAAK,IAAK,GAAI,IAAK,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACtG,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACpG,CAAC,GAAI,IAAK,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACzF,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACtG,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpG,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACtG,CAAC,EAAG,IAAK,IAAK,GAAI,IAAK,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpG,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,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","file":"iota-donation-button.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"5a74\");\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join('');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || '').concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n  return \"/*# \".concat(data, \" */\");\n}","/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nexport default function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n","import listToStyles from './listToStyles'\n\nexport default function addStylesToShadowDOM (parentId, list, shadowRoot) {\n  var styles = listToStyles(parentId, list)\n  addStyles(styles, shadowRoot)\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nfunction addStyles (styles /* Array<StyleObject> */, shadowRoot) {\n  const injectedStyles =\n    shadowRoot._injectedStyles ||\n    (shadowRoot._injectedStyles = {})\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var style = injectedStyles[item.id]\n    if (!style) {\n      for (var j = 0; j < item.parts.length; j++) {\n        addStyle(item.parts[j], shadowRoot)\n      }\n      injectedStyles[item.id] = true\n    }\n  }\n}\n\nfunction createStyleElement (shadowRoot) {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  shadowRoot.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */, shadowRoot) {\n  var styleElement = createStyleElement(shadowRoot)\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n","// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  var currentScript = window.document.currentScript\n  if (process.env.NEED_CURRENTSCRIPT_POLYFILL) {\n    var getCurrentScript = require('@soda/get-current-script')\n    currentScript = getCurrentScript()\n\n    // for backward compatibility, because previously we directly included the polyfill\n    if (!('currentScript' in document)) {\n      Object.defineProperty(document, 'currentScript', { get: getCurrentScript })\n    }\n  }\n\n  var src = currentScript && currentScript.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/)\n  if (src) {\n    __webpack_public_path__ = src[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","const camelizeRE = /-(\\w)/g;\nconst camelize = str => {\n  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : '')\n};\n\nconst hyphenateRE = /\\B([A-Z])/g;\nconst hyphenate = str => {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n};\n\nfunction getInitialProps (propsList) {\n  const res = {};\n  propsList.forEach(key => {\n    res[key] = undefined;\n  });\n  return res\n}\n\nfunction injectHook (options, key, hook) {\n  options[key] = [].concat(options[key] || []);\n  options[key].unshift(hook);\n}\n\nfunction callHooks (vm, hook) {\n  if (vm) {\n    const hooks = vm.$options[hook] || [];\n    hooks.forEach(hook => {\n      hook.call(vm);\n    });\n  }\n}\n\nfunction createCustomEvent (name, args) {\n  return new CustomEvent(name, {\n    bubbles: false,\n    cancelable: false,\n    detail: args\n  })\n}\n\nconst isBoolean = val => /function Boolean/.test(String(val));\nconst isNumber = val => /function Number/.test(String(val));\n\nfunction convertAttributeValue (value, name, { type } = {}) {\n  if (isBoolean(type)) {\n    if (value === 'true' || value === 'false') {\n      return value === 'true'\n    }\n    if (value === '' || value === name) {\n      return true\n    }\n    return value != null\n  } else if (isNumber(type)) {\n    const parsed = parseFloat(value, 10);\n    return isNaN(parsed) ? value : parsed\n  } else {\n    return value\n  }\n}\n\nfunction toVNodes (h, children) {\n  const res = [];\n  for (let i = 0, l = children.length; i < l; i++) {\n    res.push(toVNode(h, children[i]));\n  }\n  return res\n}\n\nfunction toVNode (h, node) {\n  if (node.nodeType === 3) {\n    return node.data.trim() ? node.data : null\n  } else if (node.nodeType === 1) {\n    const data = {\n      attrs: getAttributes(node),\n      domProps: {\n        innerHTML: node.innerHTML\n      }\n    };\n    if (data.attrs.slot) {\n      data.slot = data.attrs.slot;\n      delete data.attrs.slot;\n    }\n    return h(node.tagName, data)\n  } else {\n    return null\n  }\n}\n\nfunction getAttributes (node) {\n  const res = {};\n  for (let i = 0, l = node.attributes.length; i < l; i++) {\n    const attr = node.attributes[i];\n    res[attr.nodeName] = attr.nodeValue;\n  }\n  return res\n}\n\nfunction wrap (Vue, Component) {\n  const isAsync = typeof Component === 'function' && !Component.cid;\n  let isInitialized = false;\n  let hyphenatedPropsList;\n  let camelizedPropsList;\n  let camelizedPropsMap;\n\n  function initialize (Component) {\n    if (isInitialized) return\n\n    const options = typeof Component === 'function'\n      ? Component.options\n      : Component;\n\n    // extract props info\n    const propsList = Array.isArray(options.props)\n      ? options.props\n      : Object.keys(options.props || {});\n    hyphenatedPropsList = propsList.map(hyphenate);\n    camelizedPropsList = propsList.map(camelize);\n    const originalPropsAsObject = Array.isArray(options.props) ? {} : options.props || {};\n    camelizedPropsMap = camelizedPropsList.reduce((map, key, i) => {\n      map[key] = originalPropsAsObject[propsList[i]];\n      return map\n    }, {});\n\n    // proxy $emit to native DOM events\n    injectHook(options, 'beforeCreate', function () {\n      const emit = this.$emit;\n      this.$emit = (name, ...args) => {\n        this.$root.$options.customElement.dispatchEvent(createCustomEvent(name, args));\n        return emit.call(this, name, ...args)\n      };\n    });\n\n    injectHook(options, 'created', function () {\n      // sync default props values to wrapper on created\n      camelizedPropsList.forEach(key => {\n        this.$root.props[key] = this[key];\n      });\n    });\n\n    // proxy props as Element properties\n    camelizedPropsList.forEach(key => {\n      Object.defineProperty(CustomElement.prototype, key, {\n        get () {\n          return this._wrapper.props[key]\n        },\n        set (newVal) {\n          this._wrapper.props[key] = newVal;\n        },\n        enumerable: false,\n        configurable: true\n      });\n    });\n\n    isInitialized = true;\n  }\n\n  function syncAttribute (el, key) {\n    const camelized = camelize(key);\n    const value = el.hasAttribute(key) ? el.getAttribute(key) : undefined;\n    el._wrapper.props[camelized] = convertAttributeValue(\n      value,\n      key,\n      camelizedPropsMap[camelized]\n    );\n  }\n\n  class CustomElement extends HTMLElement {\n    constructor () {\n      super();\n      this.attachShadow({ mode: 'open' });\n\n      const wrapper = this._wrapper = new Vue({\n        name: 'shadow-root',\n        customElement: this,\n        shadowRoot: this.shadowRoot,\n        data () {\n          return {\n            props: {},\n            slotChildren: []\n          }\n        },\n        render (h) {\n          return h(Component, {\n            ref: 'inner',\n            props: this.props\n          }, this.slotChildren)\n        }\n      });\n\n      // Use MutationObserver to react to future attribute & slot content change\n      const observer = new MutationObserver(mutations => {\n        let hasChildrenChange = false;\n        for (let i = 0; i < mutations.length; i++) {\n          const m = mutations[i];\n          if (isInitialized && m.type === 'attributes' && m.target === this) {\n            syncAttribute(this, m.attributeName);\n          } else {\n            hasChildrenChange = true;\n          }\n        }\n        if (hasChildrenChange) {\n          wrapper.slotChildren = Object.freeze(toVNodes(\n            wrapper.$createElement,\n            this.childNodes\n          ));\n        }\n      });\n      observer.observe(this, {\n        childList: true,\n        subtree: true,\n        characterData: true,\n        attributes: true\n      });\n    }\n\n    get vueComponent () {\n      return this._wrapper.$refs.inner\n    }\n\n    connectedCallback () {\n      const wrapper = this._wrapper;\n      if (!wrapper._isMounted) {\n        // initialize attributes\n        const syncInitialAttributes = () => {\n          wrapper.props = getInitialProps(camelizedPropsList);\n          hyphenatedPropsList.forEach(key => {\n            syncAttribute(this, key);\n          });\n        };\n\n        if (isInitialized) {\n          syncInitialAttributes();\n        } else {\n          // async & unresolved\n          Component().then(resolved => {\n            if (resolved.__esModule || resolved[Symbol.toStringTag] === 'Module') {\n              resolved = resolved.default;\n            }\n            initialize(resolved);\n            syncInitialAttributes();\n          });\n        }\n        // initialize children\n        wrapper.slotChildren = Object.freeze(toVNodes(\n          wrapper.$createElement,\n          this.childNodes\n        ));\n        wrapper.$mount();\n        this.shadowRoot.appendChild(wrapper.$el);\n      } else {\n        callHooks(this.vueComponent, 'activated');\n      }\n    }\n\n    disconnectedCallback () {\n      callHooks(this.vueComponent, 'deactivated');\n    }\n  }\n\n  if (!isAsync) {\n    initialize(Component);\n  }\n\n  return CustomElement\n}\n\nexport default wrap;\n","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () {\n        injectStyles.call(\n          this,\n          (options.functional ? this.parent : this).$root.$options.shadowRoot\n        )\n      }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functional component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{attrs:{\"id\":\"iota-donation-button\"}},[(!_vm.qrCodeData)?_c('button',{staticClass:\"btn btn-animated\",on:{\"click\":_vm.donate}},[_c('img',{staticClass:\"icon\",attrs:{\"src\":require(\"@/assets/iota.svg\")}})]):_c('div',[(_vm.qrCodeData)?_c('img',{attrs:{\"src\":_vm.qrCodeData.src,\"alt\":\"QR CODE\"}}):_vm._e(),_c('br'),_c('a',{staticClass:\"btn\",attrs:{\"href\":(\"iota://\" + _vm.address + \"/?amount=\" + (1))}},[_vm._v(\"Pay with Trinity\")]),_c('button',{directives:[{name:\"clipboard\",rawName:\"v-clipboard\",value:(_vm.address),expression:\"address\"}]},[_vm._v(\"Copy address\")])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n   <span id=\"iota-donation-button\">\n    <button class=\"btn btn-animated\" v-if=\"!qrCodeData\" @click=\"donate\">\n     <img class=\"icon\" src=\"@/assets/iota.svg\" >\n    </button>\n    <div v-else >\n      <img v-if=\"qrCodeData\" :src=\"qrCodeData.src\" alt=\"QR CODE\" />\n      <br />\n      <a\n        class=\"btn\"\n        :href=\"`iota://${address}/?amount=${1}`\"\n        >Pay with Trinity</a\n      >\n      <button v-clipboard=\"address\">Copy address</button>\n    </div>\n  </span>\n</template>\n\n<script>\nimport * as IotaQR from \"@tangle-frost/iota-qr-lib/pkg/iota-qr-lib.js\";\nimport { clipboard } from \"vue-clipboards\";\n\nexport default {\n    name: \"IotaDonationButton\",\n  directives: { clipboard },\n\n  props: {\n    address: {\n      required: true,\n      type: String\n    }\n  },\n  data() {\n    return {\n      qrCodeData: null,\n    };\n  },\n    created() {\n        console.log(\"iota donation button\")\n    },\n    methods: {\n      donate() {\n        console.log(\"iota donation button clicked\")\n        console.log(this.address)\n        console.log(this.qrCodeData)\n        let self = this\n        const paymentData = IotaQR.TrinityPaymentQR.generatePaymentData(\n            this.address,\n            1,\n            \"EINFACHIOTA\",\n            \"\"\n          );\n          IotaQR.TrinityPaymentQR.renderHtml(paymentData, \"png\", 8).then(\n            qrCodeData => {\n              self.qrCodeData = qrCodeData;\n              console.log(\"qr_code_data\", qrCodeData);\n              console.log(\"qr_code_data\", qrCodeData.src);\n            }\n          );\n      } \n    }\n}\n</script>\n\n<style scoped>\n#iota-donation-button {\n  position: absolute;\n  bottom: 10%;\n  right: 10%;\n}\n\n.icon {\n  width: 42px;\n  height: 42px;\n}\n\n.btn {\n  background-color: #0fc1b7;\n  border: none;\n  border-radius: 100%;\n  padding: 20px;\n  text-align: center;\n  text-decoration: none;\n  font-size: 16px;\n  margin: 4px 2px;\n}\n\n.btn:link,\n.btn:visited {\n    text-transform: uppercase;\n    text-decoration: none;\n    padding: 15px 40px;\n    display: inline-block;\n    border-radius: 100px;\n    transition: all .2s;\n    position: absolute;\n}\n\n.btn:hover {\n    cursor: pointer;\n    transform: translateY(-3px);\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);\n}\n\n.btn:active {\n    transform: translateY(-1px);\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);\n}\n\n.btn::after {\n    content: \"\";\n    display: inline-block;\n    height: 100%;\n    width: 100%;\n    border-radius: 100px;\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: -1;\n    transition: all .4s;\n}\n\n.btn:hover::after {\n    transform: scaleX(1.4) scaleY(1.6);\n    opacity: 0;\n}\n\n.btn-animated {\n    animation: moveInBottom 5s ease-out;\n    animation-fill-mode: backwards;\n}\n\n@keyframes moveInBottom {\n    0% {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n\n    100% {\n        opacity: 1;\n        transform: translateY(0px);\n    }\n}\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IotaDonationButton.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IotaDonationButton.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./IotaDonationButton.vue?vue&type=template&id=580b7f1b&scoped=true&\"\nimport script from \"./IotaDonationButton.vue?vue&type=script&lang=js&\"\nexport * from \"./IotaDonationButton.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./IotaDonationButton.vue?vue&type=style&index=0&id=580b7f1b&scoped=true&lang=css&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  \"580b7f1b\",\n  null\n  ,true\n)\n\nexport default component.exports","import Vue from 'vue';\nimport wrap from '@vue/web-component-wrapper';\nimport IotaDonationButton from './components/IotaDonationButton';\n\nconst CustomElement = wrap(Vue, IotaDonationButton);\n\nwindow.customElements.define('iota-donation-button', CustomElement);","import './setPublicPath'\nimport Vue from 'vue'\nimport wrap from '@vue/web-component-wrapper'\n\n// runtime shared by every component chunk\nimport 'css-loader/dist/runtime/api.js'\nimport 'vue-style-loader/lib/addStylesShadow'\nimport 'vue-loader/lib/runtime/componentNormalizer'\n\nimport iotaDonationButton from '~root/./src/lib.js?shadow'\nwindow.customElements.define('iota-donation-button', wrap(Vue, iotaDonationButton))","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"#iota-donation-button[data-v-580b7f1b]{position:absolute;bottom:10%;right:10%}.icon[data-v-580b7f1b]{width:42px;height:42px}.btn[data-v-580b7f1b]{background-color:#0fc1b7;border:none;border-radius:100%;padding:20px;text-align:center;text-decoration:none;font-size:16px;margin:4px 2px}.btn[data-v-580b7f1b]:link,.btn[data-v-580b7f1b]:visited{text-transform:uppercase;text-decoration:none;padding:15px 40px;display:inline-block;border-radius:100px;transition:all .2s;position:absolute}.btn[data-v-580b7f1b]:hover{cursor:pointer;transform:translateY(-3px);box-shadow:0 10px 20px rgba(0,0,0,.2)}.btn[data-v-580b7f1b]:active{transform:translateY(-1px);box-shadow:0 5px 10px rgba(0,0,0,.2)}.btn[data-v-580b7f1b]:after{content:\\\"\\\";display:inline-block;height:100%;width:100%;border-radius:100px;position:absolute;top:0;left:0;z-index:-1;transition:all .4s}.btn[data-v-580b7f1b]:hover:after{transform:scaleX(1.4) scaleY(1.6);opacity:0}.btn-animated[data-v-580b7f1b]{-webkit-animation:moveInBottom-data-v-580b7f1b 5s ease-out;animation:moveInBottom-data-v-580b7f1b 5s ease-out;-webkit-animation-fill-mode:backwards;animation-fill-mode:backwards}@-webkit-keyframes moveInBottom-data-v-580b7f1b{0%{opacity:0;transform:translateY(30px)}to{opacity:1;transform:translateY(0)}}@keyframes moveInBottom-data-v-580b7f1b{0%{opacity:0;transform:translateY(30px)}to{opacity:1;transform:translateY(0)}}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","module.exports = __webpack_public_path__ + \"img/iota.b5da5906.svg\";","import mod from \"-!../../node_modules/vue-style-loader/index.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IotaDonationButton.vue?vue&type=style&index=0&id=580b7f1b&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/vue-style-loader/index.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IotaDonationButton.vue?vue&type=style&index=0&id=580b7f1b&scoped=true&lang=css&\"","// addapted from the document.currentScript polyfill by Adam Miller\n// MIT license\n// source: https://github.com/amiller-gh/currentScript-polyfill\n\n// added support for Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1620505\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    root.getCurrentScript = factory();\n  }\n}(typeof self !== 'undefined' ? self : this, function () {\n  function getCurrentScript () {\n    if (document.currentScript) {\n      return document.currentScript\n    }\n  \n    // IE 8-10 support script readyState\n    // IE 11+ & Firefox support stack trace\n    try {\n      throw new Error();\n    }\n    catch (err) {\n      // Find the second match for the \"at\" string to get file src url from stack.\n      var ieStackRegExp = /.*at [^(]*\\((.*):(.+):(.+)\\)$/ig,\n        ffStackRegExp = /@([^@]*):(\\d+):(\\d+)\\s*$/ig,\n        stackDetails = ieStackRegExp.exec(err.stack) || ffStackRegExp.exec(err.stack),\n        scriptLocation = (stackDetails && stackDetails[1]) || false,\n        line = (stackDetails && stackDetails[2]) || false,\n        currentLocation = document.location.href.replace(document.location.hash, ''),\n        pageSource,\n        inlineScriptSourceRegExp,\n        inlineScriptSource,\n        scripts = document.getElementsByTagName('script'); // Live NodeList collection\n  \n      if (scriptLocation === currentLocation) {\n        pageSource = document.documentElement.outerHTML;\n        inlineScriptSourceRegExp = new RegExp('(?:[^\\\\n]+?\\\\n){0,' + (line - 2) + '}[^<]*<script>([\\\\d\\\\D]*?)<\\\\/script>[\\\\d\\\\D]*', 'i');\n        inlineScriptSource = pageSource.replace(inlineScriptSourceRegExp, '$1').trim();\n      }\n  \n      for (var i = 0; i < scripts.length; i++) {\n        // If ready state is interactive, return the script tag\n        if (scripts[i].readyState === 'interactive') {\n          return scripts[i];\n        }\n  \n        // If src matches, return the script tag\n        if (scripts[i].src === scriptLocation) {\n          return scripts[i];\n        }\n  \n        // If inline source matches, return the script tag\n        if (\n          scriptLocation === currentLocation &&\n          scripts[i].innerHTML &&\n          scripts[i].innerHTML.trim() === inlineScriptSource\n        ) {\n          return scripts[i];\n        }\n      }\n  \n      // If no match, return null\n      return null;\n    }\n  };\n\n  return getCurrentScript\n}));\n","module.exports = Vue;","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction unwrapExports (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nfunction select(element) {\n    var selectedText;\n\n    if (element.nodeName === 'SELECT') {\n        element.focus();\n\n        selectedText = element.value;\n    }\n    else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n        var isReadOnly = element.hasAttribute('readonly');\n\n        if (!isReadOnly) {\n            element.setAttribute('readonly', '');\n        }\n\n        element.select();\n        element.setSelectionRange(0, element.value.length);\n\n        if (!isReadOnly) {\n            element.removeAttribute('readonly');\n        }\n\n        selectedText = element.value;\n    }\n    else {\n        if (element.hasAttribute('contenteditable')) {\n            element.focus();\n        }\n\n        var selection = window.getSelection();\n        var range = document.createRange();\n\n        range.selectNodeContents(element);\n        selection.removeAllRanges();\n        selection.addRange(range);\n\n        selectedText = selection.toString();\n    }\n\n    return selectedText;\n}\n\nvar select_1 = select;\n\nvar clipboardAction = createCommonjsModule(function (module, exports) {\n(function (global, factory) {\n    if (typeof undefined === \"function\" && undefined.amd) {\n        undefined(['module', 'select'], factory);\n    } else {\n        factory(module, select_1);\n    }\n})(commonjsGlobal, function (module, _select) {\n\n    var _select2 = _interopRequireDefault(_select);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            default: obj\n        };\n    }\n\n    var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n    } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) defineProperties(Constructor, staticProps);\n            return Constructor;\n        };\n    }();\n\n    var ClipboardAction = function () {\n        /**\n         * @param {Object} options\n         */\n        function ClipboardAction(options) {\n            _classCallCheck(this, ClipboardAction);\n\n            this.resolveOptions(options);\n            this.initSelection();\n        }\n\n        /**\n         * Defines base properties passed from constructor.\n         * @param {Object} options\n         */\n\n\n        _createClass(ClipboardAction, [{\n            key: 'resolveOptions',\n            value: function resolveOptions() {\n                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n                this.action = options.action;\n                this.container = options.container;\n                this.emitter = options.emitter;\n                this.target = options.target;\n                this.text = options.text;\n                this.trigger = options.trigger;\n\n                this.selectedText = '';\n            }\n        }, {\n            key: 'initSelection',\n            value: function initSelection() {\n                if (this.text) {\n                    this.selectFake();\n                } else if (this.target) {\n                    this.selectTarget();\n                }\n            }\n        }, {\n            key: 'selectFake',\n            value: function selectFake() {\n                var _this = this;\n\n                var isRTL = document.documentElement.getAttribute('dir') == 'rtl';\n\n                this.removeFake();\n\n                this.fakeHandlerCallback = function () {\n                    return _this.removeFake();\n                };\n                this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;\n\n                this.fakeElem = document.createElement('textarea');\n                // Prevent zooming on iOS\n                this.fakeElem.style.fontSize = '12pt';\n                // Reset box model\n                this.fakeElem.style.border = '0';\n                this.fakeElem.style.padding = '0';\n                this.fakeElem.style.margin = '0';\n                // Move element out of screen horizontally\n                this.fakeElem.style.position = 'absolute';\n                this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';\n                // Move element to the same position vertically\n                var yPosition = window.pageYOffset || document.documentElement.scrollTop;\n                this.fakeElem.style.top = yPosition + 'px';\n\n                this.fakeElem.setAttribute('readonly', '');\n                this.fakeElem.value = this.text;\n\n                this.container.appendChild(this.fakeElem);\n\n                this.selectedText = (0, _select2.default)(this.fakeElem);\n                this.copyText();\n            }\n        }, {\n            key: 'removeFake',\n            value: function removeFake() {\n                if (this.fakeHandler) {\n                    this.container.removeEventListener('click', this.fakeHandlerCallback);\n                    this.fakeHandler = null;\n                    this.fakeHandlerCallback = null;\n                }\n\n                if (this.fakeElem) {\n                    this.container.removeChild(this.fakeElem);\n                    this.fakeElem = null;\n                }\n            }\n        }, {\n            key: 'selectTarget',\n            value: function selectTarget() {\n                this.selectedText = (0, _select2.default)(this.target);\n                this.copyText();\n            }\n        }, {\n            key: 'copyText',\n            value: function copyText() {\n                var succeeded = void 0;\n\n                try {\n                    succeeded = document.execCommand(this.action);\n                } catch (err) {\n                    succeeded = false;\n                }\n\n                this.handleResult(succeeded);\n            }\n        }, {\n            key: 'handleResult',\n            value: function handleResult(succeeded) {\n                this.emitter.emit(succeeded ? 'success' : 'error', {\n                    action: this.action,\n                    text: this.selectedText,\n                    trigger: this.trigger,\n                    clearSelection: this.clearSelection.bind(this)\n                });\n            }\n        }, {\n            key: 'clearSelection',\n            value: function clearSelection() {\n                if (this.trigger) {\n                    this.trigger.focus();\n                }\n\n                window.getSelection().removeAllRanges();\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                this.removeFake();\n            }\n        }, {\n            key: 'action',\n            set: function set() {\n                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';\n\n                this._action = action;\n\n                if (this._action !== 'copy' && this._action !== 'cut') {\n                    throw new Error('Invalid \"action\" value, use either \"copy\" or \"cut\"');\n                }\n            },\n            get: function get() {\n                return this._action;\n            }\n        }, {\n            key: 'target',\n            set: function set(target) {\n                if (target !== undefined) {\n                    if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {\n                        if (this.action === 'copy' && target.hasAttribute('disabled')) {\n                            throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n                        }\n\n                        if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {\n                            throw new Error('Invalid \"target\" attribute. You can\\'t cut text from elements with \"readonly\" or \"disabled\" attributes');\n                        }\n\n                        this._target = target;\n                    } else {\n                        throw new Error('Invalid \"target\" value, use a valid Element');\n                    }\n                }\n            },\n            get: function get() {\n                return this._target;\n            }\n        }]);\n\n        return ClipboardAction;\n    }();\n\n    module.exports = ClipboardAction;\n});\n});\n\nunwrapExports(clipboardAction);\n\nfunction E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    }\n    listener._ = callback;\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nvar tinyEmitter = E;\n\nvar is = createCommonjsModule(function (module, exports) {\n/**\n * Check if argument is a HTML element.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.node = function(value) {\n    return value !== undefined\n        && value instanceof HTMLElement\n        && value.nodeType === 1;\n};\n\n/**\n * Check if argument is a list of HTML elements.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.nodeList = function(value) {\n    var type = Object.prototype.toString.call(value);\n\n    return value !== undefined\n        && (type === '[object NodeList]' || type === '[object HTMLCollection]')\n        && ('length' in value)\n        && (value.length === 0 || exports.node(value[0]));\n};\n\n/**\n * Check if argument is a string.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.string = function(value) {\n    return typeof value === 'string'\n        || value instanceof String;\n};\n\n/**\n * Check if argument is a function.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.fn = function(value) {\n    var type = Object.prototype.toString.call(value);\n\n    return type === '[object Function]';\n};\n});\nvar is_1 = is.node;\nvar is_2 = is.nodeList;\nvar is_3 = is.string;\nvar is_4 = is.fn;\n\nvar DOCUMENT_NODE_TYPE = 9;\n\n/**\n * A polyfill for Element.matches()\n */\nif (typeof Element !== 'undefined' && !Element.prototype.matches) {\n    var proto = Element.prototype;\n\n    proto.matches = proto.matchesSelector ||\n                    proto.mozMatchesSelector ||\n                    proto.msMatchesSelector ||\n                    proto.oMatchesSelector ||\n                    proto.webkitMatchesSelector;\n}\n\n/**\n * Finds the closest parent that matches a selector.\n *\n * @param {Element} element\n * @param {String} selector\n * @return {Function}\n */\nfunction closest (element, selector) {\n    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {\n        if (typeof element.matches === 'function' &&\n            element.matches(selector)) {\n          return element;\n        }\n        element = element.parentNode;\n    }\n}\n\nvar closest_1 = closest;\n\n/**\n * Delegates event to a selector.\n *\n * @param {Element} element\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @param {Boolean} useCapture\n * @return {Object}\n */\nfunction _delegate(element, selector, type, callback, useCapture) {\n    var listenerFn = listener.apply(this, arguments);\n\n    element.addEventListener(type, listenerFn, useCapture);\n\n    return {\n        destroy: function() {\n            element.removeEventListener(type, listenerFn, useCapture);\n        }\n    }\n}\n\n/**\n * Delegates event to a selector.\n *\n * @param {Element|String|Array} [elements]\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @param {Boolean} useCapture\n * @return {Object}\n */\nfunction delegate(elements, selector, type, callback, useCapture) {\n    // Handle the regular Element usage\n    if (typeof elements.addEventListener === 'function') {\n        return _delegate.apply(null, arguments);\n    }\n\n    // Handle Element-less usage, it defaults to global delegation\n    if (typeof type === 'function') {\n        // Use `document` as the first parameter, then apply arguments\n        // This is a short way to .unshift `arguments` without running into deoptimizations\n        return _delegate.bind(null, document).apply(null, arguments);\n    }\n\n    // Handle Selector-based usage\n    if (typeof elements === 'string') {\n        elements = document.querySelectorAll(elements);\n    }\n\n    // Handle Array-like based usage\n    return Array.prototype.map.call(elements, function (element) {\n        return _delegate(element, selector, type, callback, useCapture);\n    });\n}\n\n/**\n * Finds closest match and invokes callback.\n *\n * @param {Element} element\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Function}\n */\nfunction listener(element, selector, type, callback) {\n    return function(e) {\n        e.delegateTarget = closest_1(e.target, selector);\n\n        if (e.delegateTarget) {\n            callback.call(element, e);\n        }\n    }\n}\n\nvar delegate_1 = delegate;\n\n/**\n * Validates all params and calls the right\n * listener function based on its target type.\n *\n * @param {String|HTMLElement|HTMLCollection|NodeList} target\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listen(target, type, callback) {\n    if (!target && !type && !callback) {\n        throw new Error('Missing required arguments');\n    }\n\n    if (!is.string(type)) {\n        throw new TypeError('Second argument must be a String');\n    }\n\n    if (!is.fn(callback)) {\n        throw new TypeError('Third argument must be a Function');\n    }\n\n    if (is.node(target)) {\n        return listenNode(target, type, callback);\n    }\n    else if (is.nodeList(target)) {\n        return listenNodeList(target, type, callback);\n    }\n    else if (is.string(target)) {\n        return listenSelector(target, type, callback);\n    }\n    else {\n        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');\n    }\n}\n\n/**\n * Adds an event listener to a HTML element\n * and returns a remove listener function.\n *\n * @param {HTMLElement} node\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenNode(node, type, callback) {\n    node.addEventListener(type, callback);\n\n    return {\n        destroy: function() {\n            node.removeEventListener(type, callback);\n        }\n    }\n}\n\n/**\n * Add an event listener to a list of HTML elements\n * and returns a remove listener function.\n *\n * @param {NodeList|HTMLCollection} nodeList\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenNodeList(nodeList, type, callback) {\n    Array.prototype.forEach.call(nodeList, function(node) {\n        node.addEventListener(type, callback);\n    });\n\n    return {\n        destroy: function() {\n            Array.prototype.forEach.call(nodeList, function(node) {\n                node.removeEventListener(type, callback);\n            });\n        }\n    }\n}\n\n/**\n * Add an event listener to a selector\n * and returns a remove listener function.\n *\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenSelector(selector, type, callback) {\n    return delegate_1(document.body, selector, type, callback);\n}\n\nvar listen_1 = listen;\n\nvar clipboard = createCommonjsModule(function (module, exports) {\n(function (global, factory) {\n    if (typeof undefined === \"function\" && undefined.amd) {\n        undefined(['module', './clipboard-action', 'tiny-emitter', 'good-listener'], factory);\n    } else {\n        factory(module, clipboardAction, tinyEmitter, listen_1);\n    }\n})(commonjsGlobal, function (module, _clipboardAction, _tinyEmitter, _goodListener) {\n\n    var _clipboardAction2 = _interopRequireDefault(_clipboardAction);\n\n    var _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);\n\n    var _goodListener2 = _interopRequireDefault(_goodListener);\n\n    function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            default: obj\n        };\n    }\n\n    var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n    } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) defineProperties(Constructor, staticProps);\n            return Constructor;\n        };\n    }();\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n                value: subClass,\n                enumerable: false,\n                writable: true,\n                configurable: true\n            }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var Clipboard = function (_Emitter) {\n        _inherits(Clipboard, _Emitter);\n\n        /**\n         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n         * @param {Object} options\n         */\n        function Clipboard(trigger, options) {\n            _classCallCheck(this, Clipboard);\n\n            var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));\n\n            _this.resolveOptions(options);\n            _this.listenClick(trigger);\n            return _this;\n        }\n\n        /**\n         * Defines if attributes would be resolved using internal setter functions\n         * or custom functions that were passed in the constructor.\n         * @param {Object} options\n         */\n\n\n        _createClass(Clipboard, [{\n            key: 'resolveOptions',\n            value: function resolveOptions() {\n                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n                this.action = typeof options.action === 'function' ? options.action : this.defaultAction;\n                this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;\n                this.text = typeof options.text === 'function' ? options.text : this.defaultText;\n                this.container = _typeof(options.container) === 'object' ? options.container : document.body;\n            }\n        }, {\n            key: 'listenClick',\n            value: function listenClick(trigger) {\n                var _this2 = this;\n\n                this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {\n                    return _this2.onClick(e);\n                });\n            }\n        }, {\n            key: 'onClick',\n            value: function onClick(e) {\n                var trigger = e.delegateTarget || e.currentTarget;\n\n                if (this.clipboardAction) {\n                    this.clipboardAction = null;\n                }\n\n                this.clipboardAction = new _clipboardAction2.default({\n                    action: this.action(trigger),\n                    target: this.target(trigger),\n                    text: this.text(trigger),\n                    container: this.container,\n                    trigger: trigger,\n                    emitter: this\n                });\n            }\n        }, {\n            key: 'defaultAction',\n            value: function defaultAction(trigger) {\n                return getAttributeValue('action', trigger);\n            }\n        }, {\n            key: 'defaultTarget',\n            value: function defaultTarget(trigger) {\n                var selector = getAttributeValue('target', trigger);\n\n                if (selector) {\n                    return document.querySelector(selector);\n                }\n            }\n        }, {\n            key: 'defaultText',\n            value: function defaultText(trigger) {\n                return getAttributeValue('text', trigger);\n            }\n        }, {\n            key: 'destroy',\n            value: function destroy() {\n                this.listener.destroy();\n\n                if (this.clipboardAction) {\n                    this.clipboardAction.destroy();\n                    this.clipboardAction = null;\n                }\n            }\n        }], [{\n            key: 'isSupported',\n            value: function isSupported() {\n                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];\n\n                var actions = typeof action === 'string' ? [action] : action;\n                var support = !!document.queryCommandSupported;\n\n                actions.forEach(function (action) {\n                    support = support && !!document.queryCommandSupported(action);\n                });\n\n                return support;\n            }\n        }]);\n\n        return Clipboard;\n    }(_tinyEmitter2.default);\n\n    /**\n     * Helper function to retrieve attribute value.\n     * @param {String} suffix\n     * @param {Element} element\n     */\n    function getAttributeValue(suffix, element) {\n        var attribute = 'data-clipboard-' + suffix;\n\n        if (!element.hasAttribute(attribute)) {\n            return;\n        }\n\n        return element.getAttribute(attribute);\n    }\n\n    module.exports = Clipboard;\n});\n});\n\nvar Clipboard = unwrapExports(clipboard);\n\nif (!Clipboard) {\n  throw new Error('[vue-clipboards] cannot locate Clipboard.');\n}\n\nfunction isDom(obj) {\n  return _typeof(window.HTMLElement) === 'object' ? obj instanceof window.HTMLElement : obj && _typeof(obj) === 'object' && obj.nodeType === 1 && typeof obj.nodeName === 'string';\n}\n\nfunction doubleClickHandler(e) {\n  var target = e.target;\n\n  if (document.createRange) {\n    var rng = document.createRange();\n    var sel = window.getSelection();\n    rng.selectNode(target);\n    sel.removeAllRanges();\n    sel.addRange(rng);\n  } else {\n    var _rng = document.body.createTextRange();\n\n    _rng.moveToElementText(target);\n\n    _rng.select();\n  }\n}\n\nvar clipboard$1 = {\n  bind: function bind(el, _ref, vnode) {\n    return new Promise(function ($return, $error) {\n      var text, modifiers, option, $parent, componentOptions, data, listeners, on, events, withNativeSelection;\n      text = _ref.value, modifiers = _ref.modifiers;\n      option = {};\n      $parent = null;\n\n      if (text && typeof text === 'function') {\n        return Promise.resolve(text()).then(function ($await_2) {\n          try {\n            text = $await_2;\n            return $If_1.call(this);\n          } catch ($boundEx) {\n            return $error($boundEx);\n          }\n        }.bind(this), $error);\n      }\n\n      function $If_1() {\n        if (/(string|number)/.test(_typeof(text))) {\n          option.text = function () {\n            return \"\".concat(text);\n          };\n        } else {\n          return $error(new Error('[vue-clipboards] Invalid value. Please use a valid value.'));\n        }\n\n        if (vnode.data.attrs && vnode.data.attrs.model) {\n          $parent = isDom(vnode.data.attrs.model) ? vnode.data.attrs.model : document.querySelector(vnode.data.attrs.model);\n        } // 修复按钮脱离文档流时，clipboard监听失败问题\n\n\n        if (vnode.elm.offsetParent) {\n          option.container = vnode.elm.offsetParent;\n        } else if (isDom($parent)) {\n          option.container = $parent;\n        } else {\n          // if root element should use document.body\n          option.container = el.parentElement || document.body;\n        }\n\n        vnode.elm.$clipboards = new Clipboard(el, option);\n        componentOptions = vnode.componentOptions, data = vnode.data;\n        listeners = componentOptions ? componentOptions.listeners : null;\n        on = data ? data.on : null;\n        events = listeners && listeners || on && on;\n\n        if (events && _typeof(events) === 'object' && Object.keys(events).length) {\n          // fixed with Vue 2.2.x, event object `fn` rename to `fns`\n          Object.keys(events).map(function (cb) {\n            return vnode.elm.$clipboards.on(cb, events[cb].fn || events[cb].fns);\n          });\n        } // add native user selection for dblclick\n\n\n        withNativeSelection = modifiers.nselect || false;\n\n        if (withNativeSelection) {\n          vnode.elm.addEventListener('dblclick', doubleClickHandler);\n        }\n\n        return $return(vnode.elm.$clipboards);\n      }\n\n      return $If_1.call(this);\n    });\n  },\n  unbind: function unbind(vnode) {\n    if (vnode.elm && vnode.elm.$clipboards && vnode.elm.$clipboards.destroy) {\n      vnode.elm.$clipboards.destroy();\n      vnode.elm.removeEventListener('dblclick', doubleClickHandler);\n      delete vnode.elm.$clipboards;\n    }\n  },\n  update: function update(el, binding, vnode) {\n    binding.def.unbind(vnode);\n    vnode.elm.removeEventListener('dblclick', doubleClickHandler);\n    binding.def.bind(el, binding, vnode);\n  }\n};\nfunction vueClipboards (Vue) {\n  Vue.directive('clipboard', clipboard$1);\n}\n\nexport default vueClipboards;\nexport { clipboard$1 as clipboard };\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@tangle-frost/iota-qr-lib\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@tangle-frost/iota-qr-lib\"] = factory();\n\telse\n\t\troot[\"IotaQR\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./pkg/bootstrap.js\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"../iota-core/dist/data/color.js\":\n/*!***************************************!*\\\n  !*** ../iota-core/dist/data/color.js ***!\n  \\***************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar numberHelper_1 = __webpack_require__(/*! ../helpers/numberHelper */ \"../iota-core/dist/helpers/numberHelper.js\");\n\nvar stringHelper_1 = __webpack_require__(/*! ../helpers/stringHelper */ \"../iota-core/dist/helpers/stringHelper.js\");\n/**\r\n * Class to represent a color.\r\n */\n\n\nvar Color =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Create a new instance of color.\r\n   * @param alpha The alpha element of the color.\r\n   * @param red The red element of the color.\r\n   * @param green The green element of the color.\r\n   * @param blue The blue element of the color.\r\n   */\n  function Color(alpha, red, green, blue) {\n    _classCallCheck(this, Color);\n\n    if (!numberHelper_1.NumberHelper.isInteger(alpha) || alpha < 0 || alpha > 255) {\n      throw new Error(\"The alpha parameter must be a number >= 0 and <= 255\");\n    }\n\n    if (!numberHelper_1.NumberHelper.isInteger(red) || red < 0 || red > 255) {\n      throw new Error(\"The red parameter must be a number >= 0 and <= 255\");\n    }\n\n    if (!numberHelper_1.NumberHelper.isInteger(green) || green < 0 || green > 255) {\n      throw new Error(\"The green parameter must be a number >= 0 and <= 255\");\n    }\n\n    if (!numberHelper_1.NumberHelper.isInteger(blue) || blue < 0 || blue > 255) {\n      throw new Error(\"The blue parameter must be a number >= 0 and <= 255\");\n    }\n\n    this._alpha = alpha;\n    this._red = red;\n    this._green = green;\n    this._blue = blue;\n  }\n  /**\r\n   * Construct a color from a hex string.\r\n   * @param hex The hex string to parse.\r\n   * @returns The color.\r\n   */\n\n\n  _createClass(Color, [{\n    key: \"alpha\",\n\n    /**\r\n     * Get the alpha element.\r\n     * @returns The alpha element.\r\n     */\n    value: function alpha() {\n      return this._alpha;\n    }\n    /**\r\n     * Get the red element.\r\n     * @returns The red element.\r\n     */\n\n  }, {\n    key: \"red\",\n    value: function red() {\n      return this._red;\n    }\n    /**\r\n     * Get the green element.\r\n     * @returns The green element.\r\n     */\n\n  }, {\n    key: \"green\",\n    value: function green() {\n      return this._green;\n    }\n    /**\r\n     * Get the blue element.\r\n     * @returns The blue element.\r\n     */\n\n  }, {\n    key: \"blue\",\n    value: function blue() {\n      return this._blue;\n    }\n    /**\r\n     * Get color as argb.\r\n     * @returns The color as argb.\r\n     */\n\n  }, {\n    key: \"argb\",\n    value: function argb() {\n      return (this._alpha << 24 | this._red << 16 | this._green << 8 | this._blue) >>> 0;\n    }\n    /**\r\n     * Get color as rgba.\r\n     * @returns The color as rgba.\r\n     */\n\n  }, {\n    key: \"rgba\",\n    value: function rgba() {\n      return (this._red << 24 | this._green << 16 | this._blue << 8 | this._alpha) >>> 0;\n    }\n    /**\r\n     * Get color as rgb text.\r\n     * @returns The color as rgb.\r\n     */\n\n  }, {\n    key: \"rgbText\",\n    value: function rgbText() {\n      return \"rgb(\".concat(this._red, \",\").concat(this._green, \",\").concat(this._blue, \")\");\n    }\n    /**\r\n     * Get color as rgba text.\r\n     * @returns The color as rgba.\r\n     */\n\n  }, {\n    key: \"rgbaText\",\n    value: function rgbaText() {\n      return \"rgba(\".concat(this._red, \",\").concat(this._green, \",\").concat(this._blue, \",\").concat(Math.round(this._alpha / 255 * 100) / 100, \")\");\n    }\n    /**\r\n     * Get color as hex no alpha.\r\n     * @returns The color as hex with no alpha component.\r\n     */\n\n  }, {\n    key: \"hex\",\n    value: function hex() {\n      var red = \"00\".concat(this._red.toString(16)).slice(-2);\n      var green = \"00\".concat(this._green.toString(16)).slice(-2);\n      var blue = \"00\".concat(this._blue.toString(16)).slice(-2);\n      return \"#\".concat(red).concat(green).concat(blue).toUpperCase();\n    }\n    /**\r\n     * Get color as hex with alpha.\r\n     * @returns The color as hex with with alpha component.\r\n     */\n\n  }, {\n    key: \"hexWithAlpha\",\n    value: function hexWithAlpha() {\n      var alpha = \"00\".concat(this._alpha.toString(16)).slice(-2);\n      var red = \"00\".concat(this._red.toString(16)).slice(-2);\n      var green = \"00\".concat(this._green.toString(16)).slice(-2);\n      var blue = \"00\".concat(this._blue.toString(16)).slice(-2);\n      return \"#\".concat(alpha).concat(red).concat(green).concat(blue).toUpperCase();\n    }\n  }], [{\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      if (!stringHelper_1.StringHelper.isString(hex)) {\n        throw new Error(\"The hex parameter can not be empty\");\n      }\n\n      var alpha;\n      var red;\n      var green;\n      var blue;\n\n      if (/^#[A-Fa-f0-9]{3}$/.test(hex)) {\n        // #RGB\n        alpha = \"0xFF\";\n        red = hex.substr(1, 1).repeat(2);\n        green = hex.substr(2, 1).repeat(2);\n        blue = hex.substr(3, 1).repeat(2);\n      } else if (/^#[A-Fa-f0-9]{4}$/.test(hex)) {\n        // #ARGB\n        alpha = hex.substr(1, 1).repeat(2);\n        red = hex.substr(2, 1).repeat(2);\n        green = hex.substr(3, 1).repeat(2);\n        blue = hex.substr(4, 1).repeat(2);\n      } else if (/^#[A-Fa-f0-9]{6}$/.test(hex)) {\n        // #RRGGBB\n        alpha = \"0xFF\";\n        red = hex.substr(1, 2);\n        green = hex.substr(3, 2);\n        blue = hex.substr(5, 2);\n      } else if (/^#[A-Fa-f0-9]{8}$/.test(hex)) {\n        // #AARRGGBB\n        alpha = hex.substr(1, 2);\n        red = hex.substr(3, 2);\n        green = hex.substr(5, 2);\n        blue = hex.substr(7, 2);\n      } else {\n        throw new Error(\"The hex color must be one of the following formats #RGB, #ARGB, #RRGGBB, #AARRGGBB\");\n      }\n\n      return new Color(parseInt(alpha, 16), parseInt(red, 16), parseInt(green, 16), parseInt(blue, 16));\n    }\n  }]);\n\n  return Color;\n}();\n\nexports.Color = Color;\n\n/***/ }),\n\n/***/ \"../iota-core/dist/data/linearGradient.js\":\n/*!************************************************!*\\\n  !*** ../iota-core/dist/data/linearGradient.js ***!\n  \\************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar arrayHelper_1 = __webpack_require__(/*! ../helpers/arrayHelper */ \"../iota-core/dist/helpers/arrayHelper.js\");\n\nvar numberHelper_1 = __webpack_require__(/*! ../helpers/numberHelper */ \"../iota-core/dist/helpers/numberHelper.js\");\n\nvar objectHelper_1 = __webpack_require__(/*! ../helpers/objectHelper */ \"../iota-core/dist/helpers/objectHelper.js\");\n/**\r\n * Class to represent a linear gradient.\r\n */\n\n\nvar LinearGradient =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Create a new instance of linear gradient.\r\n   * @param stops The stop for the gradient.\r\n   * @param angle The angle for the gradient.\r\n   */\n  function LinearGradient(stops, angle) {\n    _classCallCheck(this, LinearGradient);\n\n    if (!arrayHelper_1.ArrayHelper.isArray(stops)) {\n      throw new Error(\"The stops array must not be empty\");\n    }\n\n    if (!objectHelper_1.ObjectHelper.isEmpty(angle) && !numberHelper_1.NumberHelper.isInteger(angle)) {\n      throw new Error(\"The angle must be a number\");\n    }\n\n    this._stops = stops;\n    this._angle = angle;\n  }\n  /**\r\n   * Get the stops.\r\n   * @returns The stops.\r\n   */\n\n\n  _createClass(LinearGradient, [{\n    key: \"stops\",\n    value: function stops() {\n      return this._stops;\n    }\n    /**\r\n     * Get the angle.\r\n     * @returns The angle.\r\n     */\n\n  }, {\n    key: \"angle\",\n    value: function angle() {\n      return this._angle;\n    }\n  }]);\n\n  return LinearGradient;\n}();\n\nexports.LinearGradient = LinearGradient;\n\n/***/ }),\n\n/***/ \"../iota-core/dist/data/radialGradient.js\":\n/*!************************************************!*\\\n  !*** ../iota-core/dist/data/radialGradient.js ***!\n  \\************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar arrayHelper_1 = __webpack_require__(/*! ../helpers/arrayHelper */ \"../iota-core/dist/helpers/arrayHelper.js\");\n\nvar numberHelper_1 = __webpack_require__(/*! ../helpers/numberHelper */ \"../iota-core/dist/helpers/numberHelper.js\");\n\nvar objectHelper_1 = __webpack_require__(/*! ../helpers/objectHelper */ \"../iota-core/dist/helpers/objectHelper.js\");\n/**\r\n * Class to represent a radial gradient.\r\n */\n\n\nvar RadialGradient =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Create a new instance of radial gradient.\r\n   * @param stops The stop for the gradient.\r\n   * @param offsetXPercent The offsetXPercent for the gradient.\r\n   * @param offsetYPercent The offsetYPercent for the gradient.\r\n   * @param radiusPercent The radiusPercent for the gradient.\r\n   */\n  function RadialGradient(stops, offsetXPercent, offsetYPercent, radiusPercent) {\n    _classCallCheck(this, RadialGradient);\n\n    if (!arrayHelper_1.ArrayHelper.isArray(stops)) {\n      throw new Error(\"The stops array must not be empty\");\n    }\n\n    if (!objectHelper_1.ObjectHelper.isEmpty(offsetXPercent) && !numberHelper_1.NumberHelper.isInteger(offsetXPercent)) {\n      throw new Error(\"The offsetXPercent must be a number\");\n    }\n\n    if (!objectHelper_1.ObjectHelper.isEmpty(offsetYPercent) && !numberHelper_1.NumberHelper.isInteger(offsetYPercent)) {\n      throw new Error(\"The offsetYPercent must be a number\");\n    }\n\n    if (!objectHelper_1.ObjectHelper.isEmpty(radiusPercent) && !numberHelper_1.NumberHelper.isInteger(radiusPercent)) {\n      throw new Error(\"The radiusPercent must be a number\");\n    }\n\n    this._stops = stops;\n    this._offsetXPercent = offsetXPercent;\n    this._offsetYPercent = offsetYPercent;\n    this._radiusPercent = radiusPercent;\n  }\n  /**\r\n   * Get the stops.\r\n   * @returns The stops.\r\n   */\n\n\n  _createClass(RadialGradient, [{\n    key: \"stops\",\n    value: function stops() {\n      return this._stops;\n    }\n    /**\r\n     * Get the offsetXPercent.\r\n     * @returns The offsetXPercent.\r\n     */\n\n  }, {\n    key: \"offsetXPercent\",\n    value: function offsetXPercent() {\n      return this._offsetXPercent;\n    }\n    /**\r\n     * Get the offsetYPercent.\r\n     * @returns The offsetYPercent.\r\n     */\n\n  }, {\n    key: \"offsetYPercent\",\n    value: function offsetYPercent() {\n      return this._offsetYPercent;\n    }\n    /**\r\n     * Get the radiusPercent.\r\n     * @returns The radiusPercent.\r\n     */\n\n  }, {\n    key: \"radiusPercent\",\n    value: function radiusPercent() {\n      return this._radiusPercent;\n    }\n  }]);\n\n  return RadialGradient;\n}();\n\nexports.RadialGradient = RadialGradient;\n\n/***/ }),\n\n/***/ \"../iota-core/dist/factories/factoryBase.js\":\n/*!**************************************************!*\\\n  !*** ../iota-core/dist/factories/factoryBase.js ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Factory to generate types.\r\n * @typeparam T The generic type for the object types in the factory.\r\n */\n\nvar FactoryBase =\n/*#__PURE__*/\nfunction () {\n  function FactoryBase() {\n    _classCallCheck(this, FactoryBase);\n\n    /* @internal */\n    this._types = {};\n  }\n  /**\r\n   * Register a new type with the factory.\r\n   * @param name The name of the type to register.\r\n   * @param typeConstructor The constructor for the type.\r\n   */\n\n\n  _createClass(FactoryBase, [{\n    key: \"register\",\n    value: function register(name, typeConstructor) {\n      this.getInstance()._types[name] = typeConstructor;\n    }\n    /**\r\n     * Unregister a type from the factory.\r\n     * @param name The name of the type to unregister.\r\n     */\n\n  }, {\n    key: \"unregister\",\n    value: function unregister(name) {\n      delete this.getInstance()._types[name];\n    }\n    /**\r\n     * Does the factory contain a specific type.\r\n     * @param name The name of the type to look for.\r\n     * @returns True if the type exists.\r\n     */\n\n  }, {\n    key: \"exists\",\n    value: function exists(name) {\n      return this.getInstance()._types[name] !== undefined;\n    }\n    /**\r\n     * List the types in the factory.\r\n     * @param name The name of the type to look for.\r\n     * @returns True if the type exists.\r\n     */\n\n  }, {\n    key: \"types\",\n    value: function types() {\n      return Object.keys(this.getInstance()._types);\n    }\n    /**\r\n     * Create an instance of an object from the factory.\r\n     * @param name The name of the type to create.\r\n     * @param args Any parameters to pass to the constructor.\r\n     * @returns A new instance of the type if it exists, or undefined if it does not.\r\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(name) {\n      var instance = this.getInstance();\n\n      if (instance._types[name]) {\n        var _instance$_types;\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        return (_instance$_types = instance._types)[name].apply(_instance$_types, args);\n      } else {\n        return undefined;\n      }\n    }\n  }]);\n\n  return FactoryBase;\n}();\n\nexports.FactoryBase = FactoryBase;\n\n/***/ }),\n\n/***/ \"../iota-core/dist/helpers/arrayHelper.js\":\n/*!************************************************!*\\\n  !*** ../iota-core/dist/helpers/arrayHelper.js ***!\n  \\************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar objectHelper_1 = __webpack_require__(/*! ./objectHelper */ \"../iota-core/dist/helpers/objectHelper.js\");\n/**\r\n * Array helper methods.\r\n */\n\n\nvar ArrayHelper =\n/*#__PURE__*/\nfunction () {\n  function ArrayHelper() {\n    _classCallCheck(this, ArrayHelper);\n  }\n\n  _createClass(ArrayHelper, null, [{\n    key: \"isArray\",\n\n    /**\r\n     * Is the value an array.\r\n     * @param value Object to test.\r\n     * @returns True if the value is an array.\r\n     */\n    value: function isArray(value) {\n      return value === null || value === undefined ? false : Array.isArray(value);\n    }\n    /**\r\n     * Is the value a empty array.\r\n     * @param value Object to test.\r\n     * @returns True if the value is a empty array.\r\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty(value) {\n      return !ArrayHelper.isArray(value) || value.length === 0;\n    }\n    /**\r\n     * Is the value a non empty array of specific type.\r\n     * @param value Object to test.\r\n     * @param type The type of the object\r\n     * @returns True if the value is a non empty array of a specific type.\r\n     */\n\n  }, {\n    key: \"isTyped\",\n    value: function isTyped(value, type) {\n      return !ArrayHelper.isEmpty(value) && !value.includes(undefined) && !value.includes(null) && value.every(function (a) {\n        return objectHelper_1.ObjectHelper.isType(a, type);\n      });\n    }\n  }]);\n\n  return ArrayHelper;\n}();\n\nexports.ArrayHelper = ArrayHelper;\n\n/***/ }),\n\n/***/ \"../iota-core/dist/helpers/numberHelper.js\":\n/*!*************************************************!*\\\n  !*** ../iota-core/dist/helpers/numberHelper.js ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Number helper methods.\r\n */\n\nvar NumberHelper =\n/*#__PURE__*/\nfunction () {\n  function NumberHelper() {\n    _classCallCheck(this, NumberHelper);\n  }\n\n  _createClass(NumberHelper, null, [{\n    key: \"isInteger\",\n\n    /**\r\n     * Is the value an integer.\r\n     * @param value Object to test for its integerness.\r\n     * @returns True if the object is a integer.\r\n     */\n    value: function isInteger(value) {\n      return typeof value === \"number\" && !Number.isNaN(value) && Number.isFinite(value) && Math.floor(value) === value;\n    }\n    /**\r\n     * Is the value a number.\r\n     * @param value Object to test for its numberyness.\r\n     * @returns True if the object is a number.\r\n     */\n\n  }, {\n    key: \"isNumber\",\n    value: function isNumber(value) {\n      return value !== undefined && value !== null && typeof value === \"number\" && !Number.isNaN(value) && Number.isFinite(value);\n    }\n  }]);\n\n  return NumberHelper;\n}();\n\nexports.NumberHelper = NumberHelper;\n\n/***/ }),\n\n/***/ \"../iota-core/dist/helpers/objectHelper.js\":\n/*!*************************************************!*\\\n  !*** ../iota-core/dist/helpers/objectHelper.js ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Object helper methods.\r\n */\n\nvar ObjectHelper =\n/*#__PURE__*/\nfunction () {\n  function ObjectHelper() {\n    _classCallCheck(this, ObjectHelper);\n  }\n\n  _createClass(ObjectHelper, null, [{\n    key: \"isEmpty\",\n\n    /**\r\n     * Is the value empty.\r\n     * @param value Object to test.\r\n     * @returns True if the value is empty.\r\n     */\n    value: function isEmpty(value) {\n      return value === null || value === undefined;\n    }\n    /**\r\n     * Is the value an object.\r\n     * @param value Object to test.\r\n     * @returns True if the value is an object.\r\n     */\n\n  }, {\n    key: \"isObject\",\n    value: function isObject(value) {\n      return value === null || value === undefined ? false : _typeof(value) === \"object\" && !Array.isArray(value);\n    }\n    /**\r\n     * Is the value an object if given type.\r\n     * @param value Object to test.\r\n     * @param typeConstructor A callback method which returns an instance of the object.\r\n     * @returns True if the value is an object of the specified type.\r\n     */\n\n  }, {\n    key: \"isType\",\n    value: function isType(value, typeConstructor) {\n      var valueClassName = ObjectHelper.getClassName(value);\n      return valueClassName !== undefined && valueClassName === ObjectHelper.getClassName(typeConstructor);\n    }\n    /**\r\n     * Get the class name of an object if it has one.\r\n     * @param object The object to get the class name for.\r\n     * @returns The class name if it has one or undefined if not.\r\n     */\n\n  }, {\n    key: \"getClassName\",\n    value: function getClassName(object) {\n      if (object === null || object === undefined) {\n        return undefined;\n      } else {\n        var _constructor = typeof object === \"function\" ? object.toString() : object.constructor.toString();\n\n        var results = _constructor.match(/\\w+/g);\n\n        return results && results.length > 1 ? results[1] : undefined;\n      }\n    }\n  }]);\n\n  return ObjectHelper;\n}();\n\nexports.ObjectHelper = ObjectHelper;\n\n/***/ }),\n\n/***/ \"../iota-core/dist/helpers/stringHelper.js\":\n/*!*************************************************!*\\\n  !*** ../iota-core/dist/helpers/stringHelper.js ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * String helper methods.\r\n */\n\nvar StringHelper =\n/*#__PURE__*/\nfunction () {\n  function StringHelper() {\n    _classCallCheck(this, StringHelper);\n  }\n\n  _createClass(StringHelper, null, [{\n    key: \"isString\",\n\n    /**\r\n     * Is the value a string.\r\n     * @param value Object to test for its stringyness.\r\n     * @returns True if the object is a string.\r\n     */\n    value: function isString(value) {\n      return value === null || value === undefined ? false : Object.prototype.toString.call(value) === \"[object String]\";\n    }\n    /**\r\n     * Is the value a string that is empty.\r\n     * @param value Object to test for its no emptyness.\r\n     * @returns True if the object is an empty string.\r\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty(value) {\n      return !StringHelper.isString(value) || value.length === 0;\n    }\n    /**\r\n     * Is the string all ASCII characters.\r\n     * @param value string to test if it is ASCII.\r\n     * @returns True if the object is all ASCII.\r\n     */\n\n  }, {\n    key: \"isASCII\",\n    value: function isASCII(value) {\n      return value === null || value === undefined ? false : /^[\\x00-\\x7F]*$/.test(value);\n    }\n    /**\r\n     * Is the string all printable characters, including tab, carriage return and line feed.\r\n     * @param value string to test if it is printabl.\r\n     * @returns True if the object is all printable\r\n     */\n\n  }, {\n    key: \"isPrintable\",\n    value: function isPrintable(value) {\n      return value === null || value === undefined ? false : /^[\\x09\\x0A\\x0D\\x20-\\xFF]*$/.test(value);\n    }\n    /**\r\n     * Encode non ASCII characters with control characters.\r\n     * @param value The string value to escape.\r\n     * @returns The escaped version of the string.\r\n     */\n\n  }, {\n    key: \"encodeNonASCII\",\n    value: function encodeNonASCII(value) {\n      return StringHelper.isString(value) ? value.replace(/[\\u0080-\\uFFFF]/g, function (chr) {\n        return \"\\\\u\".concat(\"0000\".concat(chr.charCodeAt(0).toString(16)).substr(-4));\n      }) : undefined;\n    }\n    /**\r\n     * Decode control characters to ASCII.\r\n     * @param value The encoded string to convert back to ASCII.\r\n     * @returns The decoded version of the string.\r\n     */\n\n  }, {\n    key: \"decodeNonASCII\",\n    value: function decodeNonASCII(value) {\n      return StringHelper.isString(value) ? value.replace(/\\\\u([\\d\\w]{4})/gi, function (match, grp) {\n        return String.fromCharCode(parseInt(grp, 16));\n      }) : undefined;\n    }\n  }]);\n\n  return StringHelper;\n}();\n\nexports.StringHelper = StringHelper;\n\n/***/ }),\n\n/***/ \"../iota-core/dist/helpers/trytesHelper.js\":\n/*!*************************************************!*\\\n  !*** ../iota-core/dist/helpers/trytesHelper.js ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar stringHelper_1 = __webpack_require__(/*! ./stringHelper */ \"../iota-core/dist/helpers/stringHelper.js\");\n/**\r\n * Class to manipulate Trytes.\r\n */\n\n\nvar TrytesHelper =\n/*#__PURE__*/\nfunction () {\n  function TrytesHelper() {\n    _classCallCheck(this, TrytesHelper);\n  }\n\n  _createClass(TrytesHelper, null, [{\n    key: \"to\",\n\n    /**\r\n     * Convert a string value into trytes.\r\n     * @param value The value to convert into trytes.\r\n     * @returns The trytes representation of the value.\r\n     */\n    value: function to(value) {\n      var trytes = \"\";\n\n      if (stringHelper_1.StringHelper.isEmpty(value)) {\n        throw new Error(\"The value can not be empty\");\n      }\n\n      for (var i = 0; i < value.length; i++) {\n        var asciiValue = value.charCodeAt(i);\n        var firstValue = asciiValue % 27;\n        var secondValue = (asciiValue - firstValue) / 27;\n        trytes += TrytesHelper.ALPHABET[firstValue] + TrytesHelper.ALPHABET[secondValue];\n      }\n\n      return trytes;\n    }\n    /**\r\n     * Convert trytes into a string value.\r\n     * @param trytes The trytes to convert into a string value.\r\n     * @returns The string value converted from the trytes.\r\n     */\n\n  }, {\n    key: \"from\",\n    value: function from(trytes) {\n      var ascii = \"\";\n\n      if (stringHelper_1.StringHelper.isEmpty(trytes)) {\n        throw new Error(\"The trytes can not be empty\");\n      }\n\n      if (trytes.length % 2 === 1) {\n        throw new Error(\"The trytes length must be an even number, it is \".concat(trytes.length));\n      }\n\n      if (!TrytesHelper.isTrytes(trytes)) {\n        throw new Error(\"The trytes contains non-tryte characters\");\n      }\n\n      for (var i = 0; i < trytes.length; i += 2) {\n        var firstValue = TrytesHelper.ALPHABET.indexOf(trytes[i]);\n        var secondValue = TrytesHelper.ALPHABET.indexOf(trytes[i + 1]);\n        var decimalValue = firstValue + secondValue * 27;\n        ascii += String.fromCharCode(decimalValue);\n      }\n\n      return ascii;\n    }\n    /**\r\n     * Check to make sure all the characters in the string are tryte characters.\r\n     * @param trytes To check for validity.\r\n     * @returns true if the trytes are valid.\r\n     */\n\n  }, {\n    key: \"isTrytes\",\n    value: function isTrytes(trytes) {\n      return trytes !== null && trytes !== undefined && /^[9A-Z]+$/.test(trytes);\n    }\n  }]);\n\n  return TrytesHelper;\n}();\n/**\r\n * All the characters that can be used in trytes.\r\n */\n\n\nTrytesHelper.ALPHABET = \"9ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nexports.TrytesHelper = TrytesHelper;\n\n/***/ }),\n\n/***/ \"../iota-core/dist/index.js\":\n/*!**********************************!*\\\n  !*** ../iota-core/dist/index.js ***!\n  \\**********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Combined index of all the modules.\r\n */\n\n__export(__webpack_require__(/*! ./data/color */ \"../iota-core/dist/data/color.js\"));\n\n__export(__webpack_require__(/*! ./data/linearGradient */ \"../iota-core/dist/data/linearGradient.js\"));\n\n__export(__webpack_require__(/*! ./data/radialGradient */ \"../iota-core/dist/data/radialGradient.js\"));\n\n__export(__webpack_require__(/*! ./factories/factoryBase */ \"../iota-core/dist/factories/factoryBase.js\"));\n\n__export(__webpack_require__(/*! ./helpers/arrayHelper */ \"../iota-core/dist/helpers/arrayHelper.js\"));\n\n__export(__webpack_require__(/*! ./helpers/numberHelper */ \"../iota-core/dist/helpers/numberHelper.js\"));\n\n__export(__webpack_require__(/*! ./helpers/objectHelper */ \"../iota-core/dist/helpers/objectHelper.js\"));\n\n__export(__webpack_require__(/*! ./helpers/stringHelper */ \"../iota-core/dist/helpers/stringHelper.js\"));\n\n__export(__webpack_require__(/*! ./helpers/trytesHelper */ \"../iota-core/dist/helpers/trytesHelper.js\"));\n\n/***/ }),\n\n/***/ \"../iota-qr-core/dist/data/qrAlphaNumeric.js\":\n/*!***************************************************!*\\\n  !*** ../iota-qr-core/dist/data/qrAlphaNumeric.js ***!\n  \\***************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar qrDataBase_1 = __webpack_require__(/*! ../models/qrDataBase */ \"../iota-qr-core/dist/models/qrDataBase.js\");\n\nvar qrDataMode_1 = __webpack_require__(/*! ../models/qrDataMode */ \"../iota-qr-core/dist/models/qrDataMode.js\");\n/**\r\n * QR Data for representing a alpha numeric.\r\n * Based on https://github.com/kazuhikoarase/qrcode-generator/\r\n */\n\n\nvar QRAlphaNumeric =\n/*#__PURE__*/\nfunction (_qrDataBase_1$QRDataB) {\n  _inherits(QRAlphaNumeric, _qrDataBase_1$QRDataB);\n\n  /**\r\n   * Create a new instance of QRAlphaNumeric.\r\n   * @param data The data for the qr alpha numeric.\r\n   */\n  function QRAlphaNumeric(data) {\n    _classCallCheck(this, QRAlphaNumeric);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(QRAlphaNumeric).call(this, qrDataMode_1.QRDataMode.alphaNumeric, data));\n  }\n  /**\r\n   * Get the length of the data.\r\n   * @returns The length of the data.\r\n   */\n\n\n  _createClass(QRAlphaNumeric, [{\n    key: \"getLength\",\n    value: function getLength() {\n      return this.getData().length;\n    }\n    /**\r\n     * Write data into the buffer.\r\n     * @param buffer The buffer to write into.\r\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(buffer) {\n      var s = this.getData();\n      var i = 0;\n\n      while (i + 1 < s.length) {\n        buffer.put(this.getCode(s.charAt(i)) * 45 + this.getCode(s.charAt(i + 1)), 11);\n        i += 2;\n      }\n\n      if (i < s.length) {\n        buffer.put(this.getCode(s.charAt(i)), 6);\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"getCode\",\n    value: function getCode(c) {\n      if (c >= \"0\" && c <= \"9\") {\n        return c.charCodeAt(0) - \"0\".charCodeAt(0);\n      } else if (c >= \"A\" && c <= \"Z\") {\n        return c.charCodeAt(0) - \"A\".charCodeAt(0) + 10;\n      } else {\n        switch (c) {\n          case \" \":\n            return 36;\n\n          case \"$\":\n            return 37;\n\n          case \"%\":\n            return 38;\n\n          case \"*\":\n            return 39;\n\n          case \"+\":\n            return 40;\n\n          case \"-\":\n            return 41;\n\n          case \".\":\n            return 42;\n\n          case \"/\":\n            return 43;\n\n          case \":\":\n            return 44;\n\n          default:\n            throw new Error(\"Illegal character in string : \".concat(c));\n        }\n      }\n    }\n  }]);\n\n  return QRAlphaNumeric;\n}(qrDataBase_1.QRDataBase);\n\nexports.QRAlphaNumeric = QRAlphaNumeric;\n\n/***/ }),\n\n/***/ \"../iota-qr-core/dist/data/qrByte8.js\":\n/*!********************************************!*\\\n  !*** ../iota-qr-core/dist/data/qrByte8.js ***!\n  \\********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar qrDataBase_1 = __webpack_require__(/*! ../models/qrDataBase */ \"../iota-qr-core/dist/models/qrDataBase.js\");\n\nvar qrDataMode_1 = __webpack_require__(/*! ../models/qrDataMode */ \"../iota-qr-core/dist/models/qrDataMode.js\");\n/**\r\n * QR Data for representing a 8 bit data.\r\n * Based on https://github.com/kazuhikoarase/qrcode-generator/\r\n */\n\n\nvar QRByte8 =\n/*#__PURE__*/\nfunction (_qrDataBase_1$QRDataB) {\n  _inherits(QRByte8, _qrDataBase_1$QRDataB);\n\n  /**\r\n   * Create a new instance of QRByte8.\r\n   * @param data The data for the qr 8 bit data.\r\n   */\n  function QRByte8(data) {\n    _classCallCheck(this, QRByte8);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(QRByte8).call(this, qrDataMode_1.QRDataMode.byte8, data));\n  }\n  /**\r\n   * Get the length of the data.\r\n   * @returns The length of the data.\r\n   */\n\n\n  _createClass(QRByte8, [{\n    key: \"getLength\",\n    value: function getLength() {\n      return this.stringToBytes(this.getData()).length;\n    }\n    /**\r\n     * Write data into the buffer.\r\n     * @param buffer The buffer to write into.\r\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(buffer) {\n      var data = this.stringToBytes(this.getData());\n\n      for (var i = 0; i < data.length; i++) {\n        buffer.put(data[i], 8);\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"stringToBytes\",\n    value: function stringToBytes(str) {\n      var utf8 = [];\n\n      for (var i = 0; i < str.length; i++) {\n        var charcode = str.charCodeAt(i);\n\n        if (charcode < 0x80) {\n          utf8.push(charcode);\n        } else if (charcode < 0x800) {\n          utf8.push(0xC0 | charcode >> 6, 0x80 | charcode & 0x3F);\n        } else if (charcode < 0xD800 || charcode >= 0xE000) {\n          utf8.push(0xE0 | charcode >> 12, 0x80 | charcode >> 6 & 0x3F, 0x80 | charcode & 0x3F);\n        } else {\n          i++; // UTF-16 encodes 0x10000-0x10FFFF by\n          // subtracting 0x10000 and splitting the\n          // 20 bits of 0x0-0xFFFFF into two halves\n\n          charcode = 0x10000 + ((charcode & 0x3FF) << 10 | str.charCodeAt(i) & 0x3FF);\n          utf8.push(0xF0 | charcode >> 18, 0x80 | charcode >> 12 & 0x3F, 0x80 | charcode >> 6 & 0x3F, 0x80 | charcode & 0x3F);\n        }\n      }\n\n      return utf8;\n    }\n  }]);\n\n  return QRByte8;\n}(qrDataBase_1.QRDataBase);\n\nexports.QRByte8 = QRByte8;\n\n/***/ }),\n\n/***/ \"../iota-qr-core/dist/data/qrNumber.js\":\n/*!*********************************************!*\\\n  !*** ../iota-qr-core/dist/data/qrNumber.js ***!\n  \\*********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar qrDataBase_1 = __webpack_require__(/*! ../models/qrDataBase */ \"../iota-qr-core/dist/models/qrDataBase.js\");\n\nvar qrDataMode_1 = __webpack_require__(/*! ../models/qrDataMode */ \"../iota-qr-core/dist/models/qrDataMode.js\");\n/**\r\n * QR Data for representing a number.\r\n * Based on https://github.com/kazuhikoarase/qrcode-generator/\r\n */\n\n\nvar QRNumber =\n/*#__PURE__*/\nfunction (_qrDataBase_1$QRDataB) {\n  _inherits(QRNumber, _qrDataBase_1$QRDataB);\n\n  /**\r\n   * Create a new instance of QRNumber.\r\n   * @param data The data for the qr number.\r\n   */\n  function QRNumber(data) {\n    _classCallCheck(this, QRNumber);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(QRNumber).call(this, qrDataMode_1.QRDataMode.number, data));\n  }\n  /**\r\n   * Get the length of the data.\r\n   * @returns The length of the data.\r\n   */\n\n\n  _createClass(QRNumber, [{\n    key: \"getLength\",\n    value: function getLength() {\n      return this.getData().length;\n    }\n    /**\r\n     * Write data into the buffer.\r\n     * @param buffer The buffer to write into.\r\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(buffer) {\n      var data = this.getData();\n      var i = 0;\n\n      while (i + 2 < data.length) {\n        buffer.put(this.strToNum(data.substring(i, i + 3)), 10);\n        i += 3;\n      }\n\n      if (i < data.length) {\n        if (data.length - i === 1) {\n          buffer.put(this.strToNum(data.substring(i, i + 1)), 4);\n        } else if (data.length - i === 2) {\n          buffer.put(this.strToNum(data.substring(i, i + 2)), 7);\n        }\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"strToNum\",\n    value: function strToNum(s) {\n      var num = 0;\n\n      for (var i = 0; i < s.length; i++) {\n        num = num * 10 + this.charToNum(s.charAt(i));\n      }\n\n      return num;\n    }\n    /* @internal */\n\n  }, {\n    key: \"charToNum\",\n    value: function charToNum(c) {\n      if (c >= \"0\" && c <= \"9\") {\n        return c.charCodeAt(0) - \"0\".charCodeAt(0);\n      }\n\n      throw new Error(\"Illegal character in string : \".concat(c));\n    }\n  }]);\n\n  return QRNumber;\n}(qrDataBase_1.QRDataBase);\n\nexports.QRNumber = QRNumber;\n\n/***/ }),\n\n/***/ \"../iota-qr-core/dist/helpers/bitBuffer.js\":\n/*!*************************************************!*\\\n  !*** ../iota-qr-core/dist/helpers/bitBuffer.js ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Class for maintaining data bits.\r\n * Based on https://github.com/kazuhikoarase/qrcode-generator/\r\n */\n\nvar BitBuffer =\n/*#__PURE__*/\nfunction () {\n  function BitBuffer() {\n    _classCallCheck(this, BitBuffer);\n\n    this._buffer = [];\n    this._length = 0;\n  }\n\n  _createClass(BitBuffer, [{\n    key: \"getBuffer\",\n    value: function getBuffer() {\n      return this._buffer;\n    }\n  }, {\n    key: \"getLengthInBits\",\n    value: function getLengthInBits() {\n      return this._length;\n    }\n  }, {\n    key: \"put\",\n    value: function put(num, length) {\n      for (var i = 0; i < length; i++) {\n        this.putBit((num >>> length - i - 1 & 1) === 1);\n      }\n    }\n  }, {\n    key: \"putBit\",\n    value: function putBit(bit) {\n      if (this._length === this._buffer.length * 8) {\n        this._buffer.push(0);\n      }\n\n      if (bit) {\n        this._buffer[~~(this._length / 8)] |= 0x80 >>> this._length % 8;\n      }\n\n      this._length++;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var buffer = \"\";\n\n      for (var i = 0; i < this.getLengthInBits(); i++) {\n        buffer += this.getBit(i) ? \"1\" : \"0\";\n      }\n\n      return buffer;\n    }\n  }, {\n    key: \"getBit\",\n    value: function getBit(index) {\n      return (this._buffer[~~(index / 8)] >>> 7 - index % 8 & 1) === 1;\n    }\n  }]);\n\n  return BitBuffer;\n}();\n\nexports.BitBuffer = BitBuffer;\n\n/***/ }),\n\n/***/ \"../iota-qr-core/dist/helpers/mathHelper.js\":\n/*!**************************************************!*\\\n  !*** ../iota-qr-core/dist/helpers/mathHelper.js ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Class to helper with math.\r\n * Based on https://github.com/kazuhikoarase/qrcode-generator/\r\n */\n\nvar MathHelper =\n/*#__PURE__*/\nfunction () {\n  function MathHelper() {\n    _classCallCheck(this, MathHelper);\n  }\n\n  _createClass(MathHelper, null, [{\n    key: \"initialize\",\n\n    /**\r\n     * Initialize the math helper.\r\n     */\n    value: function initialize() {\n      if (!MathHelper.EXP_TABLE) {\n        MathHelper.EXP_TABLE = [];\n        MathHelper.LOG_TABLE = [];\n\n        for (var i = 0; i < 256; i++) {\n          MathHelper.EXP_TABLE.push(i < 8 ? 1 << i : MathHelper.EXP_TABLE[i - 4] ^ MathHelper.EXP_TABLE[i - 5] ^ MathHelper.EXP_TABLE[i - 6] ^ MathHelper.EXP_TABLE[i - 8]);\n          MathHelper.LOG_TABLE.push(0);\n        }\n\n        for (var _i = 0; _i < 255; _i++) {\n          MathHelper.LOG_TABLE[MathHelper.EXP_TABLE[_i]] = _i;\n        }\n      }\n    }\n    /**\r\n     * Get the log of the value.\r\n     * @param value The value to get the log of.\r\n     * @returns the log of the value.\r\n     */\n\n  }, {\n    key: \"glog\",\n    value: function glog(value) {\n      if (value < 1) {\n        throw new Error(\"log(' + \".concat(value, \" + ')'\"));\n      }\n\n      return MathHelper.LOG_TABLE[value];\n    }\n    /**\r\n     * Get the exponent of the value.\r\n     * @param value The value to get the exponent of.\r\n     * @returns The exponent of the value.\r\n     */\n\n  }, {\n    key: \"gexp\",\n    value: function gexp(value) {\n      var localValue = value;\n\n      while (localValue < 0) {\n        localValue += 255;\n      }\n\n      while (localValue >= 256) {\n        localValue -= 255;\n      }\n\n      return MathHelper.EXP_TABLE[localValue];\n    }\n  }]);\n\n  return MathHelper;\n}();\n\nexports.MathHelper = MathHelper;\n\n/***/ }),\n\n/***/ \"../iota-qr-core/dist/helpers/polynomial.js\":\n/*!**************************************************!*\\\n  !*** ../iota-qr-core/dist/helpers/polynomial.js ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar mathHelper_1 = __webpack_require__(/*! ./mathHelper */ \"../iota-qr-core/dist/helpers/mathHelper.js\");\n/**\r\n * Class to represent a polynomial.\r\n * Based on https://github.com/kazuhikoarase/qrcode-generator/\r\n */\n\n\nvar Polynomial =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Create a new instance of Polynomial.\r\n   * @param num The num of the polynomial.\r\n   * @param shift The shift for the polynomial.\r\n   */\n  function Polynomial(num) {\n    var shift = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, Polynomial);\n\n    var offset = 0;\n\n    while (offset < num.length && num[offset] === 0) {\n      offset++;\n    }\n\n    this._num = [];\n    var len = num.length - offset;\n\n    for (var i = 0; i < len; i++) {\n      this._num.push(num[offset + i]);\n    }\n\n    for (var _i = 0; _i < shift; _i++) {\n      this._num.push(0);\n    }\n  }\n  /**\r\n   * The the value of the polynomial at given index.\r\n   * @param index The index.\r\n   * @returns The value of the polynomial.\r\n   */\n\n\n  _createClass(Polynomial, [{\n    key: \"getAt\",\n    value: function getAt(index) {\n      return this._num[index];\n    }\n    /**\r\n     * Get the length of the polynomial.\r\n     * @returns The polynomial.\r\n     */\n\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this._num.length;\n    }\n    /**\r\n     * Convert the polynomial to a string.\r\n     * @returns The string representation of the polynomial.\r\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var buffer = \"\";\n\n      for (var i = 0; i < this.getLength(); i++) {\n        if (i > 0) {\n          buffer += \",\";\n        }\n\n        buffer += this.getAt(i);\n      }\n\n      return buffer.toString();\n    }\n    /**\r\n     * Get the log representation of the polynomial.\r\n     * @returns The log representation of the polynomial.\r\n     */\n\n  }, {\n    key: \"toLogString\",\n    value: function toLogString() {\n      var buffer = \"\";\n\n      for (var i = 0; i < this.getLength(); i++) {\n        if (i > 0) {\n          buffer += \",\";\n        }\n\n        buffer += mathHelper_1.MathHelper.glog(this.getAt(i));\n      }\n\n      return buffer.toString();\n    }\n    /**\r\n     * Multiply the polynomial with another one.\r\n     * @param e The polynomial to multiply.\r\n     * @returns The multiplication of the polynomials.\r\n     */\n\n  }, {\n    key: \"multiply\",\n    value: function multiply(e) {\n      var num = [];\n      var len = this.getLength() + e.getLength() - 1;\n\n      for (var i = 0; i < len; i++) {\n        num.push(0);\n      }\n\n      for (var _i2 = 0; _i2 < this.getLength(); _i2++) {\n        for (var j = 0; j < e.getLength(); j++) {\n          num[_i2 + j] ^= mathHelper_1.MathHelper.gexp(mathHelper_1.MathHelper.glog(this.getAt(_i2)) + mathHelper_1.MathHelper.glog(e.getAt(j)));\n        }\n      }\n\n      return new Polynomial(num);\n    }\n    /**\r\n     * Get the modulus of the polynomial from another.\r\n     * @param e The polynomial.\r\n     * @returns The modules of the polynomials.\r\n     */\n\n  }, {\n    key: \"mod\",\n    value: function mod(e) {\n      if (this.getLength() - e.getLength() < 0) {\n        return this;\n      }\n\n      var ratio = mathHelper_1.MathHelper.glog(this.getAt(0)) - mathHelper_1.MathHelper.glog(e.getAt(0)); // create copy\n\n      var num = [];\n\n      for (var i = 0; i < this.getLength(); i++) {\n        num.push(this.getAt(i));\n      } // subtract and calc rest.\n\n\n      for (var _i3 = 0; _i3 < e.getLength(); _i3++) {\n        num[_i3] ^= mathHelper_1.MathHelper.gexp(mathHelper_1.MathHelper.glog(e.getAt(_i3)) + ratio);\n      } // call recursively\n\n\n      return new Polynomial(num).mod(e);\n    }\n  }]);\n\n  return Polynomial;\n}();\n\nexports.Polynomial = Polynomial;\n\n/***/ }),\n\n/***/ \"../iota-qr-core/dist/helpers/qrHelper.js\":\n/*!************************************************!*\\\n  !*** ../iota-qr-core/dist/helpers/qrHelper.js ***!\n  \\************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar errorCorrectLevel_1 = __webpack_require__(/*! ../models/errorCorrectLevel */ \"../iota-qr-core/dist/models/errorCorrectLevel.js\");\n\nvar maskPattern_1 = __webpack_require__(/*! ../models/maskPattern */ \"../iota-qr-core/dist/models/maskPattern.js\");\n\nvar qrDataMode_1 = __webpack_require__(/*! ../models/qrDataMode */ \"../iota-qr-core/dist/models/qrDataMode.js\");\n\nvar mathHelper_1 = __webpack_require__(/*! ./mathHelper */ \"../iota-qr-core/dist/helpers/mathHelper.js\");\n\nvar polynomial_1 = __webpack_require__(/*! ./polynomial */ \"../iota-qr-core/dist/helpers/polynomial.js\");\n/**\r\n * Helper methods for QR generation.\r\n * Based on https://github.com/kazuhikoarase/qrcode-generator/\r\n */\n\n\nvar QRHelper =\n/*#__PURE__*/\nfunction () {\n  function QRHelper() {\n    _classCallCheck(this, QRHelper);\n  }\n\n  _createClass(QRHelper, null, [{\n    key: \"getPatternPosition\",\n\n    /**\r\n     * Get the pattern position for the given type number.\r\n     * @param typeNumber The type number to get the pattern for.\r\n     * @returns The pattern for the type number.\r\n     */\n    value: function getPatternPosition(typeNumber) {\n      return QRHelper.PATTERN_POSITION_TABLE[typeNumber - 1];\n    }\n    /**\r\n     * Get the max length of the data.\r\n     * @param typeNumber The type number to get the max length for.\r\n     * @param mode The data mode to get data max length for.\r\n     * @param errorCorrectLevel The error correction to get the max length for.\r\n     * @returns The max length.\r\n     */\n\n  }, {\n    key: \"getMaxLength\",\n    value: function getMaxLength(typeNumber, mode, errorCorrectLevel) {\n      var t = typeNumber - 1;\n      var e = 0;\n      var m = 0;\n\n      switch (errorCorrectLevel) {\n        case errorCorrectLevel_1.ErrorCorrectLevel.L:\n          e = 0;\n          break;\n\n        case errorCorrectLevel_1.ErrorCorrectLevel.M:\n          e = 1;\n          break;\n\n        case errorCorrectLevel_1.ErrorCorrectLevel.Q:\n          e = 2;\n          break;\n\n        case errorCorrectLevel_1.ErrorCorrectLevel.H:\n          e = 3;\n          break;\n\n        default:\n          throw new Error(\"Unknown error correction level \".concat(errorCorrectLevel));\n      }\n\n      switch (mode) {\n        case qrDataMode_1.QRDataMode.number:\n          m = 0;\n          break;\n\n        case qrDataMode_1.QRDataMode.alphaNumeric:\n          m = 1;\n          break;\n\n        case qrDataMode_1.QRDataMode.byte8:\n          m = 2;\n          break;\n\n        default:\n          throw new Error(\"Unknown data mode \".concat(mode));\n      }\n\n      return QRHelper.MAX_LENGTH[t][e][m];\n    }\n    /**\r\n     * Get the error correction polynomial for the error correcto length.\r\n     * @param errorCorrectLength The error correction length to get the polynomial for.\r\n     * @returns The polynomial for the error correction length.\r\n     */\n\n  }, {\n    key: \"getErrorCorrectPolynomial\",\n    value: function getErrorCorrectPolynomial(errorCorrectLength) {\n      var a = new polynomial_1.Polynomial([1]);\n\n      for (var i = 0; i < errorCorrectLength; i++) {\n        a = a.multiply(new polynomial_1.Polynomial([1, mathHelper_1.MathHelper.gexp(i)]));\n      }\n\n      return a;\n    }\n    /**\r\n     * Get the mask method for the given pattern.\r\n     * @param maskPattern The pattern to get the mask for.\r\n     * @returns The mask method for the pattern.\r\n     */\n\n  }, {\n    key: \"getMaskMethod\",\n    value: function getMaskMethod(maskPattern) {\n      switch (maskPattern) {\n        case maskPattern_1.MaskPattern.PATTERN000:\n          return function (i, j) {\n            return (i + j) % 2 === 0;\n          };\n\n        case maskPattern_1.MaskPattern.PATTERN001:\n          return function (i, j) {\n            return i % 2 === 0;\n          };\n\n        case maskPattern_1.MaskPattern.PATTERN010:\n          return function (i, j) {\n            return j % 3 === 0;\n          };\n\n        case maskPattern_1.MaskPattern.PATTERN011:\n          return function (i, j) {\n            return (i + j) % 3 === 0;\n          };\n\n        case maskPattern_1.MaskPattern.PATTERN100:\n          return function (i, j) {\n            return (~~(i / 2) + ~~(j / 3)) % 2 === 0;\n          };\n\n        case maskPattern_1.MaskPattern.PATTERN101:\n          return function (i, j) {\n            return i * j % 2 + i * j % 3 === 0;\n          };\n\n        case maskPattern_1.MaskPattern.PATTERN110:\n          return function (i, j) {\n            return (i * j % 2 + i * j % 3) % 2 === 0;\n          };\n\n        case maskPattern_1.MaskPattern.PATTERN111:\n          return function (i, j) {\n            return (i * j % 3 + (i + j) % 2) % 2 === 0;\n          };\n\n        default:\n          throw new Error(\"Invalid mask \".concat(maskPattern));\n      }\n    }\n    /**\r\n     * Get the BCH type info.\r\n     * @param data The data to get the BCH type info for.\r\n     * @returns The type info.\r\n     */\n\n  }, {\n    key: \"getBCHTypeInfo\",\n    value: function getBCHTypeInfo(data) {\n      var d = data << 10;\n\n      while (QRHelper.getBCHDigit(d) - QRHelper.getBCHDigit(QRHelper.G15) >= 0) {\n        d ^= QRHelper.G15 << QRHelper.getBCHDigit(d) - QRHelper.getBCHDigit(QRHelper.G15);\n      }\n\n      return (data << 10 | d) ^ QRHelper.G15_MASK;\n    }\n    /**\r\n     * Get the BCH type number.\r\n     * @param data The data to get the BCH type number for.\r\n     * @returns The type number.\r\n     */\n\n  }, {\n    key: \"getBCHTypeNumber\",\n    value: function getBCHTypeNumber(data) {\n      var d = data << 12;\n\n      while (QRHelper.getBCHDigit(d) - QRHelper.getBCHDigit(QRHelper.G18) >= 0) {\n        d ^= QRHelper.G18 << QRHelper.getBCHDigit(d) - QRHelper.getBCHDigit(QRHelper.G18);\n      }\n\n      return data << 12 | d;\n    }\n    /* @internal */\n\n  }, {\n    key: \"getBCHDigit\",\n    value: function getBCHDigit(data) {\n      var localData = data;\n      var digit = 0;\n\n      while (localData !== 0) {\n        digit++;\n        localData >>>= 1;\n      }\n\n      return digit;\n    }\n  }]);\n\n  return QRHelper;\n}();\n/* @internal */\n\n\nQRHelper.PATTERN_POSITION_TABLE = [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]];\n/* @internal */\n\nQRHelper.MAX_LENGTH = [[[41, 25, 17, 10], [34, 20, 14, 8], [27, 16, 11, 7], [17, 10, 7, 4]], [[77, 47, 32, 20], [63, 38, 26, 16], [48, 29, 20, 12], [34, 20, 14, 8]], [[127, 77, 53, 32], [101, 61, 42, 26], [77, 47, 32, 20], [58, 35, 24, 15]], [[187, 114, 78, 48], [149, 90, 62, 38], [111, 67, 46, 28], [82, 50, 34, 21]], [[255, 154, 106, 65], [202, 122, 84, 52], [144, 87, 60, 37], [106, 64, 44, 27]], [[322, 195, 134, 82], [255, 154, 106, 65], [178, 108, 74, 45], [139, 84, 58, 36]], [[370, 224, 154, 95], [293, 178, 122, 75], [207, 125, 86, 53], [154, 93, 64, 39]], [[461, 279, 192, 118], [365, 221, 152, 93], [259, 157, 108, 66], [202, 122, 84, 52]], [[552, 335, 230, 141], [432, 262, 180, 111], [312, 189, 130, 80], [235, 143, 98, 60]], [[652, 395, 271, 167], [513, 311, 213, 131], [364, 221, 151, 93], [288, 174, 119, 74]]];\n/* @internal */\n\nQRHelper.G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;\n/* @internal */\n\nQRHelper.G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\n/* @internal */\n\nQRHelper.G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;\nexports.QRHelper = QRHelper;\n\n/***/ }),\n\n/***/ \"../iota-qr-core/dist/helpers/rsBlock.js\":\n/*!***********************************************!*\\\n  !*** ../iota-qr-core/dist/helpers/rsBlock.js ***!\n  \\***********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar errorCorrectLevel_1 = __webpack_require__(/*! ../models/errorCorrectLevel */ \"../iota-qr-core/dist/models/errorCorrectLevel.js\");\n/**\r\n * Class to represent a RS Block.\r\n * Based on https://github.com/kazuhikoarase/qrcode-generator/\r\n */\n\n\nvar RSBlock =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Create a new insstance of RSBlock.\r\n   * @param totalCount The total count for the block.\r\n   * @param dataCount The data count for the block.\r\n   */\n  function RSBlock(totalCount, dataCount) {\n    _classCallCheck(this, RSBlock);\n\n    this._totalCount = totalCount;\n    this._dataCount = dataCount;\n  }\n  /**\r\n   * Get RS Blocks for the type number and error correct level.\r\n   * @param typeNumber The type number.\r\n   * @param errorCorrectLevel The error correct level.\r\n   * @returns The RS Blocks.\r\n   */\n\n\n  _createClass(RSBlock, [{\n    key: \"getDataCount\",\n\n    /**\r\n     * Get the data count.\r\n     * @returns The data count.\r\n     */\n    value: function getDataCount() {\n      return this._dataCount;\n    }\n    /**\r\n     * Get the total count.\r\n     * @returns The total count.\r\n     */\n\n  }, {\n    key: \"getTotalCount\",\n    value: function getTotalCount() {\n      return this._totalCount;\n    }\n  }], [{\n    key: \"getRSBlocks\",\n    value: function getRSBlocks(typeNumber, errorCorrectLevel) {\n      var rsBlock = RSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\n      var length = rsBlock.length / 3;\n      var list = [];\n\n      for (var i = 0; i < length; i++) {\n        var count = rsBlock[i * 3 + 0];\n        var totalCount = rsBlock[i * 3 + 1];\n        var dataCount = rsBlock[i * 3 + 2];\n\n        for (var j = 0; j < count; j++) {\n          list.push(new RSBlock(totalCount, dataCount));\n        }\n      }\n\n      return list;\n    }\n    /* @internal */\n\n  }, {\n    key: \"getRsBlockTable\",\n    value: function getRsBlockTable(typeNumber, errorCorrectLevel) {\n      switch (errorCorrectLevel) {\n        case errorCorrectLevel_1.ErrorCorrectLevel.L:\n          return RSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n\n        case errorCorrectLevel_1.ErrorCorrectLevel.M:\n          return RSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n\n        case errorCorrectLevel_1.ErrorCorrectLevel.Q:\n          return RSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n\n        case errorCorrectLevel_1.ErrorCorrectLevel.H:\n          return RSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n\n        default:\n      }\n\n      throw new Error(\"Invalid error correct level \".concat(errorCorrectLevel));\n    }\n  }]);\n\n  return RSBlock;\n}();\n/* @internal */\n\n\nRSBlock.RS_BLOCK_TABLE = [// L\n// M\n// Q\n// H\n// 1\n[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], // 2\n[1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], // 3\n[1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], // 4\n[1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], // 5\n[1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], // 6\n[2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], // 7\n[2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], // 8\n[2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], // 9\n[2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], // 10\n[2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], // 11\n[4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], // 12\n[2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], // 13\n[4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], // 14\n[3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], // 15\n[5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12, 7, 37, 13], // 16\n[5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], // 17\n[1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], // 18\n[5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], // 19\n[3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], // 20\n[3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], // 21\n[4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], // 22\n[2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], // 23\n[4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], // 24\n[6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], // 25\n[8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], // 26\n[10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], // 27\n[8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], // 28\n[3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], // 29\n[7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], // 30\n[5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], // 31\n[13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], // 32\n[17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], // 33\n[17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], // 34\n[13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], // 35\n[12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], // 36\n[6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], // 37\n[17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], // 38\n[4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], // 39\n[20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], // 40\n[19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];\nexports.RSBlock = RSBlock;\n\n/***/ }),\n\n/***/ \"../iota-qr-core/dist/index.js\":\n/*!*************************************!*\\\n  !*** ../iota-qr-core/dist/index.js ***!\n  \\*************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Combined index of all the modules.\r\n */\n\n__export(__webpack_require__(/*! ./qr */ \"../iota-qr-core/dist/qr.js\"));\n\n__export(__webpack_require__(/*! ./models/errorCorrectLevel */ \"../iota-qr-core/dist/models/errorCorrectLevel.js\"));\n\n/***/ }),\n\n/***/ \"../iota-qr-core/dist/models/errorCorrectLevel.js\":\n/*!********************************************************!*\\\n  !*** ../iota-qr-core/dist/models/errorCorrectLevel.js ***!\n  \\********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Error correction level to use for the QR Code.\r\n * Based on https://github.com/kazuhikoarase/qrcode-generator/\r\n */\n\nvar ErrorCorrectLevel;\n\n(function (ErrorCorrectLevel) {\n  /**\r\n   * 7%\r\n   */\n  ErrorCorrectLevel[ErrorCorrectLevel[\"L\"] = 1] = \"L\";\n  /**\r\n   * 15%\r\n   */\n\n  ErrorCorrectLevel[ErrorCorrectLevel[\"M\"] = 0] = \"M\";\n  /**\r\n   * 25%\r\n   */\n\n  ErrorCorrectLevel[ErrorCorrectLevel[\"Q\"] = 3] = \"Q\";\n  /**\r\n   * 30%\r\n   */\n\n  ErrorCorrectLevel[ErrorCorrectLevel[\"H\"] = 2] = \"H\";\n})(ErrorCorrectLevel = exports.ErrorCorrectLevel || (exports.ErrorCorrectLevel = {}));\n\n/***/ }),\n\n/***/ \"../iota-qr-core/dist/models/maskPattern.js\":\n/*!**************************************************!*\\\n  !*** ../iota-qr-core/dist/models/maskPattern.js ***!\n  \\**************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Mask patterns for QR codes.\r\n * Based on https://github.com/kazuhikoarase/qrcode-generator/\r\n */\n\nvar MaskPattern;\n\n(function (MaskPattern) {\n  /**\r\n   * mask pattern 000\r\n   */\n  MaskPattern[MaskPattern[\"PATTERN000\"] = 0] = \"PATTERN000\";\n  /**\r\n   * mask pattern 001\r\n   */\n\n  MaskPattern[MaskPattern[\"PATTERN001\"] = 1] = \"PATTERN001\";\n  /**\r\n   * mask pattern 010\r\n   */\n\n  MaskPattern[MaskPattern[\"PATTERN010\"] = 2] = \"PATTERN010\";\n  /**\r\n   * mask pattern 011\r\n   */\n\n  MaskPattern[MaskPattern[\"PATTERN011\"] = 3] = \"PATTERN011\";\n  /**\r\n   * mask pattern 100\r\n   */\n\n  MaskPattern[MaskPattern[\"PATTERN100\"] = 4] = \"PATTERN100\";\n  /**\r\n   * mask pattern 101\r\n   */\n\n  MaskPattern[MaskPattern[\"PATTERN101\"] = 5] = \"PATTERN101\";\n  /**\r\n   * mask pattern 110\r\n   */\n\n  MaskPattern[MaskPattern[\"PATTERN110\"] = 6] = \"PATTERN110\";\n  /**\r\n   * mask pattern 111\r\n   */\n\n  MaskPattern[MaskPattern[\"PATTERN111\"] = 7] = \"PATTERN111\";\n})(MaskPattern = exports.MaskPattern || (exports.MaskPattern = {}));\n\n/***/ }),\n\n/***/ \"../iota-qr-core/dist/models/qrDataBase.js\":\n/*!*************************************************!*\\\n  !*** ../iota-qr-core/dist/models/qrDataBase.js ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar qrDataMode_1 = __webpack_require__(/*! ./qrDataMode */ \"../iota-qr-core/dist/models/qrDataMode.js\");\n/**\r\n * Base class for storing QR Data.\r\n * Based on https://github.com/kazuhikoarase/qrcode-generator/\r\n */\n\n\nvar QRDataBase =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Create a new instance of QRDataBase.\r\n   * @param mode The mode for the data.\r\n   * @param data The data.\r\n   */\n  function QRDataBase(mode, data) {\n    _classCallCheck(this, QRDataBase);\n\n    this._mode = mode;\n    this._data = data;\n  }\n  /**\r\n   * Get the data mode.\r\n   * @returns The data mode.\r\n   */\n\n\n  _createClass(QRDataBase, [{\n    key: \"getMode\",\n    value: function getMode() {\n      return this._mode;\n    }\n    /**\r\n     * Get the data.\r\n     * @returns The data.\r\n     */\n\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this._data;\n    }\n    /**\r\n     * Get the length in bits of the data.\r\n     * @param typeNumber The type number to get the length for.\r\n     * @returns The length in bits.\r\n     */\n\n  }, {\n    key: \"getLengthInBits\",\n    value: function getLengthInBits(typeNumber) {\n      if (typeNumber >= 1 && typeNumber < 10) {\n        switch (this._mode) {\n          case qrDataMode_1.QRDataMode.number:\n            return 10;\n\n          case qrDataMode_1.QRDataMode.alphaNumeric:\n            return 9;\n\n          case qrDataMode_1.QRDataMode.byte8:\n            return 8;\n\n          default:\n            throw new Error(\"Invalid mode \".concat(this._mode));\n        }\n      } else if (typeNumber < 27) {\n        switch (this._mode) {\n          case qrDataMode_1.QRDataMode.number:\n            return 12;\n\n          case qrDataMode_1.QRDataMode.alphaNumeric:\n            return 11;\n\n          case qrDataMode_1.QRDataMode.byte8:\n            return 16;\n\n          default:\n            throw new Error(\"Invalid mode \".concat(this._mode));\n        }\n      } else if (typeNumber < 41) {\n        switch (this._mode) {\n          case qrDataMode_1.QRDataMode.number:\n            return 14;\n\n          case qrDataMode_1.QRDataMode.alphaNumeric:\n            return 13;\n\n          case qrDataMode_1.QRDataMode.byte8:\n            return 16;\n\n          default:\n            throw new Error(\"Invalid mode \".concat(this._mode));\n        }\n      } else {\n        throw new Error(\"Invalid typeNumber \".concat(typeNumber));\n      }\n    }\n  }]);\n\n  return QRDataBase;\n}();\n\nexports.QRDataBase = QRDataBase;\n\n/***/ }),\n\n/***/ \"../iota-qr-core/dist/models/qrDataMode.js\":\n/*!*************************************************!*\\\n  !*** ../iota-qr-core/dist/models/qrDataMode.js ***!\n  \\*************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * The mode for the qr data.\r\n * Based on https://github.com/kazuhikoarase/qrcode-generator/\r\n */\n\nvar QRDataMode;\n\n(function (QRDataMode) {\n  /**\r\n   * number\r\n   */\n  QRDataMode[QRDataMode[\"number\"] = 1] = \"number\";\n  /**\r\n   * alphabet and number\r\n   */\n\n  QRDataMode[QRDataMode[\"alphaNumeric\"] = 2] = \"alphaNumeric\";\n  /**\r\n   * 8bit byte\r\n   */\n\n  QRDataMode[QRDataMode[\"byte8\"] = 4] = \"byte8\";\n})(QRDataMode = exports.QRDataMode || (exports.QRDataMode = {}));\n\n/***/ }),\n\n/***/ \"../iota-qr-core/dist/qr.js\":\n/*!**********************************!*\\\n  !*** ../iota-qr-core/dist/qr.js ***!\n  \\**********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar numberHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/numberHelper */ \"../iota-core/dist/helpers/numberHelper.js\");\n\nvar qrAlphaNumeric_1 = __webpack_require__(/*! ./data/qrAlphaNumeric */ \"../iota-qr-core/dist/data/qrAlphaNumeric.js\");\n\nvar qrByte8_1 = __webpack_require__(/*! ./data/qrByte8 */ \"../iota-qr-core/dist/data/qrByte8.js\");\n\nvar qrNumber_1 = __webpack_require__(/*! ./data/qrNumber */ \"../iota-qr-core/dist/data/qrNumber.js\");\n\nvar bitBuffer_1 = __webpack_require__(/*! ./helpers/bitBuffer */ \"../iota-qr-core/dist/helpers/bitBuffer.js\");\n\nvar mathHelper_1 = __webpack_require__(/*! ./helpers/mathHelper */ \"../iota-qr-core/dist/helpers/mathHelper.js\");\n\nvar polynomial_1 = __webpack_require__(/*! ./helpers/polynomial */ \"../iota-qr-core/dist/helpers/polynomial.js\");\n\nvar qrHelper_1 = __webpack_require__(/*! ./helpers/qrHelper */ \"../iota-qr-core/dist/helpers/qrHelper.js\");\n\nvar rsBlock_1 = __webpack_require__(/*! ./helpers/rsBlock */ \"../iota-qr-core/dist/helpers/rsBlock.js\");\n\nvar errorCorrectLevel_1 = __webpack_require__(/*! ./models/errorCorrectLevel */ \"../iota-qr-core/dist/models/errorCorrectLevel.js\");\n/**\r\n * Class to generates QR codes from data.\r\n * Based on https://github.com/kazuhikoarase/qrcode-generator/\r\n */\n\n\nvar QR =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Create a new instance of QR.\r\n   * @param typeNumber 0 to 40, 0 means autodetect\r\n   * @param errorCorrectLevel 'L','M','Q','H'\r\n   */\n  function QR() {\n    var typeNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n    var errorCorrectLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : errorCorrectLevel_1.ErrorCorrectLevel.L;\n\n    _classCallCheck(this, QR);\n\n    if (!numberHelper_1.NumberHelper.isInteger(typeNumber) || typeNumber < 0 || typeNumber > 40) {\n      throw Error(\"The typeNumber parameter should be a number >= 0 and <= 40\");\n    }\n\n    this._typeNumber = typeNumber;\n    this._errorCorrectLevel = errorCorrectLevel;\n    this._qrData = [];\n    this._moduleCount = 0;\n    this._modules = [];\n    mathHelper_1.MathHelper.initialize();\n  }\n  /**\r\n   * Add text data to the QR Code.\r\n   * @param qrData The data to add.\r\n   */\n\n\n  _createClass(QR, [{\n    key: \"addText\",\n    value: function addText(qrData) {\n      this._qrData.push(new qrByte8_1.QRByte8(qrData));\n    }\n    /**\r\n     * Add number to the QR Code.\r\n     * @param qrData The data to add.\r\n     */\n\n  }, {\n    key: \"addNumber\",\n    value: function addNumber(qrData) {\n      this._qrData.push(new qrNumber_1.QRNumber(qrData));\n    }\n    /**\r\n     * Add alpha numeric to the QR Code.\r\n     * @param qrData The data to add.\r\n     */\n\n  }, {\n    key: \"addAlphaNumeric\",\n    value: function addAlphaNumeric(qrData) {\n      this._qrData.push(new qrAlphaNumeric_1.QRAlphaNumeric(qrData));\n    }\n    /**\r\n     * Generate the display buffer.\r\n     * @param cellSize The size of the cell to generate.\r\n     * @param margin The size of the margins to generate.\r\n     * @returns Boolean buffer of pixels\r\n     */\n\n  }, {\n    key: \"generate\",\n    value: function generate() {\n      this.autoDetectTypeNumber();\n      this.makeImpl(false, this.getBestMaskPattern());\n      var pixels = [];\n\n      for (var y = 0; y < this._moduleCount; y++) {\n        for (var x = 0; x < this._moduleCount; x++) {\n          pixels[x] = pixels[x] || [];\n          pixels[x][y] = this.isDark(y, x);\n        }\n      }\n\n      return pixels;\n    }\n    /* @internal */\n\n  }, {\n    key: \"isDark\",\n    value: function isDark(row, col) {\n      if (this._modules[row][col] !== null) {\n        return this._modules[row][col];\n      } else {\n        return false;\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"getBestMaskPattern\",\n    value: function getBestMaskPattern() {\n      var minLostPoint = 0;\n      var pattern = 0;\n\n      for (var i = 0; i < 8; i++) {\n        this.makeImpl(true, i);\n        var lostPoint = this.getLostPoint();\n\n        if (i === 0 || minLostPoint > lostPoint) {\n          minLostPoint = lostPoint;\n          pattern = i;\n        }\n      }\n\n      return pattern;\n    }\n    /* @internal */\n\n  }, {\n    key: \"makeImpl\",\n    value: function makeImpl(test, maskPattern) {\n      this._moduleCount = this._typeNumber * 4 + 17;\n      this._modules = [];\n\n      for (var i = 0; i < this._moduleCount; i++) {\n        this._modules.push([]);\n\n        for (var j = 0; j < this._moduleCount; j++) {\n          this._modules[i].push(null);\n        }\n      }\n\n      this.setupPositionProbePattern(0, 0);\n      this.setupPositionProbePattern(this._moduleCount - 7, 0);\n      this.setupPositionProbePattern(0, this._moduleCount - 7);\n      this.setupPositionAdjustPattern();\n      this.setupTimingPattern();\n      this.setupTypeInfo(test, maskPattern);\n\n      if (this._typeNumber >= 7) {\n        this.setupTypeNumber(test);\n      }\n\n      var data = this.createData();\n      this.mapData(data, maskPattern);\n    }\n    /* @internal */\n\n  }, {\n    key: \"mapData\",\n    value: function mapData(data, maskPattern) {\n      var inc = -1;\n      var row = this._moduleCount - 1;\n      var bitIndex = 7;\n      var byteIndex = 0;\n      var maskFunc = qrHelper_1.QRHelper.getMaskMethod(maskPattern);\n\n      for (var col = this._moduleCount - 1; col > 0; col -= 2) {\n        if (col === 6) {\n          col -= 1;\n        }\n\n        var flag = true;\n\n        while (flag) {\n          for (var c = 0; c < 2; c++) {\n            if (this._modules[row][col - c] === null) {\n              var dark = false;\n\n              if (byteIndex < data.length) {\n                dark = (data[byteIndex] >>> bitIndex & 1) === 1;\n              }\n\n              var mask = maskFunc(row, col - c);\n\n              if (mask) {\n                dark = !dark;\n              }\n\n              this._modules[row][col - c] = dark;\n              bitIndex -= 1;\n\n              if (bitIndex === -1) {\n                byteIndex++;\n                bitIndex = 7;\n              }\n            }\n          }\n\n          row += inc;\n\n          if (row < 0 || this._moduleCount <= row) {\n            row -= inc;\n            inc = -inc;\n            flag = false;\n          }\n        }\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"setupPositionAdjustPattern\",\n    value: function setupPositionAdjustPattern() {\n      var pos = qrHelper_1.QRHelper.getPatternPosition(this._typeNumber);\n\n      for (var i = 0; i < pos.length; i++) {\n        for (var j = 0; j < pos.length; j++) {\n          var row = pos[i];\n          var col = pos[j];\n\n          if (this._modules[row][col] !== null) {\n            continue;\n          }\n\n          for (var r = -2; r <= 2; r++) {\n            for (var c = -2; c <= 2; c++) {\n              if (r === -2 || r === 2 || c === -2 || c === 2 || r === 0 && c === 0) {\n                this._modules[row + r][col + c] = true;\n              } else {\n                this._modules[row + r][col + c] = false;\n              }\n            }\n          }\n        }\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"setupPositionProbePattern\",\n    value: function setupPositionProbePattern(row, col) {\n      for (var r = -1; r <= 7; r++) {\n        for (var c = -1; c <= 7; c++) {\n          if (row + r <= -1 || this._moduleCount <= row + r || col + c <= -1 || this._moduleCount <= col + c) {\n            continue;\n          }\n\n          if (0 <= r && r <= 6 && (c === 0 || c === 6) || 0 <= c && c <= 6 && (r === 0 || r === 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n            this._modules[row + r][col + c] = true;\n          } else {\n            this._modules[row + r][col + c] = false;\n          }\n        }\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"setupTimingPattern\",\n    value: function setupTimingPattern() {\n      for (var r = 8; r < this._moduleCount - 8; r++) {\n        if (this._modules[r][6] !== null) {\n          continue;\n        }\n\n        this._modules[r][6] = r % 2 === 0;\n      }\n\n      for (var c = 8; c < this._moduleCount - 8; c++) {\n        if (this._modules[6][c] !== null) {\n          continue;\n        }\n\n        this._modules[6][c] = c % 2 === 0;\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"setupTypeNumber\",\n    value: function setupTypeNumber(test) {\n      var bits = qrHelper_1.QRHelper.getBCHTypeNumber(this._typeNumber);\n\n      for (var i = 0; i < 18; i++) {\n        this._modules[~~(i / 3)][i % 3 + this._moduleCount - 8 - 3] = !test && (bits >> i & 1) === 1;\n      }\n\n      for (var _i = 0; _i < 18; _i++) {\n        this._modules[_i % 3 + this._moduleCount - 8 - 3][~~(_i / 3)] = !test && (bits >> _i & 1) === 1;\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"setupTypeInfo\",\n    value: function setupTypeInfo(test, maskPattern) {\n      var data = this._errorCorrectLevel << 3 | maskPattern;\n      var bits = qrHelper_1.QRHelper.getBCHTypeInfo(data); // vertical\n\n      for (var i = 0; i < 15; i++) {\n        var mod = !test && (bits >> i & 1) === 1;\n\n        if (i < 6) {\n          this._modules[i][8] = mod;\n        } else if (i < 8) {\n          this._modules[i + 1][8] = mod;\n        } else {\n          this._modules[this._moduleCount - 15 + i][8] = mod;\n        }\n      } // horizontal\n\n\n      for (var _i2 = 0; _i2 < 15; _i2++) {\n        var _mod = !test && (bits >> _i2 & 1) === 1;\n\n        if (_i2 < 8) {\n          this._modules[8][this._moduleCount - _i2 - 1] = _mod;\n        } else if (_i2 < 9) {\n          this._modules[8][15 - _i2 - 1 + 1] = _mod;\n        } else {\n          this._modules[8][15 - _i2 - 1] = _mod;\n        }\n      } // fixed\n\n\n      this._modules[this._moduleCount - 8][8] = !test;\n    }\n    /* @internal */\n\n  }, {\n    key: \"getLostPoint\",\n    value: function getLostPoint() {\n      var moduleCount = this._moduleCount;\n      var lostPoint = 0; // LEVEL1\n\n      for (var row = 0; row < moduleCount; row++) {\n        for (var col = 0; col < moduleCount; col++) {\n          var sameCount = 0;\n          var dark = this.isDark(row, col);\n\n          for (var r = -1; r <= 1; r++) {\n            if (row + r < 0 || moduleCount <= row + r) {\n              continue;\n            }\n\n            for (var c = -1; c <= 1; c++) {\n              if (col + c < 0 || moduleCount <= col + c) {\n                continue;\n              }\n\n              if (r === 0 && c === 0) {\n                continue;\n              }\n\n              if (dark === this.isDark(row + r, col + c)) {\n                sameCount++;\n              }\n            }\n          }\n\n          if (sameCount > 5) {\n            lostPoint += 3 + sameCount - 5;\n          }\n        }\n      } // LEVEL2\n\n\n      for (var _row = 0; _row < moduleCount - 1; _row++) {\n        for (var _col = 0; _col < moduleCount - 1; _col++) {\n          var count = 0;\n\n          if (this.isDark(_row, _col)) {\n            count++;\n          }\n\n          if (this.isDark(_row + 1, _col)) {\n            count++;\n          }\n\n          if (this.isDark(_row, _col + 1)) {\n            count++;\n          }\n\n          if (this.isDark(_row + 1, _col + 1)) {\n            count++;\n          }\n\n          if (count === 0 || count === 4) {\n            lostPoint += 3;\n          }\n        }\n      } // LEVEL3\n\n\n      for (var _row2 = 0; _row2 < moduleCount; _row2++) {\n        for (var _col2 = 0; _col2 < moduleCount - 6; _col2++) {\n          if (this.isDark(_row2, _col2) && !this.isDark(_row2, _col2 + 1) && this.isDark(_row2, _col2 + 2) && this.isDark(_row2, _col2 + 3) && this.isDark(_row2, _col2 + 4) && !this.isDark(_row2, _col2 + 5) && this.isDark(_row2, _col2 + 6)) {\n            lostPoint += 40;\n          }\n        }\n      }\n\n      for (var _col3 = 0; _col3 < moduleCount; _col3++) {\n        for (var _row3 = 0; _row3 < moduleCount - 6; _row3++) {\n          if (this.isDark(_row3, _col3) && !this.isDark(_row3 + 1, _col3) && this.isDark(_row3 + 2, _col3) && this.isDark(_row3 + 3, _col3) && this.isDark(_row3 + 4, _col3) && !this.isDark(_row3 + 5, _col3) && this.isDark(_row3 + 6, _col3)) {\n            lostPoint += 40;\n          }\n        }\n      } // LEVEL4\n\n\n      var darkCount = 0;\n\n      for (var _col4 = 0; _col4 < moduleCount; _col4++) {\n        for (var _row4 = 0; _row4 < moduleCount; _row4++) {\n          if (this.isDark(_row4, _col4)) {\n            darkCount++;\n          }\n        }\n      }\n\n      var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n      lostPoint += ratio * 10;\n      return lostPoint;\n    }\n    /* @internal */\n\n  }, {\n    key: \"createData\",\n    value: function createData() {\n      var rsBlocks = rsBlock_1.RSBlock.getRSBlocks(this._typeNumber, this._errorCorrectLevel);\n      var buffer = new bitBuffer_1.BitBuffer();\n\n      for (var i = 0; i < this._qrData.length; i++) {\n        var data = this._qrData[i];\n        buffer.put(data.getMode(), 4);\n        buffer.put(data.getLength(), data.getLengthInBits(this._typeNumber));\n        data.write(buffer);\n      } // calc max data count\n\n\n      var totalDataCount = 0;\n\n      for (var _i3 = 0; _i3 < rsBlocks.length; _i3++) {\n        totalDataCount += rsBlocks[_i3].getDataCount();\n      }\n\n      if (buffer.getLengthInBits() > totalDataCount * 8) {\n        throw new Error(\"There is not enough space in the QR code to store the data, \".concat(buffer.getLengthInBits(), \" > \").concat(totalDataCount * 8, \", try increasing the typeNumber from \").concat(this._typeNumber));\n      } // end\n\n\n      if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n        buffer.put(0, 4);\n      } // padding\n\n\n      while (buffer.getLengthInBits() % 8 !== 0) {\n        buffer.putBit(false);\n      } // padding\n\n\n      var flag = true;\n\n      while (flag) {\n        if (buffer.getLengthInBits() >= totalDataCount * 8) {\n          break;\n        }\n\n        buffer.put(QR.PAD0, 8);\n\n        if (buffer.getLengthInBits() >= totalDataCount * 8) {\n          flag = false;\n        } else {\n          buffer.put(QR.PAD1, 8);\n        }\n      }\n\n      return this.createBytes(buffer, rsBlocks);\n    }\n    /* @internal */\n\n  }, {\n    key: \"createBytes\",\n    value: function createBytes(buffer, rsBlocks) {\n      var offset = 0;\n      var maxDcCount = 0;\n      var maxEcCount = 0;\n      var dcdata = [];\n      var ecdata = [];\n\n      for (var r = 0; r < rsBlocks.length; r++) {\n        dcdata.push([]);\n        ecdata.push([]);\n      }\n\n      function createNumArray(len) {\n        var a = [];\n\n        for (var i = 0; i < len; i++) {\n          a.push(0);\n        }\n\n        return a;\n      } // tslint:disable:no-console\n\n\n      for (var _r = 0; _r < rsBlocks.length; _r++) {\n        var dcCount = rsBlocks[_r].getDataCount();\n\n        var ecCount = rsBlocks[_r].getTotalCount() - dcCount;\n        maxDcCount = Math.max(maxDcCount, dcCount);\n        maxEcCount = Math.max(maxEcCount, ecCount);\n        dcdata[_r] = createNumArray(dcCount);\n\n        for (var i = 0; i < dcdata[_r].length; i++) {\n          dcdata[_r][i] = 0xFF & buffer.getBuffer()[i + offset];\n        }\n\n        offset += dcCount;\n        var rsPoly = qrHelper_1.QRHelper.getErrorCorrectPolynomial(ecCount);\n        var rawPoly = new polynomial_1.Polynomial(dcdata[_r], rsPoly.getLength() - 1);\n        var modPoly = rawPoly.mod(rsPoly);\n        ecdata[_r] = createNumArray(rsPoly.getLength() - 1);\n\n        for (var _i4 = 0; _i4 < ecdata[_r].length; _i4++) {\n          var modIndex = _i4 + modPoly.getLength() - ecdata[_r].length;\n\n          ecdata[_r][_i4] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;\n        }\n      }\n\n      var totalCodeCount = 0;\n\n      for (var _i5 = 0; _i5 < rsBlocks.length; _i5++) {\n        totalCodeCount += rsBlocks[_i5].getTotalCount();\n      }\n\n      var data = createNumArray(totalCodeCount);\n      var index = 0;\n\n      for (var _i6 = 0; _i6 < maxDcCount; _i6++) {\n        for (var _r2 = 0; _r2 < rsBlocks.length; _r2++) {\n          if (_i6 < dcdata[_r2].length) {\n            data[index] = dcdata[_r2][_i6];\n            index++;\n          }\n        }\n      }\n\n      for (var _i7 = 0; _i7 < maxEcCount; _i7++) {\n        for (var _r3 = 0; _r3 < rsBlocks.length; _r3++) {\n          if (_i7 < ecdata[_r3].length) {\n            data[index] = ecdata[_r3][_i7];\n            index++;\n          }\n        }\n      }\n\n      return data;\n    }\n    /* @internal */\n\n  }, {\n    key: \"autoDetectTypeNumber\",\n    value: function autoDetectTypeNumber() {\n      if (this._typeNumber === 0) {\n        for (var typeNumber = 1; typeNumber <= 40; typeNumber++) {\n          var rsBlocks = rsBlock_1.RSBlock.getRSBlocks(typeNumber, this._errorCorrectLevel);\n          var buffer = new bitBuffer_1.BitBuffer();\n\n          for (var i = 0; i < this._qrData.length; i++) {\n            var data = this._qrData[i];\n            buffer.put(data.getMode(), 4);\n            buffer.put(data.getLength(), data.getLengthInBits(typeNumber));\n            data.write(buffer);\n          }\n\n          var totalDataCount = 0;\n\n          for (var _i8 = 0; _i8 < rsBlocks.length; _i8++) {\n            totalDataCount += rsBlocks[_i8].getDataCount();\n          }\n\n          if (buffer.getLengthInBits() <= totalDataCount * 8) {\n            this._typeNumber = typeNumber;\n            break;\n          } else if (typeNumber === 40) {\n            throw new Error(\"There is not enough space in the QR code to store the data, \".concat(buffer.getLengthInBits(), \" > \").concat(totalDataCount * 8, \", typeNumber can not be > 40\"));\n          }\n        }\n      }\n    }\n  }]);\n\n  return QR;\n}();\n/* @internal */\n\n\nQR.PAD0 = 0xEC;\n/* @internal */\n\nQR.PAD1 = 0x11;\nexports.QR = QR;\n\n/***/ }),\n\n/***/ \"../iota-qr-data/dist/data/addressQR.js\":\n/*!**********************************************!*\\\n  !*** ../iota-qr-data/dist/data/addressQR.js ***!\n  \\**********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ \"../iota-qr-data/node_modules/@babel/runtime/regenerator/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar objectHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/objectHelper */ \"../iota-core/dist/helpers/objectHelper.js\");\n\nvar trytesHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/trytesHelper */ \"../iota-core/dist/helpers/trytesHelper.js\");\n\nvar qr_1 = __webpack_require__(/*! @tangle-frost/iota-qr-core/dist/qr */ \"../iota-qr-core/dist/qr.js\");\n\nvar qrRendererFactory_1 = __webpack_require__(/*! @tangle-frost/iota-qr-render/dist/factories/qrRendererFactory */ \"../iota-qr-render/dist/factories/qrRendererFactory.js\");\n/**\r\n * Class to helper render addresses as QR.\r\n */\n\n\nvar AddressQR =\n/*#__PURE__*/\nfunction () {\n  function AddressQR() {\n    _classCallCheck(this, AddressQR);\n  }\n\n  _createClass(AddressQR, null, [{\n    key: \"renderRaw\",\n\n    /**\r\n     * Convert address data into a QR code raw data.\r\n     * @param address The address to convert.\r\n     * @param rendererType The type of render to use.\r\n     * @param cellSize The size in pixels of each cell.\r\n     * @param marginSize The margin size in pixels to leave around the qr code.\r\n     * @param rendererOptions Any options you want to pass to the renderer.\r\n     * @returns The render of the QR code in the requested format.\r\n     */\n    value: function () {\n      var _renderRaw = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(address, rendererType, cellSize, marginSize, rendererOptions) {\n        var renderer, qr, qrCellData;\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (trytesHelper_1.TrytesHelper.isTrytes(address)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error(\"The address does not appear to be in valid trytes format\");\n\n              case 2:\n                if (!(address.length !== 90)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error(\"The address must be 90 trytes long and include the checksum, it is \".concat(address.length));\n\n              case 4:\n                renderer = qrRendererFactory_1.QRRendererFactory.instance().create(rendererType, rendererOptions);\n\n                if (!objectHelper_1.ObjectHelper.isEmpty(renderer)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error(\"The QR Renderer '\".concat(rendererType, \" is not available\"));\n\n              case 7:\n                qr = new qr_1.QR(5);\n                qr.addText(address);\n                qrCellData = qr.generate();\n                return _context.abrupt(\"return\", renderer.renderRaw(qrCellData, cellSize, marginSize));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function renderRaw(_x, _x2, _x3, _x4, _x5) {\n        return _renderRaw.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Convert address data into a QR code html element.\r\n     * @param address The address to convert.\r\n     * @param rendererType The type of render to use.\r\n     * @param cellSize The size in pixels of each cell.\r\n     * @param marginSize The margin size in pixels to leave around the qr code.\r\n     * @param rendererOptions Any options you want to pass to the renderer.\r\n     * @returns The render of the QR code in the requested format.\r\n     */\n\n  }, {\n    key: \"renderHtml\",\n    value: function () {\n      var _renderHtml = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2(address, rendererType, cellSize, marginSize, rendererOptions) {\n        var renderer, qr, qrCellData;\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (trytesHelper_1.TrytesHelper.isTrytes(address)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"The address does not appear to be in valid trytes format\");\n\n              case 2:\n                if (!(address.length !== 90)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new Error(\"The address must be 90 trytes long and include the checksum, it is \".concat(address.length));\n\n              case 4:\n                renderer = qrRendererFactory_1.QRRendererFactory.instance().create(rendererType, rendererOptions);\n\n                if (!objectHelper_1.ObjectHelper.isEmpty(renderer)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw new Error(\"The QR Renderer '\".concat(rendererType, \" is not available\"));\n\n              case 7:\n                qr = new qr_1.QR(5);\n                qr.addText(address);\n                qrCellData = qr.generate();\n                return _context2.abrupt(\"return\", renderer.renderHtml(qrCellData, cellSize, marginSize));\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function renderHtml(_x6, _x7, _x8, _x9, _x10) {\n        return _renderHtml.apply(this, arguments);\n      };\n    }()\n  }]);\n\n  return AddressQR;\n}();\n\nexports.AddressQR = AddressQR;\n\n/***/ }),\n\n/***/ \"../iota-qr-data/dist/data/trinityPaymentQR.js\":\n/*!*****************************************************!*\\\n  !*** ../iota-qr-data/dist/data/trinityPaymentQR.js ***!\n  \\*****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ \"../iota-qr-data/node_modules/@babel/runtime/regenerator/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar numberHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/numberHelper */ \"../iota-core/dist/helpers/numberHelper.js\");\n\nvar objectHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/objectHelper */ \"../iota-core/dist/helpers/objectHelper.js\");\n\nvar stringHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/stringHelper */ \"../iota-core/dist/helpers/stringHelper.js\");\n\nvar trytesHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/trytesHelper */ \"../iota-core/dist/helpers/trytesHelper.js\");\n\nvar qr_1 = __webpack_require__(/*! @tangle-frost/iota-qr-core/dist/qr */ \"../iota-qr-core/dist/qr.js\");\n\nvar qrRendererFactory_1 = __webpack_require__(/*! @tangle-frost/iota-qr-render/dist/factories/qrRendererFactory */ \"../iota-qr-render/dist/factories/qrRendererFactory.js\");\n/**\r\n * Class to helper render data for trinity as QR.\r\n */\n\n\nvar TrinityPaymentQR =\n/*#__PURE__*/\nfunction () {\n  function TrinityPaymentQR() {\n    _classCallCheck(this, TrinityPaymentQR);\n  }\n\n  _createClass(TrinityPaymentQR, null, [{\n    key: \"generatePaymentData\",\n\n    /**\r\n     * Create the QR code data for trinity payment data.\r\n     * @param address The address trytes.\r\n     * @param amountIota The amount for the transaction.\r\n     * @param tagTrytes The tag for the transaction in trytes.\r\n     * @param message The message for the transaction in plain text.\r\n     * @returns The data for the trinity payment.\r\n     */\n    value: function generatePaymentData(address, amountIota, tagTrytes, message) {\n      if (!trytesHelper_1.TrytesHelper.isTrytes(address)) {\n        throw new Error(\"The address does not appear to be in valid trytes format\");\n      }\n\n      if (address.length !== 90) {\n        throw new Error(\"The address must be 90 trytes long and include the checksum, it is \".concat(address.length));\n      }\n\n      if (!objectHelper_1.ObjectHelper.isEmpty(amountIota)) {\n        if (!numberHelper_1.NumberHelper.isInteger(amountIota)) {\n          throw new Error(\"The amount must be an integer\");\n        }\n      }\n\n      if (!stringHelper_1.StringHelper.isEmpty(tagTrytes)) {\n        if (!trytesHelper_1.TrytesHelper.isTrytes(tagTrytes)) {\n          throw new Error(\"The tag does not appear to be in valid trytes format\");\n        }\n\n        if (tagTrytes.length > 27) {\n          throw new Error(\"The tag is too long, it should be at most 27 trytes, it is \".concat(tagTrytes.length));\n        }\n      }\n\n      var messageAscii;\n\n      if (!stringHelper_1.StringHelper.isEmpty(message)) {\n        messageAscii = stringHelper_1.StringHelper.encodeNonASCII(message);\n      }\n\n      return {\n        address: address,\n        amount: amountIota,\n        message: messageAscii,\n        tag: tagTrytes\n      };\n    }\n    /**\r\n     * Convert trinity payment data into a QR code raw data.\r\n     * @param paymentData The payment data to convert.\r\n     * @param rendererType The type of render to use.\r\n     * @param qrTypeNumber The type number for qr code, controls the amount of data the QR can store.\r\n     * @param cellSize The size in pixels of each cell.\r\n     * @param marginSize The margin size in pixels to leave around the qr code.\r\n     * @param rendererOptions Any options you want to pass to the renderer.\r\n     * @returns The render of the QR code in the requested format.\r\n     */\n\n  }, {\n    key: \"renderRaw\",\n    value: function () {\n      var _renderRaw = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(paymentData, rendererType) {\n        var qrTypeNumber,\n            cellSize,\n            marginSize,\n            rendererOptions,\n            renderer,\n            qr,\n            qrCellData,\n            _args = arguments;\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                qrTypeNumber = _args.length > 2 && _args[2] !== undefined ? _args[2] : 16;\n                cellSize = _args.length > 3 ? _args[3] : undefined;\n                marginSize = _args.length > 4 ? _args[4] : undefined;\n                rendererOptions = _args.length > 5 ? _args[5] : undefined;\n                renderer = qrRendererFactory_1.QRRendererFactory.instance().create(rendererType, rendererOptions);\n\n                if (!objectHelper_1.ObjectHelper.isEmpty(renderer)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error(\"The QR Renderer '\".concat(rendererType, \" is not available\"));\n\n              case 7:\n                qr = new qr_1.QR(qrTypeNumber);\n                qr.addText(JSON.stringify(paymentData));\n                qrCellData = qr.generate();\n                return _context.abrupt(\"return\", renderer.renderRaw(qrCellData, cellSize, marginSize));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function renderRaw(_x, _x2) {\n        return _renderRaw.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Convert trinity payment data into a QR code html element.\r\n     * @param paymentData The payment data to convert.\r\n     * @param rendererType The type of render to use.\r\n     * @param qrTypeNumber The type number for qr code, controls the amount of data the QR can store.\r\n     * @param cellSize The size in pixels of each cell.\r\n     * @param marginSize The margin size in pixels to leave around the qr code.\r\n     * @param rendererOptions Any options you want to pass to the renderer.\r\n     * @returns The render of the QR code in the requested format.\r\n     */\n\n  }, {\n    key: \"renderHtml\",\n    value: function () {\n      var _renderHtml = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2(paymentData, rendererType) {\n        var qrTypeNumber,\n            cellSize,\n            marginSize,\n            rendererOptions,\n            renderer,\n            qr,\n            qrCellData,\n            _args2 = arguments;\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                qrTypeNumber = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : 16;\n                cellSize = _args2.length > 3 ? _args2[3] : undefined;\n                marginSize = _args2.length > 4 ? _args2[4] : undefined;\n                rendererOptions = _args2.length > 5 ? _args2[5] : undefined;\n                renderer = qrRendererFactory_1.QRRendererFactory.instance().create(rendererType, rendererOptions);\n\n                if (!objectHelper_1.ObjectHelper.isEmpty(renderer)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw new Error(\"The QR Renderer '\".concat(rendererType, \" is not available\"));\n\n              case 7:\n                qr = new qr_1.QR(qrTypeNumber);\n                qr.addText(JSON.stringify(paymentData));\n                qrCellData = qr.generate();\n                return _context2.abrupt(\"return\", renderer.renderHtml(qrCellData, cellSize, marginSize));\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function renderHtml(_x3, _x4) {\n        return _renderHtml.apply(this, arguments);\n      };\n    }()\n  }]);\n\n  return TrinityPaymentQR;\n}();\n\nexports.TrinityPaymentQR = TrinityPaymentQR;\n\n/***/ }),\n\n/***/ \"../iota-qr-data/dist/index.js\":\n/*!*************************************!*\\\n  !*** ../iota-qr-data/dist/index.js ***!\n  \\*************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Combined index of all the modules.\r\n */\n\n__export(__webpack_require__(/*! ./data/addressQR */ \"../iota-qr-data/dist/data/addressQR.js\"));\n\n__export(__webpack_require__(/*! ./data/trinityPaymentQR */ \"../iota-qr-data/dist/data/trinityPaymentQR.js\"));\n\n/***/ }),\n\n/***/ \"../iota-qr-data/node_modules/@babel/runtime/regenerator/index.js\":\n/*!************************************************************************!*\\\n  !*** ../iota-qr-data/node_modules/@babel/runtime/regenerator/index.js ***!\n  \\************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(/*! regenerator-runtime */ \"../iota-qr-data/node_modules/regenerator-runtime/runtime-module.js\");\n\n\n/***/ }),\n\n/***/ \"../iota-qr-data/node_modules/regenerator-runtime/runtime-module.js\":\n/*!**************************************************************************!*\\\n  !*** ../iota-qr-data/node_modules/regenerator-runtime/runtime-module.js ***!\n  \\**************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(/*! ./runtime */ \"../iota-qr-data/node_modules/regenerator-runtime/runtime.js\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n/***/ }),\n\n/***/ \"../iota-qr-data/node_modules/regenerator-runtime/runtime.js\":\n/*!*******************************************************************!*\\\n  !*** ../iota-qr-data/node_modules/regenerator-runtime/runtime.js ***!\n  \\*******************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n\n\n/***/ }),\n\n/***/ \"../iota-qr-render/dist/factories/qrRendererFactory.js\":\n/*!*************************************************************!*\\\n  !*** ../iota-qr-render/dist/factories/qrRendererFactory.js ***!\n  \\*************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar factoryBase_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/factories/factoryBase */ \"../iota-core/dist/factories/factoryBase.js\");\n/**\r\n * Factory to generate QR renderers.\r\n */\n\n\nvar QRRendererFactory =\n/*#__PURE__*/\nfunction (_factoryBase_1$Factor) {\n  _inherits(QRRendererFactory, _factoryBase_1$Factor);\n\n  /**\r\n   * Don't allow manual construction of the factory.\r\n   * @internal\r\n   */\n  function QRRendererFactory() {\n    _classCallCheck(this, QRRendererFactory);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(QRRendererFactory).call(this));\n  }\n  /**\r\n   * Get the instance of the factory.\r\n   * @returns The factory instance.\r\n   */\n\n\n  _createClass(QRRendererFactory, [{\n    key: \"getInstance\",\n\n    /* @internal */\n    value: function getInstance() {\n      return QRRendererFactory.instance();\n    }\n  }], [{\n    key: \"instance\",\n    value: function instance() {\n      if (!QRRendererFactory._instance) {\n        QRRendererFactory._instance = new QRRendererFactory();\n      }\n\n      return QRRendererFactory._instance;\n    }\n  }]);\n\n  return QRRendererFactory;\n}(factoryBase_1.FactoryBase);\n\nexports.QRRendererFactory = QRRendererFactory;\n\n/***/ }),\n\n/***/ \"../iota-qr-render/dist/helpers/imageHelper.js\":\n/*!*****************************************************!*\\\n  !*** ../iota-qr-render/dist/helpers/imageHelper.js ***!\n  \\*****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar objectHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/objectHelper */ \"../iota-core/dist/helpers/objectHelper.js\");\n\nvar stringHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/stringHelper */ \"../iota-core/dist/helpers/stringHelper.js\");\n/**\r\n * Class to help with manipulating image data.\r\n */\n\n\nvar ImageHelper =\n/*#__PURE__*/\nfunction () {\n  function ImageHelper() {\n    _classCallCheck(this, ImageHelper);\n  }\n\n  _createClass(ImageHelper, null, [{\n    key: \"dataToImageSource\",\n\n    /**\r\n     * Convert the data to an image source.\r\n     * @param mimeType The mime type of the data.\r\n     * @param data The source data.\r\n     * @returns The image source.\r\n     */\n    value: function dataToImageSource(mimeType, data) {\n      if (stringHelper_1.StringHelper.isEmpty(mimeType)) {\n        throw new Error(\"You must provider a mimeType\");\n      }\n\n      var imageSource;\n\n      if (objectHelper_1.ObjectHelper.isType(data, Uint8Array)) {\n        var binary = \"\";\n        var len = data.length;\n\n        for (var i = 0; i < len; i++) {\n          binary += String.fromCharCode(data[i]);\n        }\n\n        var base64Data = btoa(binary);\n        imageSource = \"data:\".concat(mimeType, \";base64,\").concat(base64Data);\n      } else if (stringHelper_1.StringHelper.isString(data)) {\n        var _base64Data = btoa(data);\n\n        imageSource = \"data:\".concat(mimeType, \";base64,\").concat(_base64Data);\n      } else {\n        throw new Error(\"The data must be a Uint8Array or string\");\n      }\n\n      return imageSource;\n    }\n  }]);\n\n  return ImageHelper;\n}();\n\nexports.ImageHelper = ImageHelper;\n\n/***/ }),\n\n/***/ \"../iota-qr-render/dist/images/jpegEncoder.js\":\n/*!****************************************************!*\\\n  !*** ../iota-qr-render/dist/images/jpegEncoder.js ***!\n  \\****************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * JPEG Encoder.\r\n * Based on JPEG encoder ported to JavaScript and optimized by Andreas Ritter, www.bytestrom.eu, 11/2009\r\n */\n\nvar JpegEncoder =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Create a new instance of JpegEncoder.\r\n   */\n  function JpegEncoder() {\n    _classCallCheck(this, JpegEncoder);\n\n    this._yTable = new Array(64);\n    this._uvTable = new Array(64);\n    this._fdtblY = new Array(64);\n    this._fdtblUV = new Array(64);\n    this._bitCode = new Array(65535);\n    this._category = new Array(65535);\n    this._outputfDCTQuant = new Array(64);\n    this._du = new Array(64);\n    this._byteOut = [];\n    this._byteNew = 0;\n    this._bytePos = 7;\n    this._ydu = new Array(64);\n    this._udu = new Array(64);\n    this._vdu = new Array(64);\n    this._rgbYuvTable = new Array(2048);\n    this.initHuffmanTbl();\n    this.initCategoryNumber();\n    this.initRGBYUVTable();\n  }\n  /**\r\n   * Encode the image with the given quality.\r\n   * @param width The width of the image to encode.\r\n   * @param height The height of the image to encode.\r\n   * @param imageData The data for the image.\r\n   * @param quality The quality to encode the image at.\r\n   * @returns The data for the encoded image.\r\n   */\n\n\n  _createClass(JpegEncoder, [{\n    key: \"encode\",\n    value: function encode(width, height, imageData, quality) {\n      this.setQuality(quality); // Initialize bit writer\n\n      this._byteOut = new Array();\n      this._byteNew = 0;\n      this._bytePos = 7; // Add JPEG headers\n\n      this.writeWord(0xFFD8); // SOI\n\n      this.writeAPP0();\n      this.writeDQT();\n      this.writeSOF0(width, height);\n      this.writeDHT();\n      this.writeSOS(); // Encode 8x8 macroblocks\n\n      var DCY = 0;\n      var DCU = 0;\n      var DCV = 0;\n      this._byteNew = 0;\n      this._bytePos = 7;\n      var quadWidth = width * 4;\n      var x;\n      var y = 0;\n      var r;\n      var g;\n      var b;\n      var start;\n      var p;\n      var col;\n      var row;\n      var pos;\n\n      while (y < height) {\n        x = 0;\n\n        while (x < quadWidth) {\n          start = quadWidth * y + x;\n          p = start;\n          col = -1;\n          row = 0;\n\n          for (pos = 0; pos < 64; pos++) {\n            row = pos >> 3; // /8\n\n            col = (pos & 7) * 4; // %8\n\n            p = start + row * quadWidth + col;\n\n            if (y + row >= height) {\n              // padding bottom\n              p -= quadWidth * (y + 1 + row - height);\n            }\n\n            if (x + col >= quadWidth) {\n              // padding right\n              p -= x + col - quadWidth + 4;\n            }\n\n            r = imageData[p++];\n            g = imageData[p++];\n            b = imageData[p++];\n            /* // calculate YUV values dynamically\r\n            YDU[pos]=((( 0.29900)*r+( 0.58700)*g+( 0.11400)*b))-128; //-0x80\r\n            UDU[pos]=(((-0.16874)*r+(-0.33126)*g+( 0.50000)*b));\r\n            VDU[pos]=((( 0.50000)*r+(-0.41869)*g+(-0.08131)*b));\r\n            */\n            // use lookup table (slightly faster)\n\n            this._ydu[pos] = (this._rgbYuvTable[r] + this._rgbYuvTable[g + 256 >> 0] + this._rgbYuvTable[b + 512 >> 0] >> 16) - 128;\n            this._udu[pos] = (this._rgbYuvTable[r + 768 >> 0] + this._rgbYuvTable[g + 1024 >> 0] + this._rgbYuvTable[b + 1280 >> 0] >> 16) - 128;\n            this._vdu[pos] = (this._rgbYuvTable[r + 1280 >> 0] + this._rgbYuvTable[g + 1536 >> 0] + this._rgbYuvTable[b + 1792 >> 0] >> 16) - 128;\n          }\n\n          DCY = this.processDU(this._ydu, this._fdtblY, DCY, this._ydcHashTable, this._yacHashTable);\n          DCU = this.processDU(this._udu, this._fdtblUV, DCU, this._uvdcHashTable, this._uvacHashTable);\n          DCV = this.processDU(this._vdu, this._fdtblUV, DCV, this._uvdcHashTable, this._uvacHashTable);\n          x += 32;\n        }\n\n        y += 8;\n      } // Do the bit alignment of the EOI marker\n\n\n      if (this._bytePos >= 0) {\n        var fillbits = [];\n        fillbits[1] = this._bytePos + 1;\n        fillbits[0] = (1 << this._bytePos + 1) - 1;\n        this.writeBits(fillbits);\n      }\n\n      this.writeWord(0xFFD9); //EOI\n\n      return new Uint8Array(this._byteOut);\n    }\n    /* @internal */\n\n  }, {\n    key: \"setQuality\",\n    value: function setQuality(quality) {\n      if (quality <= 0 || quality > 100) {\n        throw new Error(\"Quality must be between 1 and 100, it is \".concat(quality));\n      }\n\n      var sf = 0;\n\n      if (quality < 50) {\n        sf = Math.floor(5000 / quality);\n      } else {\n        sf = Math.floor(200 - quality * 2);\n      }\n\n      this.initQuantTables(sf);\n    }\n    /* @internal */\n\n  }, {\n    key: \"initQuantTables\",\n    value: function initQuantTables(sf) {\n      var YQT = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99];\n\n      for (var i = 0; i < 64; i++) {\n        var t = Math.floor((YQT[i] * sf + 50) / 100);\n\n        if (t < 1) {\n          t = 1;\n        } else if (t > 255) {\n          t = 255;\n        }\n\n        this._yTable[JpegEncoder.SIG_ZAG[i]] = t;\n      }\n\n      var UVQT = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99];\n\n      for (var j = 0; j < 64; j++) {\n        var u = Math.floor((UVQT[j] * sf + 50) / 100);\n\n        if (u < 1) {\n          u = 1;\n        } else if (u > 255) {\n          u = 255;\n        }\n\n        this._uvTable[JpegEncoder.SIG_ZAG[j]] = u;\n      }\n\n      var aasf = [1, 1.387039845, 1.306562965, 1.175875602, 1, 0.785694958, 0.5411961, 0.275899379];\n      var k = 0;\n\n      for (var row = 0; row < 8; row++) {\n        for (var col = 0; col < 8; col++) {\n          this._fdtblY[k] = 1 / (this._yTable[JpegEncoder.SIG_ZAG[k]] * aasf[row] * aasf[col] * 8);\n          this._fdtblUV[k] = 1 / (this._uvTable[JpegEncoder.SIG_ZAG[k]] * aasf[row] * aasf[col] * 8);\n          k++;\n        }\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"computeHuffmanTbl\",\n    value: function computeHuffmanTbl(nrcodes, stdTable) {\n      var codevalue = 0;\n      var posInTable = 0;\n      var HT = new Array();\n\n      for (var k = 1; k <= 16; k++) {\n        for (var j = 1; j <= nrcodes[k]; j++) {\n          HT[stdTable[posInTable]] = [];\n          HT[stdTable[posInTable]][0] = codevalue;\n          HT[stdTable[posInTable]][1] = k;\n          posInTable++;\n          codevalue++;\n        }\n\n        codevalue *= 2;\n      }\n\n      return HT;\n    }\n    /* @internal */\n\n  }, {\n    key: \"initHuffmanTbl\",\n    value: function initHuffmanTbl() {\n      this._ydcHashTable = this.computeHuffmanTbl(JpegEncoder.STD_DC_LUMINANCE_NRCODES, JpegEncoder.STD_DC_LUMINANCE_VALUES);\n      this._uvdcHashTable = this.computeHuffmanTbl(JpegEncoder.STD_DC_CHROMINANCE_NRCODES, JpegEncoder.STD_DC_CHROMINANCE_VALUES);\n      this._yacHashTable = this.computeHuffmanTbl(JpegEncoder.STD_AC_LUMINANCE_NRCODES, JpegEncoder.STD_AC_LUMINANCE_VALUES);\n      this._uvacHashTable = this.computeHuffmanTbl(JpegEncoder.STD_AC_CHROMINANCE_NRCODES, JpegEncoder.STD_AC_CHROMINANCE_VALUES);\n    }\n    /* @internal */\n\n  }, {\n    key: \"initCategoryNumber\",\n    value: function initCategoryNumber() {\n      var nrlower = 1;\n      var nrupper = 2;\n\n      for (var cat = 1; cat <= 15; cat++) {\n        //Positive numbers\n        for (var nr = nrlower; nr < nrupper; nr++) {\n          this._category[32767 + nr] = cat;\n          this._bitCode[32767 + nr] = [];\n          this._bitCode[32767 + nr][1] = cat;\n          this._bitCode[32767 + nr][0] = nr;\n        } //Negative numbers\n\n\n        for (var nrneg = -(nrupper - 1); nrneg <= -nrlower; nrneg++) {\n          this._category[32767 + nrneg] = cat;\n          this._bitCode[32767 + nrneg] = [];\n          this._bitCode[32767 + nrneg][1] = cat;\n          this._bitCode[32767 + nrneg][0] = nrupper - 1 + nrneg;\n        }\n\n        nrlower <<= 1;\n        nrupper <<= 1;\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"initRGBYUVTable\",\n    value: function initRGBYUVTable() {\n      for (var i = 0; i < 256; i++) {\n        this._rgbYuvTable[i] = 19595 * i;\n        this._rgbYuvTable[i + 256 >> 0] = 38470 * i;\n        this._rgbYuvTable[i + 512 >> 0] = 7471 * i + 0x8000;\n        this._rgbYuvTable[i + 768 >> 0] = -11059 * i;\n        this._rgbYuvTable[i + 1024 >> 0] = -21709 * i;\n        this._rgbYuvTable[i + 1280 >> 0] = 32768 * i + 0x807FFF;\n        this._rgbYuvTable[i + 1536 >> 0] = -27439 * i;\n        this._rgbYuvTable[i + 1792 >> 0] = -5329 * i;\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"writeBits\",\n    value: function writeBits(bs) {\n      var value = bs[0];\n      var posval = bs[1] - 1;\n\n      while (posval >= 0) {\n        if (value & 1 << posval) {\n          this._byteNew |= 1 << this._bytePos;\n        }\n\n        posval--;\n        this._bytePos--;\n\n        if (this._bytePos < 0) {\n          if (this._byteNew === 0xFF) {\n            this.writeByte(0xFF);\n            this.writeByte(0);\n          } else {\n            this.writeByte(this._byteNew);\n          }\n\n          this._bytePos = 7;\n          this._byteNew = 0;\n        }\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"writeByte\",\n    value: function writeByte(value) {\n      this._byteOut.push(value);\n    }\n    /* @internal */\n\n  }, {\n    key: \"writeWord\",\n    value: function writeWord(value) {\n      this.writeByte(value >> 8 & 0xFF);\n      this.writeByte(value & 0xFF);\n    }\n    /* @internal */\n\n  }, {\n    key: \"fDCTQuant\",\n    value: function fDCTQuant(data, fdtbl) {\n      var d0;\n      var d1;\n      var d2;\n      var d3;\n      var d4;\n      var d5;\n      var d6;\n      var d7;\n      /* Pass 1: process rows. */\n\n      var dataOff = 0;\n      var i;\n      var I8 = 8;\n      var I64 = 64;\n\n      for (i = 0; i < I8; ++i) {\n        d0 = data[dataOff];\n        d1 = data[dataOff + 1];\n        d2 = data[dataOff + 2];\n        d3 = data[dataOff + 3];\n        d4 = data[dataOff + 4];\n        d5 = data[dataOff + 5];\n        d6 = data[dataOff + 6];\n        d7 = data[dataOff + 7];\n        var tmp0 = d0 + d7;\n        var tmp7 = d0 - d7;\n        var tmp1 = d1 + d6;\n        var tmp6 = d1 - d6;\n        var tmp2 = d2 + d5;\n        var tmp5 = d2 - d5;\n        var tmp3 = d3 + d4;\n        var tmp4 = d3 - d4;\n        /* Even part */\n\n        var tmp10 = tmp0 + tmp3;\n        /* phase 2 */\n\n        var tmp13 = tmp0 - tmp3;\n        var tmp11 = tmp1 + tmp2;\n        var tmp12 = tmp1 - tmp2;\n        data[dataOff] = tmp10 + tmp11;\n        /* phase 3 */\n\n        data[dataOff + 4] = tmp10 - tmp11;\n        var z1 = (tmp12 + tmp13) * 0.707106781;\n        /* c4 */\n\n        data[dataOff + 2] = tmp13 + z1;\n        /* phase 5 */\n\n        data[dataOff + 6] = tmp13 - z1;\n        /* Odd part */\n\n        tmp10 = tmp4 + tmp5;\n        /* phase 2 */\n\n        tmp11 = tmp5 + tmp6;\n        tmp12 = tmp6 + tmp7;\n        /* The rotator is modified from fig 4-8 to avoid extra negations. */\n\n        var z5 = (tmp10 - tmp12) * 0.382683433;\n        /* c6 */\n\n        var z2 = 0.5411961 * tmp10 + z5;\n        /* c2-c6 */\n\n        var z4 = 1.306562965 * tmp12 + z5;\n        /* c2+c6 */\n\n        var z3 = tmp11 * 0.707106781;\n        /* c4 */\n\n        var z11 = tmp7 + z3;\n        /* phase 5 */\n\n        var z13 = tmp7 - z3;\n        data[dataOff + 5] = z13 + z2;\n        /* phase 6 */\n\n        data[dataOff + 3] = z13 - z2;\n        data[dataOff + 1] = z11 + z4;\n        data[dataOff + 7] = z11 - z4;\n        dataOff += 8;\n        /* advance pointer to next row */\n      }\n      /* Pass 2: process columns. */\n\n\n      dataOff = 0;\n\n      for (i = 0; i < I8; ++i) {\n        d0 = data[dataOff];\n        d1 = data[dataOff + 8];\n        d2 = data[dataOff + 16];\n        d3 = data[dataOff + 24];\n        d4 = data[dataOff + 32];\n        d5 = data[dataOff + 40];\n        d6 = data[dataOff + 48];\n        d7 = data[dataOff + 56];\n        var tmp0p2 = d0 + d7;\n        var tmp7p2 = d0 - d7;\n        var tmp1p2 = d1 + d6;\n        var tmp6p2 = d1 - d6;\n        var tmp2p2 = d2 + d5;\n        var tmp5p2 = d2 - d5;\n        var tmp3p2 = d3 + d4;\n        var tmp4p2 = d3 - d4;\n        /* Even part */\n\n        var tmp10p2 = tmp0p2 + tmp3p2;\n        /* phase 2 */\n\n        var tmp13p2 = tmp0p2 - tmp3p2;\n        var tmp11p2 = tmp1p2 + tmp2p2;\n        var tmp12p2 = tmp1p2 - tmp2p2;\n        data[dataOff] = tmp10p2 + tmp11p2;\n        /* phase 3 */\n\n        data[dataOff + 32] = tmp10p2 - tmp11p2;\n        var z1p2 = (tmp12p2 + tmp13p2) * 0.707106781;\n        /* c4 */\n\n        data[dataOff + 16] = tmp13p2 + z1p2;\n        /* phase 5 */\n\n        data[dataOff + 48] = tmp13p2 - z1p2;\n        /* Odd part */\n\n        tmp10p2 = tmp4p2 + tmp5p2;\n        /* phase 2 */\n\n        tmp11p2 = tmp5p2 + tmp6p2;\n        tmp12p2 = tmp6p2 + tmp7p2;\n        /* The rotator is modified from fig 4-8 to avoid extra negations. */\n\n        var z5p2 = (tmp10p2 - tmp12p2) * 0.382683433;\n        /* c6 */\n\n        var z2p2 = 0.5411961 * tmp10p2 + z5p2;\n        /* c2-c6 */\n\n        var z4p2 = 1.306562965 * tmp12p2 + z5p2;\n        /* c2+c6 */\n\n        var z3p2 = tmp11p2 * 0.707106781;\n        /* c4 */\n\n        var z11p2 = tmp7p2 + z3p2;\n        /* phase 5 */\n\n        var z13p2 = tmp7p2 - z3p2;\n        data[dataOff + 40] = z13p2 + z2p2;\n        /* phase 6 */\n\n        data[dataOff + 24] = z13p2 - z2p2;\n        data[dataOff + 8] = z11p2 + z4p2;\n        data[dataOff + 56] = z11p2 - z4p2;\n        dataOff++;\n        /* advance pointer to next column */\n      } // Quantize/descale the coefficients\n\n\n      var fDCTQuant;\n\n      for (i = 0; i < I64; ++i) {\n        // Apply the quantization and scaling factor & Round to nearest integer\n        fDCTQuant = data[i] * fdtbl[i];\n        this._outputfDCTQuant[i] = fDCTQuant > 0 ? fDCTQuant + 0.5 | 0 : fDCTQuant - 0.5 | 0; //outputfDCTQuant[i] = fround(fDCTQuant);\n      }\n\n      return this._outputfDCTQuant;\n    }\n    /* @internal */\n\n  }, {\n    key: \"writeAPP0\",\n    value: function writeAPP0() {\n      this.writeWord(0xFFE0); // marker\n\n      this.writeWord(16); // length\n\n      this.writeByte(0x4A); // J\n\n      this.writeByte(0x46); // F\n\n      this.writeByte(0x49); // I\n\n      this.writeByte(0x46); // F\n\n      this.writeByte(0); // = \"JFIF\",'\\0'\n\n      this.writeByte(1); // versionhi\n\n      this.writeByte(1); // versionlo\n\n      this.writeByte(0); // xyunits\n\n      this.writeWord(1); // xdensity\n\n      this.writeWord(1); // ydensity\n\n      this.writeByte(0); // thumbnwidth\n\n      this.writeByte(0); // thumbnheight\n    }\n    /* @internal */\n\n  }, {\n    key: \"writeSOF0\",\n    value: function writeSOF0(width, height) {\n      this.writeWord(0xFFC0); // marker\n\n      this.writeWord(17); // length, truecolor YUV JPG\n\n      this.writeByte(8); // precision\n\n      this.writeWord(height);\n      this.writeWord(width);\n      this.writeByte(3); // nrofcomponents\n\n      this.writeByte(1); // IdY\n\n      this.writeByte(0x11); // HVY\n\n      this.writeByte(0); // QTY\n\n      this.writeByte(2); // IdU\n\n      this.writeByte(0x11); // HVU\n\n      this.writeByte(1); // QTU\n\n      this.writeByte(3); // IdV\n\n      this.writeByte(0x11); // HVV\n\n      this.writeByte(1); // QTV\n    }\n    /* @internal */\n\n  }, {\n    key: \"writeDQT\",\n    value: function writeDQT() {\n      this.writeWord(0xFFDB); // marker\n\n      this.writeWord(132); // length\n\n      this.writeByte(0);\n\n      for (var i = 0; i < 64; i++) {\n        this.writeByte(this._yTable[i]);\n      }\n\n      this.writeByte(1);\n\n      for (var j = 0; j < 64; j++) {\n        this.writeByte(this._uvTable[j]);\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"writeDHT\",\n    value: function writeDHT() {\n      this.writeWord(0xFFC4); // marker\n\n      this.writeWord(0x01A2); // length\n\n      this.writeByte(0); // HTYDCinfo\n\n      for (var i = 0; i < 16; i++) {\n        this.writeByte(JpegEncoder.STD_DC_LUMINANCE_NRCODES[i + 1]);\n      }\n\n      for (var j = 0; j <= 11; j++) {\n        this.writeByte(JpegEncoder.STD_DC_LUMINANCE_VALUES[j]);\n      }\n\n      this.writeByte(0x10); // HTYACinfo\n\n      for (var k = 0; k < 16; k++) {\n        this.writeByte(JpegEncoder.STD_AC_LUMINANCE_NRCODES[k + 1]);\n      }\n\n      for (var l = 0; l <= 161; l++) {\n        this.writeByte(JpegEncoder.STD_AC_LUMINANCE_VALUES[l]);\n      }\n\n      this.writeByte(1); // HTUDCinfo\n\n      for (var m = 0; m < 16; m++) {\n        this.writeByte(JpegEncoder.STD_DC_CHROMINANCE_NRCODES[m + 1]);\n      }\n\n      for (var n = 0; n <= 11; n++) {\n        this.writeByte(JpegEncoder.STD_DC_CHROMINANCE_VALUES[n]);\n      }\n\n      this.writeByte(0x11); // HTUACinfo\n\n      for (var o = 0; o < 16; o++) {\n        this.writeByte(JpegEncoder.STD_AC_CHROMINANCE_NRCODES[o + 1]);\n      }\n\n      for (var p = 0; p <= 161; p++) {\n        this.writeByte(JpegEncoder.STD_AC_CHROMINANCE_VALUES[p]);\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"writeSOS\",\n    value: function writeSOS() {\n      this.writeWord(0xFFDA); // marker\n\n      this.writeWord(12); // length\n\n      this.writeByte(3); // nrofcomponents\n\n      this.writeByte(1); // IdY\n\n      this.writeByte(0); // HTY\n\n      this.writeByte(2); // IdU\n\n      this.writeByte(0x11); // HTU\n\n      this.writeByte(3); // IdV\n\n      this.writeByte(0x11); // HTV\n\n      this.writeByte(0); // Ss\n\n      this.writeByte(0x3F); // Se\n\n      this.writeByte(0); // Bf\n    }\n    /* @internal */\n\n  }, {\n    key: \"processDU\",\n    value: function processDU(CDU, fdtbl, passedDC, HTDC, HTAC) {\n      var DC = passedDC;\n      var EOB = HTAC[0x00];\n      var m16zeroes = HTAC[0xF0];\n      var pos;\n      var I16 = 16;\n      var I63 = 63;\n      var I64 = 64;\n      var DU_DCT = this.fDCTQuant(CDU, fdtbl); //ZigZag reorder\n\n      for (var j = 0; j < I64; ++j) {\n        this._du[JpegEncoder.SIG_ZAG[j]] = DU_DCT[j];\n      }\n\n      var diff = this._du[0] - DC;\n      DC = this._du[0]; //Encode DC\n\n      if (diff === 0) {\n        this.writeBits(HTDC[0]); // Diff might be 0\n      } else {\n        pos = 32767 + diff;\n        this.writeBits(HTDC[this._category[pos]]);\n        this.writeBits(this._bitCode[pos]);\n      } //Encode ACs\n\n\n      var end0pos = 63; // was const... which is crazy\n\n      for (; end0pos > 0 && this._du[end0pos] === 0; end0pos--) {} //end0pos = first element in reverse order !=0\n\n\n      if (end0pos === 0) {\n        this.writeBits(EOB);\n        return DC;\n      }\n\n      var i = 1;\n      var lng;\n\n      while (i <= end0pos) {\n        var startpos = i;\n\n        for (; this._du[i] === 0 && i <= end0pos; ++i) {}\n\n        var nrzeroes = i - startpos;\n\n        if (nrzeroes >= I16) {\n          lng = nrzeroes >> 4;\n\n          for (var nrmarker = 1; nrmarker <= lng; ++nrmarker) {\n            this.writeBits(m16zeroes);\n          }\n\n          nrzeroes = nrzeroes & 0xF;\n        }\n\n        pos = 32767 + this._du[i];\n        this.writeBits(HTAC[(nrzeroes << 4) + this._category[pos]]);\n        this.writeBits(this._bitCode[pos]);\n        i++;\n      }\n\n      if (end0pos !== I63) {\n        this.writeBits(EOB);\n      }\n\n      return DC;\n    }\n  }]);\n\n  return JpegEncoder;\n}();\n/* @internal */\n\n\nJpegEncoder.STD_DC_LUMINANCE_NRCODES = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n/* @internal */\n\nJpegEncoder.STD_DC_LUMINANCE_VALUES = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n/* @internal */\n\nJpegEncoder.STD_AC_LUMINANCE_NRCODES = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7D];\n/* @internal */\n\nJpegEncoder.STD_AC_LUMINANCE_VALUES = [0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xA1, 0x08, 0x23, 0x42, 0xB1, 0xC1, 0x15, 0x52, 0xD1, 0xF0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0A, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA];\n/* @internal */\n\nJpegEncoder.STD_DC_CHROMINANCE_NRCODES = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0];\n/* @internal */\n\nJpegEncoder.STD_DC_CHROMINANCE_VALUES = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n/* @internal */\n\nJpegEncoder.STD_AC_CHROMINANCE_NRCODES = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77];\n/* @internal */\n\nJpegEncoder.STD_AC_CHROMINANCE_VALUES = [0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xA1, 0xB1, 0xC1, 0x09, 0x23, 0x33, 0x52, 0xF0, 0x15, 0x62, 0x72, 0xD1, 0x0A, 0x16, 0x24, 0x34, 0xE1, 0x25, 0xF1, 0x17, 0x18, 0x19, 0x1A, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA];\n/* @internal */\n\nJpegEncoder.SIG_ZAG = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63];\nexports.JpegEncoder = JpegEncoder;\n\n/***/ }),\n\n/***/ \"../iota-qr-render/dist/images/pngEncoder.js\":\n/*!***************************************************!*\\\n  !*** ../iota-qr-render/dist/images/pngEncoder.js ***!\n  \\***************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar __importDefault = void 0 && (void 0).__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar deflate_1 = __importDefault(__webpack_require__(/*! pako/lib/deflate */ \"../iota-qr-render/node_modules/pako/lib/deflate.js\"));\n/**\r\n * PNG Encoder.\r\n * Based on https://github.com/photopea/UPNG.js\r\n */\n\n\nvar PngEncoder =\n/*#__PURE__*/\nfunction () {\n  function PngEncoder() {\n    _classCallCheck(this, PngEncoder);\n  }\n\n  _createClass(PngEncoder, [{\n    key: \"encode\",\n\n    /**\r\n     * Encode the image frames to png.\r\n     * @param bufs The frame buffers to encode.\r\n     * @param w The image width.\r\n     * @param h The image height.\r\n     * @returns The data for the image.\r\n     */\n    value: function encode(bufs, w, h) {\n      var ps = 0;\n      var forbidPlte = false;\n      var dels = undefined;\n      var data = new Uint8Array(bufs[0].byteLength * bufs.length + 100);\n      var wr = [0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A];\n\n      for (var i = 0; i < 8; i++) {\n        data[i] = wr[i];\n      }\n\n      var offset = 8;\n      var nimg = this.compressPNG(bufs, w, h, ps, forbidPlte);\n      this.writeUint(data, offset, 13);\n      offset += 4;\n      this.writeASCII(data, offset, \"IHDR\");\n      offset += 4;\n      this.writeUint(data, offset, w);\n      offset += 4;\n      this.writeUint(data, offset, h);\n      offset += 4;\n      data[offset] = nimg.depth;\n      offset++;\n      data[offset] = nimg.ctype;\n      offset++;\n      data[offset] = 0; // compress\n\n      offset++;\n      data[offset] = 0; // filter\n\n      offset++;\n      data[offset] = 0; // interlace\n\n      offset++;\n      this.writeUint(data, offset, this.crc(data, offset - 17, 17));\n      offset += 4; // crc\n      // 9 bytes to say, that it is sRGB\n\n      this.writeUint(data, offset, 1);\n      offset += 4;\n      this.writeASCII(data, offset, \"sRGB\");\n      offset += 4;\n      data[offset] = 1;\n      offset++;\n      this.writeUint(data, offset, this.crc(data, offset - 5, 5));\n      offset += 4; // crc\n\n      var anim = bufs.length > 1;\n\n      if (anim) {\n        this.writeUint(data, offset, 8);\n        offset += 4;\n        this.writeASCII(data, offset, \"acTL\");\n        offset += 4;\n        this.writeUint(data, offset, bufs.length);\n        offset += 4;\n        this.writeUint(data, offset, 0);\n        offset += 4;\n        this.writeUint(data, offset, this.crc(data, offset - 12, 12));\n        offset += 4; // crc\n      }\n\n      if (nimg.ctype === 3) {\n        var dl = nimg.plte.length;\n        this.writeUint(data, offset, dl * 3);\n        offset += 4;\n        this.writeASCII(data, offset, \"PLTE\");\n        offset += 4;\n\n        for (var _i = 0; _i < dl; _i++) {\n          var ti = _i * 3;\n          var c = nimg.plte[_i];\n          var r = c & 255;\n          var g = c >> 8 & 255;\n          var b = c >> 16 & 255;\n          data[offset + ti + 0] = r;\n          data[offset + ti + 1] = g;\n          data[offset + ti + 2] = b;\n        }\n\n        offset += dl * 3;\n        this.writeUint(data, offset, this.crc(data, offset - dl * 3 - 4, dl * 3 + 4));\n        offset += 4; // crc\n\n        if (nimg.gotAlpha) {\n          this.writeUint(data, offset, dl);\n          offset += 4;\n          this.writeASCII(data, offset, \"tRNS\");\n          offset += 4;\n\n          for (var _i2 = 0; _i2 < dl; _i2++) {\n            data[offset + _i2] = nimg.plte[_i2] >> 24 & 255;\n          }\n\n          offset += dl;\n          this.writeUint(data, offset, this.crc(data, offset - dl - 4, dl + 4));\n          offset += 4; // crc\n        }\n      }\n\n      var fi = 0;\n\n      for (var j = 0; j < nimg.frames.length; j++) {\n        var fr = nimg.frames[j];\n\n        if (anim) {\n          this.writeUint(data, offset, 26);\n          offset += 4;\n          this.writeASCII(data, offset, \"fcTL\");\n          offset += 4;\n          this.writeUint(data, offset, fi++);\n          offset += 4;\n          this.writeUint(data, offset, fr.rect.width);\n          offset += 4;\n          this.writeUint(data, offset, fr.rect.height);\n          offset += 4;\n          this.writeUint(data, offset, fr.rect.x);\n          offset += 4;\n          this.writeUint(data, offset, fr.rect.y);\n          offset += 4;\n          this.writeUshort(data, offset, dels[j]);\n          offset += 2;\n          this.writeUshort(data, offset, 1000);\n          offset += 2;\n          data[offset] = fr.dispose;\n          offset++; // dispose\n\n          data[offset] = fr.blend;\n          offset++; // blend\n\n          this.writeUint(data, offset, this.crc(data, offset - 30, 30));\n          offset += 4; // crc\n        }\n\n        var imgd = fr.cimg;\n        var _dl = imgd.length;\n        this.writeUint(data, offset, _dl + (j === 0 ? 0 : 4));\n        offset += 4;\n        var ioff = offset;\n        this.writeASCII(data, offset, j === 0 ? \"IDAT\" : \"fdAT\");\n        offset += 4;\n\n        if (j !== 0) {\n          this.writeUint(data, offset, fi++);\n          offset += 4;\n        }\n\n        for (var _i3 = 0; _i3 < _dl; _i3++) {\n          data[offset + _i3] = imgd[_i3];\n        }\n\n        offset += _dl;\n        this.writeUint(data, offset, this.crc(data, ioff, offset - ioff));\n        offset += 4; // crc\n      }\n\n      this.writeUint(data, offset, 0);\n      offset += 4;\n      this.writeASCII(data, offset, \"IEND\");\n      offset += 4;\n      this.writeUint(data, offset, this.crc(data, offset - 4, 4));\n      offset += 4; // crc\n\n      return new Uint8Array(data.buffer.slice(0, offset));\n    }\n    /* @internal */\n\n  }, {\n    key: \"compressPNG\",\n    value: function compressPNG(bufs, w, h, ps, forbidPlte) {\n      var out = this.compress(bufs, w, h, ps, 0, forbidPlte);\n\n      for (var i = 0; i < bufs.length; i++) {\n        var frm = out.frames[i];\n        var nw = frm.rect.width;\n        var nh = frm.rect.height;\n        var bpl = frm.bpl;\n        var bpp = frm.bpp;\n        var fdata = new Uint8Array(nw * bpl + nh);\n        frm.cimg = this.filterZero(frm.img, nh, bpp, bpl, fdata);\n      }\n\n      return out;\n    }\n    /* @internal */\n\n  }, {\n    key: \"compress\",\n    value: function compress(inBufs, w, h, inPs, forGIF, forbidPlte) {\n      var ctype = 6;\n      var depth = 8;\n      var bpp = 4;\n      var alphaAnd = 255;\n      var ps = inPs;\n      var bufs = inBufs;\n\n      for (var j = 0; j < bufs.length; j++) {\n        // when not quantized, other frames can contain colors, that are not in an initial frame\n        var img = new Uint8Array(bufs[j]);\n        var ilen = img.length;\n\n        for (var i = 0; i < ilen; i += 4) {\n          alphaAnd &= img[i + 3];\n        }\n      }\n\n      var gotAlpha = alphaAnd !== 255;\n      var cmap = {};\n      var plte = [];\n\n      if (bufs.length !== 0) {\n        cmap[0] = 0;\n        plte.push(0);\n\n        if (ps !== 0) {\n          ps--;\n        }\n      }\n\n      if (ps !== 0) {\n        var qres = this.quantize(bufs, ps, forGIF);\n        bufs = qres.bufs;\n\n        for (var _i4 = 0; _i4 < qres.plte.length; _i4++) {\n          var c = qres.plte[_i4].est.rgba;\n\n          if (cmap[c] == null) {\n            cmap[c] = plte.length;\n            plte.push(c);\n          }\n        }\n      } else {\n        // what if ps==0, but there are <=256 colors?  we still need to detect, if the palette could be used\n        for (var _j = 0; _j < bufs.length; _j++) {\n          // when not quantized, other frames can contain colors, that are not in an initial frame\n          var img32 = new Uint32Array(bufs[_j]);\n          var _ilen = img32.length;\n\n          for (var _i5 = 0; _i5 < _ilen; _i5++) {\n            var _c = img32[_i5];\n\n            if ((_i5 < w || _c !== img32[_i5 - 1] && _c !== img32[_i5 - w]) && cmap[_c] == null) {\n              cmap[_c] = plte.length;\n              plte.push(_c);\n\n              if (plte.length >= 300) {\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      var brute = gotAlpha ? forGIF : false; // brute : frames can only be copied, not \"blended\"\n\n      var cc = plte.length;\n\n      if (cc <= 256 && !forbidPlte) {\n        if (cc <= 2) {\n          depth = 1;\n        } else if (cc <= 4) {\n          depth = 2;\n        } else if (cc <= 16) {\n          depth = 4;\n        } else {\n          depth = 8;\n        }\n\n        if (forGIF) {\n          depth = 8;\n        }\n\n        gotAlpha = true;\n      }\n\n      var frms = [];\n\n      for (var _j2 = 0; _j2 < bufs.length; _j2++) {\n        var cimg = new Uint8Array(bufs[_j2]);\n        var cimg32 = new Uint32Array(cimg.buffer);\n        var nx = 0;\n        var ny = 0;\n        var nw = w;\n        var nh = h;\n        var blend = 0;\n\n        if (_j2 !== 0 && !brute) {\n          var tlim = forGIF || _j2 === 1 || frms[frms.length - 2].dispose === 2 ? 1 : 2;\n          var tstp = 0;\n          var tarea = 1e9;\n\n          for (var it = 0; it < tlim; it++) {\n            var p32 = new Uint32Array(bufs[_j2 - 1 - it]);\n            var mix = w;\n            var miy = h;\n            var max = -1;\n            var may = -1;\n\n            for (var y = 0; y < h; y++) {\n              for (var x = 0; x < w; x++) {\n                var _i6 = y * w + x;\n\n                if (cimg32[_i6] !== p32[_i6]) {\n                  if (x < mix) {\n                    mix = x;\n                  }\n\n                  if (x > max) {\n                    max = x;\n                  }\n\n                  if (y < miy) {\n                    miy = y;\n                  }\n\n                  if (y > may) {\n                    may = y;\n                  }\n                }\n              }\n            }\n\n            var sarea = max === -1 ? 1 : (max - mix + 1) * (may - miy + 1);\n\n            if (sarea < tarea) {\n              tarea = sarea;\n              tstp = it;\n\n              if (max === -1) {\n                nx = 0;\n                ny = 0;\n                nw = 1;\n                nh = 1;\n              } else {\n                nx = mix;\n                ny = miy;\n                nw = max - mix + 1;\n                nh = may - miy + 1;\n              }\n            }\n          }\n\n          var pimg = new Uint8Array(bufs[_j2 - 1 - tstp]);\n\n          if (tstp === 1) {\n            frms[frms.length - 1].dispose = 2;\n          }\n\n          var nimg = new Uint8Array(nw * nh * 4);\n          this.copyTile(pimg, w, h, nimg, nw, nh, -nx, -ny, 0);\n\n          if (this.copyTile(cimg, w, h, nimg, nw, nh, -nx, -ny, 3)) {\n            this.copyTile(cimg, w, h, nimg, nw, nh, -nx, -ny, 2);\n            blend = 1;\n          } else {\n            this.copyTile(cimg, w, h, nimg, nw, nh, -nx, -ny, 0);\n            blend = 0;\n          }\n\n          cimg = nimg;\n          cimg32 = new Uint32Array(cimg.buffer);\n        }\n\n        var bpl = 4 * nw;\n\n        if (cc <= 256 && !forbidPlte) {\n          bpl = Math.ceil(depth * nw / 8);\n\n          var _nimg = new Uint8Array(bpl * nh);\n\n          for (var _y = 0; _y < nh; _y++) {\n            var _i7 = _y * bpl;\n\n            var ii = _y * nw;\n\n            if (depth === 8) {\n              for (var _x = 0; _x < nw; _x++) {\n                _nimg[_i7 + _x] = cmap[cimg32[ii + _x]];\n              }\n            } else if (depth === 4) {\n              for (var _x2 = 0; _x2 < nw; _x2++) {\n                _nimg[_i7 + (_x2 >> 1)] |= cmap[cimg32[ii + _x2]] << 4 - (_x2 & 1) * 4;\n              }\n            } else if (depth === 2) {\n              for (var _x3 = 0; _x3 < nw; _x3++) {\n                _nimg[_i7 + (_x3 >> 2)] |= cmap[cimg32[ii + _x3]] << 6 - (_x3 & 3) * 2;\n              }\n            } else if (depth === 1) {\n              for (var _x4 = 0; _x4 < nw; _x4++) {\n                _nimg[_i7 + (_x4 >> 3)] |= cmap[cimg32[ii + _x4]] << 7 - (_x4 & 7) * 1;\n              }\n            }\n          }\n\n          cimg = _nimg;\n          ctype = 3;\n          bpp = 1;\n        } else if (!gotAlpha && bufs.length === 1) {\n          // some next \"reduced\" frames may contain alpha for blending\n          var _nimg2 = new Uint8Array(nw * nh * 3);\n\n          var area = nw * nh;\n\n          for (var _i8 = 0; _i8 < area; _i8++) {\n            var ti = _i8 * 3;\n            var qi = _i8 * 4;\n            _nimg2[ti] = cimg[qi];\n            _nimg2[ti + 1] = cimg[qi + 1];\n            _nimg2[ti + 2] = cimg[qi + 2];\n          }\n\n          cimg = _nimg2;\n          ctype = 2;\n          bpp = 3;\n          bpl = 3 * nw;\n        }\n\n        frms.push({\n          rect: {\n            x: nx,\n            y: ny,\n            width: nw,\n            height: nh\n          },\n          img: cimg,\n          bpl: bpl,\n          bpp: bpp,\n          blend: blend,\n          dispose: brute ? 1 : 0\n        });\n      }\n\n      return {\n        ctype: ctype,\n        depth: depth,\n        plte: plte,\n        gotAlpha: gotAlpha,\n        frames: frms\n      };\n    }\n    /* @internal */\n\n  }, {\n    key: \"filterZero\",\n    value: function filterZero(img, h, bpp, bpl, data) {\n      var fls = [];\n\n      for (var t = 0; t < 5; t++) {\n        if (h * bpl > 500000 && (t === 2 || t === 3 || t === 4)) {\n          continue;\n        }\n\n        for (var y = 0; y < h; y++) {\n          this.filterLine(data, img, y, bpl, bpp, t);\n        }\n\n        fls.push(deflate_1.default.deflate(data));\n\n        if (bpp === 1) {\n          break;\n        }\n      }\n\n      var ti;\n      var tsize = 1e9;\n\n      for (var i = 0; i < fls.length; i++) {\n        if (fls[i].length < tsize) {\n          ti = i;\n          tsize = fls[i].length;\n        }\n      }\n\n      return fls[ti];\n    }\n    /* @internal */\n\n  }, {\n    key: \"filterLine\",\n    value: function filterLine(data, img, y, bpl, bpp, type) {\n      var i = y * bpl;\n      var di = i + y;\n      data[di] = type;\n      di++;\n\n      if (type === 0) {\n        for (var x = 0; x < bpl; x++) {\n          data[di + x] = img[i + x];\n        }\n      } else if (type === 1) {\n        for (var _x5 = 0; _x5 < bpp; _x5++) {\n          data[di + _x5] = img[i + _x5];\n        }\n\n        for (var _x6 = bpp; _x6 < bpl; _x6++) {\n          data[di + _x6] = img[i + _x6] - img[i + _x6 - bpp] + 256 & 255;\n        }\n      } else if (y === 0) {\n        for (var _x7 = 0; _x7 < bpp; _x7++) {\n          data[di + _x7] = img[i + _x7];\n        }\n\n        if (type === 2) {\n          for (var _x8 = bpp; _x8 < bpl; _x8++) {\n            data[di + _x8] = img[i + _x8];\n          }\n        }\n\n        if (type === 3) {\n          for (var _x9 = bpp; _x9 < bpl; _x9++) {\n            data[di + _x9] = img[i + _x9] - (img[i + _x9 - bpp] >> 1) + 256 & 255;\n          }\n        }\n\n        if (type === 4) {\n          for (var _x10 = bpp; _x10 < bpl; _x10++) {\n            data[di + _x10] = img[i + _x10] - this.paeth(img[i + _x10 - bpp], 0, 0) + 256 & 255;\n          }\n        }\n      } else {\n        if (type === 2) {\n          for (var _x11 = 0; _x11 < bpl; _x11++) {\n            data[di + _x11] = img[i + _x11] + 256 - img[i + _x11 - bpl] & 255;\n          }\n        }\n\n        if (type === 3) {\n          for (var _x12 = 0; _x12 < bpp; _x12++) {\n            data[di + _x12] = img[i + _x12] + 256 - (img[i + _x12 - bpl] >> 1) & 255;\n          }\n\n          for (var _x13 = bpp; _x13 < bpl; _x13++) {\n            data[di + _x13] = img[i + _x13] + 256 - (img[i + _x13 - bpl] + img[i + _x13 - bpp] >> 1) & 255;\n          }\n        }\n\n        if (type === 4) {\n          for (var _x14 = 0; _x14 < bpp; _x14++) {\n            data[di + _x14] = img[i + _x14] + 256 - this.paeth(0, img[i + _x14 - bpl], 0) & 255;\n          }\n\n          for (var _x15 = bpp; _x15 < bpl; _x15++) {\n            data[di + _x15] = img[i + _x15] + 256 - this.paeth(img[i + _x15 - bpp], img[i + _x15 - bpl], img[i + _x15 - bpp - bpl]) & 255;\n          }\n        }\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"paeth\",\n    value: function paeth(a, b, c) {\n      var p = a + b - c;\n      var pa = Math.abs(p - a);\n      var pb = Math.abs(p - b);\n      var pc = Math.abs(p - c);\n\n      if (pa <= pb && pa <= pc) {\n        return a;\n      } else if (pb <= pc) {\n        return b;\n      }\n\n      return c;\n    }\n    /* @internal */\n\n  }, {\n    key: \"writeASCII\",\n    value: function writeASCII(data, p, s) {\n      for (var i = 0; i < s.length; i++) {\n        data[p + i] = s.charCodeAt(i);\n      }\n    }\n    /* @internal */\n\n  }, {\n    key: \"writeUint\",\n    value: function writeUint(buff, p, n) {\n      buff[p] = n >> 24 & 255;\n      buff[p + 1] = n >> 16 & 255;\n      buff[p + 2] = n >> 8 & 255;\n      buff[p + 3] = n & 255;\n    }\n    /* @internal */\n\n  }, {\n    key: \"writeUshort\",\n    value: function writeUshort(buff, p, n) {\n      buff[p] = n >> 8 & 255;\n      buff[p + 1] = n & 255;\n    }\n    /* @internal */\n\n  }, {\n    key: \"copyTile\",\n    value: function copyTile(sb, sw, sh, tb, tw, th, xoff, yoff, mode) {\n      var w = Math.min(sw, tw);\n      var h = Math.min(sh, th);\n      var si = 0;\n      var ti = 0;\n\n      for (var y = 0; y < h; y++) {\n        for (var x = 0; x < w; x++) {\n          if (xoff >= 0 && yoff >= 0) {\n            si = y * sw + x << 2;\n            ti = (yoff + y) * tw + xoff + x << 2;\n          } else {\n            si = (-yoff + y) * sw - xoff + x << 2;\n            ti = y * tw + x << 2;\n          }\n\n          if (mode === 0) {\n            tb[ti] = sb[si];\n            tb[ti + 1] = sb[si + 1];\n            tb[ti + 2] = sb[si + 2];\n            tb[ti + 3] = sb[si + 3];\n          } else if (mode === 1) {\n            var fa = sb[si + 3] * (1 / 255);\n            var fr = sb[si] * fa;\n            var fg = sb[si + 1] * fa;\n            var fb = sb[si + 2] * fa;\n            var ba = tb[ti + 3] * (1 / 255);\n            var br = tb[ti] * ba;\n            var bg = tb[ti + 1] * ba;\n            var bb = tb[ti + 2] * ba;\n            var ifa = 1 - fa;\n            var oa = fa + ba * ifa;\n            var ioa = oa === 0 ? 0 : 1 / oa;\n            tb[ti + 3] = 255 * oa;\n            tb[ti + 0] = (fr + br * ifa) * ioa;\n            tb[ti + 1] = (fg + bg * ifa) * ioa;\n            tb[ti + 2] = (fb + bb * ifa) * ioa;\n          } else if (mode === 2) {\n            // copy only differences, otherwise zero\n            var _fa = sb[si + 3];\n            var _fr = sb[si];\n            var _fg = sb[si + 1];\n            var _fb = sb[si + 2];\n            var _ba = tb[ti + 3];\n            var _br = tb[ti];\n            var _bg = tb[ti + 1];\n            var _bb = tb[ti + 2];\n\n            if (_fa === _ba && _fr === _br && _fg === _bg && _fb === _bb) {\n              tb[ti] = 0;\n              tb[ti + 1] = 0;\n              tb[ti + 2] = 0;\n              tb[ti + 3] = 0;\n            } else {\n              tb[ti] = _fr;\n              tb[ti + 1] = _fg;\n              tb[ti + 2] = _fb;\n              tb[ti + 3] = _fa;\n            }\n          } else if (mode === 3) {\n            // check if can be blended\n            var _fa2 = sb[si + 3];\n            var _fr2 = sb[si];\n            var _fg2 = sb[si + 1];\n            var _fb2 = sb[si + 2];\n            var _ba2 = tb[ti + 3];\n            var _br2 = tb[ti];\n            var _bg2 = tb[ti + 1];\n            var _bb2 = tb[ti + 2];\n\n            if (_fa2 === _ba2 && _fr2 === _br2 && _fg2 === _bg2 && _fb2 === _bb2) {\n              continue;\n            } //if(fa!=255 && ba!=0) return false;\n\n\n            if (_fa2 < 220 && _ba2 > 20) {\n              return false;\n            }\n          }\n        }\n      }\n\n      return true;\n    }\n    /* @internal */\n\n  }, {\n    key: \"crc\",\n    value: function crc(b, o, l) {\n      return this.crcUpdate(0xFFFFFFFF, b, o, l) ^ 0xFFFFFFFF;\n    }\n    /* @internal */\n\n  }, {\n    key: \"crcUpdate\",\n    value: function crcUpdate(c, buf, off, len) {\n      var localC = c;\n      var crcTable = this.crcTable();\n\n      for (var i = 0; i < len; i++) {\n        localC = crcTable[(localC ^ buf[off + i]) & 0xFF] ^ localC >>> 8;\n      }\n\n      return localC;\n    }\n    /* @internal */\n\n  }, {\n    key: \"crcTable\",\n    value: function crcTable() {\n      var tab = new Uint32Array(256);\n\n      for (var n = 0; n < 256; n++) {\n        var c = n;\n\n        for (var k = 0; k < 8; k++) {\n          if (c & 1) {\n            c = 0xEDB88320 ^ c >>> 1;\n          } else {\n            c = c >>> 1;\n          }\n        }\n\n        tab[n] = c;\n      }\n\n      return tab;\n    }\n    /* @internal */\n\n  }, {\n    key: \"quantize\",\n    value: function quantize(bufs, ps, roundAlpha) {\n      var imgs = [];\n      var totl = 0;\n\n      for (var i = 0; i < bufs.length; i++) {\n        imgs.push(this.alphaMul(new Uint8Array(bufs[i]), roundAlpha));\n        totl += bufs[i].byteLength;\n      }\n\n      var nimg = new Uint8Array(totl);\n      var nimg32 = new Uint32Array(nimg.buffer);\n      var noff = 0;\n\n      for (var _i9 = 0; _i9 < imgs.length; _i9++) {\n        var img = imgs[_i9];\n        var il = img.length;\n\n        for (var j = 0; j < il; j++) {\n          nimg[noff + j] = img[j];\n        }\n\n        noff += il;\n      }\n\n      var root = {\n        i0: 0,\n        i1: nimg.length,\n        bst: null,\n        est: null,\n        tdst: 0,\n        left: null,\n        right: null\n      }; // basic statistic, extra statistic\n\n      root.bst = this.quantizeStats(nimg, root.i0, root.i1);\n      root.est = this.quantizeEstats(root.bst);\n      var leafs = [root];\n\n      while (leafs.length < ps) {\n        var maxL = 0;\n        var mi = 0;\n\n        for (var _i10 = 0; _i10 < leafs.length; _i10++) {\n          if (leafs[_i10].est.L > maxL) {\n            maxL = leafs[_i10].est.L;\n            mi = _i10;\n          }\n        }\n\n        if (maxL < 1e-3) {\n          break;\n        }\n\n        var node = leafs[mi];\n        var s0 = this.quantizeSplitPixels(nimg, nimg32, node.i0, node.i1, node.est.e, node.est.eMq255);\n        var ln = {\n          i0: node.i0,\n          i1: s0,\n          bst: null,\n          est: null,\n          tdst: 0,\n          left: null,\n          right: null\n        };\n        ln.bst = this.quantizeStats(nimg, ln.i0, ln.i1);\n        ln.est = this.quantizeEstats(ln.bst);\n        var rn = {\n          i0: s0,\n          i1: node.i1,\n          bst: null,\n          est: null,\n          tdst: 0,\n          left: null,\n          right: null\n        };\n        rn.bst = {\n          R: [],\n          m: [],\n          N: node.bst.N - ln.bst.N\n        };\n\n        for (var _i11 = 0; _i11 < 16; _i11++) {\n          rn.bst.R[_i11] = node.bst.R[_i11] - ln.bst.R[_i11];\n        }\n\n        for (var _i12 = 0; _i12 < 4; _i12++) {\n          rn.bst.m[_i12] = node.bst.m[_i12] - ln.bst.m[_i12];\n        }\n\n        rn.est = this.quantizeEstats(rn.bst);\n        node.left = ln;\n        node.right = rn;\n        leafs[mi] = ln;\n        leafs.push(rn);\n      }\n\n      leafs.sort(function (a, b) {\n        return b.bst.N - a.bst.N;\n      });\n      var outBufs = [];\n\n      for (var ii = 0; ii < imgs.length; ii++) {\n        var sb = new Uint8Array(imgs[ii]);\n        var tb = new Uint32Array(imgs[ii]);\n        var len = sb.length;\n\n        for (var _i13 = 0; _i13 < len; _i13 += 4) {\n          var r = sb[_i13] * (1 / 255);\n          var g = sb[_i13 + 1] * (1 / 255);\n          var b = sb[_i13 + 2] * (1 / 255);\n          var a = sb[_i13 + 3] * (1 / 255); //  exact, but too slow :(\n          //var nd = UPNG.quantize.getNearest(root, r, g, b, a);\n\n          var nd = root;\n\n          while (nd.left) {\n            nd = this.quantizePlaneDst(nd.est, r, g, b, a) <= 0 ? nd.left : nd.right;\n          }\n\n          tb[_i13 >> 2] = nd.est.rgba;\n        }\n\n        outBufs[ii] = tb.buffer;\n      }\n\n      return {\n        bufs: outBufs,\n        plte: leafs\n      };\n    }\n    /* @internal */\n\n  }, {\n    key: \"quantizeStats\",\n    value: function quantizeStats(nimg, i0, i1) {\n      var R = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      var m = [0, 0, 0, 0];\n      var N = i1 - i0 >> 2;\n\n      for (var i = i0; i < i1; i += 4) {\n        var r = nimg[i] * (1 / 255);\n        var g = nimg[i + 1] * (1 / 255);\n        var b = nimg[i + 2] * (1 / 255);\n        var a = nimg[i + 3] * (1 / 255); //let r = nimg[i], g = nimg[i+1], b = nimg[i+2], a = nimg[i+3];\n\n        m[0] += r;\n        m[1] += g;\n        m[2] += b;\n        m[3] += a;\n        R[0] += r * r;\n        R[1] += r * g;\n        R[2] += r * b;\n        R[3] += r * a;\n        R[5] += g * g;\n        R[6] += g * b;\n        R[7] += g * a;\n        R[10] += b * b;\n        R[11] += b * a;\n        R[15] += a * a;\n      }\n\n      R[4] = R[1];\n      R[8] = R[2];\n      R[12] = R[3];\n      R[9] = R[6];\n      R[13] = R[7];\n      R[14] = R[11];\n      return {\n        R: R,\n        m: m,\n        N: N\n      };\n    }\n    /* @internal */\n\n  }, {\n    key: \"quantizeEstats\",\n    value: function quantizeEstats(stats) {\n      var R = stats.R;\n      var m = stats.m;\n      var N = stats.N;\n      var m0 = m[0];\n      var m1 = m[1];\n      var m2 = m[2];\n      var m3 = m[3];\n      var iN = N === 0 ? 0 : 1 / N;\n      var rj = [R[0] - m0 * m0 * iN, R[1] - m0 * m1 * iN, R[2] - m0 * m2 * iN, R[3] - m0 * m3 * iN, R[4] - m1 * m0 * iN, R[5] - m1 * m1 * iN, R[6] - m1 * m2 * iN, R[7] - m1 * m3 * iN, R[8] - m2 * m0 * iN, R[9] - m2 * m1 * iN, R[10] - m2 * m2 * iN, R[11] - m2 * m3 * iN, R[12] - m3 * m0 * iN, R[13] - m3 * m1 * iN, R[14] - m3 * m2 * iN, R[15] - m3 * m3 * iN];\n      var A = rj;\n      var b = [0.5, 0.5, 0.5, 0.5];\n      var mi = 0;\n      var tmi = 0;\n\n      if (N !== 0) {\n        for (var i = 0; i < 10; i++) {\n          b = this.m4MultVec(A, b);\n          tmi = Math.sqrt(this.m4Dot(b, b));\n          b = this.m4Sml(1 / tmi, b);\n\n          if (Math.abs(tmi - mi) < 1e-9) {\n            break;\n          }\n\n          mi = tmi;\n        }\n      } //b = [0,0,1,0];  mi=N;\n\n\n      var q = [m0 * iN, m1 * iN, m2 * iN, m3 * iN];\n      var eMq255 = this.m4Dot(this.m4Sml(255, q), b);\n      var ia = q[3] < 0.001 ? 0 : 1 / q[3];\n      return {\n        Cov: rj,\n        q: q,\n        e: b,\n        L: mi,\n        eMq255: eMq255,\n        eMq: this.m4Dot(b, q),\n        rgba: (Math.round(255 * q[3]) << 24 | Math.round(255 * q[2] * ia) << 16 | Math.round(255 * q[1] * ia) << 8 | Math.round(255 * q[0] * ia) << 0) >>> 0\n      };\n    }\n    /* @internal */\n\n  }, {\n    key: \"quantizePlaneDst\",\n    value: function quantizePlaneDst(est, r, g, b, a) {\n      var e = est.e;\n      return e[0] * r + e[1] * g + e[2] * b + e[3] * a - est.eMq;\n    }\n    /* @internal */\n\n  }, {\n    key: \"quantizeSplitPixels\",\n    value: function quantizeSplitPixels(nimg, nimg32, i0in, i1in, e, eMq) {\n      var i1 = i1in - 4;\n      var i0 = i0in;\n\n      while (i0 < i1) {\n        while (this.quantizeVecDot(nimg, i0, e) <= eMq) {\n          i0 += 4;\n        }\n\n        while (this.quantizeVecDot(nimg, i1, e) > eMq) {\n          i1 -= 4;\n        }\n\n        if (i0 >= i1) {\n          break;\n        }\n\n        var t = nimg32[i0 >> 2];\n        nimg32[i0 >> 2] = nimg32[i1 >> 2];\n        nimg32[i1 >> 2] = t;\n        i0 += 4;\n        i1 -= 4;\n      }\n\n      while (this.quantizeVecDot(nimg, i0, e) > eMq) {\n        i0 -= 4;\n      }\n\n      return i0 + 4;\n    }\n    /* @internal */\n\n  }, {\n    key: \"quantizeVecDot\",\n    value: function quantizeVecDot(nimg, i, e) {\n      return nimg[i] * e[0] + nimg[i + 1] * e[1] + nimg[i + 2] * e[2] + nimg[i + 3] * e[3];\n    }\n    /* @internal */\n\n  }, {\n    key: \"m4MultVec\",\n    value: function m4MultVec(m, v) {\n      return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3] * v[3], m[4] * v[0] + m[5] * v[1] + m[6] * v[2] + m[7] * v[3], m[8] * v[0] + m[9] * v[1] + m[10] * v[2] + m[11] * v[3], m[12] * v[0] + m[13] * v[1] + m[14] * v[2] + m[15] * v[3]];\n    }\n    /* @internal */\n\n  }, {\n    key: \"m4Dot\",\n    value: function m4Dot(x, y) {\n      return x[0] * y[0] + x[1] * y[1] + x[2] * y[2] + x[3] * y[3];\n    }\n    /* @internal */\n\n  }, {\n    key: \"m4Sml\",\n    value: function m4Sml(a, y) {\n      return [a * y[0], a * y[1], a * y[2], a * y[3]];\n    }\n    /* @internal */\n\n  }, {\n    key: \"alphaMul\",\n    value: function alphaMul(img, roundA) {\n      var nimg = new Uint8Array(img.length);\n      var area = img.length >> 2;\n\n      for (var i = 0; i < area; i++) {\n        var qi = i << 2;\n        var ia = img[qi + 3];\n\n        if (roundA) {\n          ia = ia < 128 ? 0 : 255;\n        }\n\n        var a = ia * (1 / 255);\n        nimg[qi + 0] = img[qi + 0] * a;\n        nimg[qi + 1] = img[qi + 1] * a;\n        nimg[qi + 2] = img[qi + 2] * a;\n        nimg[qi + 3] = ia;\n      }\n\n      return nimg;\n    }\n  }]);\n\n  return PngEncoder;\n}();\n\nexports.PngEncoder = PngEncoder;\n\n/***/ }),\n\n/***/ \"../iota-qr-render/dist/index.js\":\n/*!***************************************!*\\\n  !*** ../iota-qr-render/dist/index.js ***!\n  \\***************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Combined index of all the modules.\r\n */\n\n__export(__webpack_require__(/*! ./initRender */ \"../iota-qr-render/dist/initRender.js\"));\n\n__export(__webpack_require__(/*! ./factories/qrRendererFactory */ \"../iota-qr-render/dist/factories/qrRendererFactory.js\"));\n\n__export(__webpack_require__(/*! ./helpers/imageHelper */ \"../iota-qr-render/dist/helpers/imageHelper.js\"));\n\n__export(__webpack_require__(/*! ./images/jpegEncoder */ \"../iota-qr-render/dist/images/jpegEncoder.js\"));\n\n__export(__webpack_require__(/*! ./images/pngEncoder */ \"../iota-qr-render/dist/images/pngEncoder.js\"));\n\n__export(__webpack_require__(/*! ./renderTypes/jpegRenderer */ \"../iota-qr-render/dist/renderTypes/jpegRenderer.js\"));\n\n__export(__webpack_require__(/*! ./renderTypes/jpegRendererOptions */ \"../iota-qr-render/dist/renderTypes/jpegRendererOptions.js\"));\n\n__export(__webpack_require__(/*! ./renderTypes/canvasRenderer */ \"../iota-qr-render/dist/renderTypes/canvasRenderer.js\"));\n\n__export(__webpack_require__(/*! ./renderTypes/canvasRendererOptions */ \"../iota-qr-render/dist/renderTypes/canvasRendererOptions.js\"));\n\n__export(__webpack_require__(/*! ./renderTypes/pngRenderer */ \"../iota-qr-render/dist/renderTypes/pngRenderer.js\"));\n\n__export(__webpack_require__(/*! ./renderTypes/pngRendererOptions */ \"../iota-qr-render/dist/renderTypes/pngRendererOptions.js\"));\n\n__export(__webpack_require__(/*! ./renderTypes/svgRenderer */ \"../iota-qr-render/dist/renderTypes/svgRenderer.js\"));\n\n__export(__webpack_require__(/*! ./renderTypes/svgRendererOptions */ \"../iota-qr-render/dist/renderTypes/svgRendererOptions.js\"));\n\n__export(__webpack_require__(/*! ./renderTypes/textRenderer */ \"../iota-qr-render/dist/renderTypes/textRenderer.js\"));\n\n__export(__webpack_require__(/*! ./renderTypes/textRendererOptions */ \"../iota-qr-render/dist/renderTypes/textRendererOptions.js\"));\n\n/***/ }),\n\n/***/ \"../iota-qr-render/dist/initRender.js\":\n/*!********************************************!*\\\n  !*** ../iota-qr-render/dist/initRender.js ***!\n  \\********************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Initialize the factories.\r\n */\n\nvar qrRendererFactory_1 = __webpack_require__(/*! ./factories/qrRendererFactory */ \"../iota-qr-render/dist/factories/qrRendererFactory.js\");\n\nvar canvasRenderer_1 = __webpack_require__(/*! ./renderTypes/canvasRenderer */ \"../iota-qr-render/dist/renderTypes/canvasRenderer.js\");\n\nvar jpegRenderer_1 = __webpack_require__(/*! ./renderTypes/jpegRenderer */ \"../iota-qr-render/dist/renderTypes/jpegRenderer.js\");\n\nvar pngRenderer_1 = __webpack_require__(/*! ./renderTypes/pngRenderer */ \"../iota-qr-render/dist/renderTypes/pngRenderer.js\");\n\nvar svgRenderer_1 = __webpack_require__(/*! ./renderTypes/svgRenderer */ \"../iota-qr-render/dist/renderTypes/svgRenderer.js\");\n\nvar textRenderer_1 = __webpack_require__(/*! ./renderTypes/textRenderer */ \"../iota-qr-render/dist/renderTypes/textRenderer.js\");\n\nfunction initRender() {\n  qrRendererFactory_1.QRRendererFactory.instance().register(\"canvas\", function (opts) {\n    return new canvasRenderer_1.CanvasRenderer(opts);\n  });\n  qrRendererFactory_1.QRRendererFactory.instance().register(\"txt\", function (opts) {\n    return new textRenderer_1.TextRenderer(opts);\n  });\n  qrRendererFactory_1.QRRendererFactory.instance().register(\"svg\", function (opts) {\n    return new svgRenderer_1.SvgRenderer(opts);\n  });\n  qrRendererFactory_1.QRRendererFactory.instance().register(\"jpg\", function (opts) {\n    return new jpegRenderer_1.JpegRenderer(opts);\n  });\n  qrRendererFactory_1.QRRendererFactory.instance().register(\"png\", function (opts) {\n    return new pngRenderer_1.PngRenderer(opts);\n  });\n}\n\nexports.initRender = initRender;\n\n/***/ }),\n\n/***/ \"../iota-qr-render/dist/renderTypes/canvasRenderer.js\":\n/*!************************************************************!*\\\n  !*** ../iota-qr-render/dist/renderTypes/canvasRenderer.js ***!\n  \\************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ \"../iota-qr-render/node_modules/@babel/runtime/regenerator/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar color_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/data/color */ \"../iota-core/dist/data/color.js\");\n\nvar arrayHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/arrayHelper */ \"../iota-core/dist/helpers/arrayHelper.js\");\n\nvar numberHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/numberHelper */ \"../iota-core/dist/helpers/numberHelper.js\");\n\nvar objectHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/objectHelper */ \"../iota-core/dist/helpers/objectHelper.js\");\n/**\r\n * Class to render qr data as canvas.\r\n */\n\n\nvar CanvasRenderer =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Create a new instance of Svg renderer.\r\n   * @param options The options for the renderer.\r\n   */\n  function CanvasRenderer(options) {\n    _classCallCheck(this, CanvasRenderer);\n\n    this._options = options || {};\n    this._options.foreground = this._options.foreground || color_1.Color.fromHex(\"#000000\");\n    this._options.background = this._options.background || color_1.Color.fromHex(\"#FFFFFF\");\n    this._options.cssClass = this._options.cssClass || \"qr-canvas\";\n\n    if (!objectHelper_1.ObjectHelper.isType(this._options.foreground, color_1.Color)) {\n      throw new Error(\"The options foreground is not a Color object\");\n    }\n\n    if (!objectHelper_1.ObjectHelper.isType(this._options.background, color_1.Color)) {\n      throw new Error(\"The options background is not a Color object\");\n    }\n  }\n  /**\r\n   * Render the QR code data as an canvas.\r\n   * @param cellData The cell data for the QR code.\r\n   * @param cellSize The size of each cell.\r\n   * @param marginSize The margin to keep around the qr code.\r\n   * @returns The SVG content.\r\n   */\n\n\n  _createClass(CanvasRenderer, [{\n    key: \"renderRaw\",\n    value: function () {\n      var _renderRaw = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(cellData) {\n        var cellSize,\n            marginSize,\n            _args = arguments;\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cellSize = _args.length > 1 && _args[1] !== undefined ? _args[1] : 5;\n                marginSize = _args.length > 2 && _args[2] !== undefined ? _args[2] : 10;\n                throw new Error(\"renderRaw is not supported for <canvas>\");\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function renderRaw(_x) {\n        return _renderRaw.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Render the cell data as an HTML element.\r\n     * @param cellData The cell data to render.\r\n     * @param cellSize The size in pixels of each cell.\r\n     * @param marginSize The margin size in pixels to leave around the qr code.\r\n     * @returns The object rendered as an html element.\r\n     */\n\n  }, {\n    key: \"renderHtml\",\n    value: function () {\n      var _renderHtml = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2(cellData) {\n        var cellSize,\n            marginSize,\n            dimensions,\n            canvas,\n            context,\n            x,\n            y,\n            _args2 = arguments;\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cellSize = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 5;\n                marginSize = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : 10;\n\n                if (arrayHelper_1.ArrayHelper.isArray(cellData)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new Error(\"The cellData must be of type QRCellData\");\n\n              case 4:\n                if (!(!numberHelper_1.NumberHelper.isNumber(cellSize) || cellSize <= 0)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                throw new Error(\"The cellSize must be a number > 0, it is \".concat(cellSize));\n\n              case 6:\n                if (!(!numberHelper_1.NumberHelper.isNumber(marginSize) || marginSize < 0)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                throw new Error(\"The marginSize must be a number >= 0, it is \".concat(marginSize));\n\n              case 8:\n                dimensions = cellData.length * cellSize + 2 * marginSize;\n                canvas = document.createElement(\"canvas\");\n                canvas.classList.add(this._options.cssClass);\n                canvas.width = dimensions;\n                canvas.height = dimensions;\n                context = canvas.getContext(\"2d\");\n                context.fillStyle = this._options.background.rgbaText();\n                context.fillRect(0, 0, dimensions, dimensions);\n                context.fillStyle = this._options.foreground.rgbaText();\n\n                for (x = 0; x < cellData.length; x++) {\n                  for (y = 0; y < cellData[x].length; y++) {\n                    if (cellData[x][y]) {\n                      context.fillRect(x * cellSize + marginSize, y * cellSize + marginSize, cellSize, cellSize);\n                    }\n                  }\n                }\n\n                return _context2.abrupt(\"return\", canvas);\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function renderHtml(_x2) {\n        return _renderHtml.apply(this, arguments);\n      };\n    }()\n  }]);\n\n  return CanvasRenderer;\n}();\n\nexports.CanvasRenderer = CanvasRenderer;\n\n/***/ }),\n\n/***/ \"../iota-qr-render/dist/renderTypes/canvasRendererOptions.js\":\n/*!*******************************************************************!*\\\n  !*** ../iota-qr-render/dist/renderTypes/canvasRendererOptions.js ***!\n  \\*******************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Options for Canvas renderer.\r\n */\n\nvar CanvasRendererOptions = function CanvasRendererOptions() {\n  _classCallCheck(this, CanvasRendererOptions);\n};\n\nexports.CanvasRendererOptions = CanvasRendererOptions;\n\n/***/ }),\n\n/***/ \"../iota-qr-render/dist/renderTypes/jpegRenderer.js\":\n/*!**********************************************************!*\\\n  !*** ../iota-qr-render/dist/renderTypes/jpegRenderer.js ***!\n  \\**********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ \"../iota-qr-render/node_modules/@babel/runtime/regenerator/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar color_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/data/color */ \"../iota-core/dist/data/color.js\");\n\nvar arrayHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/arrayHelper */ \"../iota-core/dist/helpers/arrayHelper.js\");\n\nvar numberHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/numberHelper */ \"../iota-core/dist/helpers/numberHelper.js\");\n\nvar objectHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/objectHelper */ \"../iota-core/dist/helpers/objectHelper.js\");\n\nvar imageHelper_1 = __webpack_require__(/*! ../helpers/imageHelper */ \"../iota-qr-render/dist/helpers/imageHelper.js\");\n\nvar jpegEncoder_1 = __webpack_require__(/*! ../images/jpegEncoder */ \"../iota-qr-render/dist/images/jpegEncoder.js\");\n/**\r\n * Class to render qr data as bitmap.\r\n */\n\n\nvar JpegRenderer =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Create a new instance of Svg renderer.\r\n   * @param options The options for the renderer.\r\n   */\n  function JpegRenderer(options) {\n    _classCallCheck(this, JpegRenderer);\n\n    this._options = options || {};\n    this._options.foreground = this._options.foreground || color_1.Color.fromHex(\"#000000\");\n    this._options.background = this._options.background || color_1.Color.fromHex(\"#FFFFFF\");\n    this._options.cssClass = this._options.cssClass || \"qr-jpeg\";\n\n    if (!objectHelper_1.ObjectHelper.isType(this._options.foreground, color_1.Color)) {\n      throw new Error(\"The options foreground is not a Color object\");\n    }\n\n    if (!objectHelper_1.ObjectHelper.isType(this._options.background, color_1.Color)) {\n      throw new Error(\"The options background is not a Color object\");\n    }\n  }\n  /**\r\n   * Render the QR code data as a bitmap.\r\n   * @param cellData The cell data for the QR code.\r\n   * @param cellSize The size of each cell.\r\n   * @param marginSize The margin to keep around the qr code.\r\n   * @returns The bitmap content.\r\n   */\n\n\n  _createClass(JpegRenderer, [{\n    key: \"renderRaw\",\n    value: function () {\n      var _renderRaw = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(cellData) {\n        var cellSize,\n            marginSize,\n            dimensions,\n            data,\n            i,\n            dc,\n            x,\n            row,\n            r,\n            _i,\n            y,\n            colour,\n            c,\n            _i2,\n            _c,\n            _args = arguments;\n\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cellSize = _args.length > 1 && _args[1] !== undefined ? _args[1] : 5;\n                marginSize = _args.length > 2 && _args[2] !== undefined ? _args[2] : 10;\n\n                if (arrayHelper_1.ArrayHelper.isArray(cellData)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error(\"The cellData must be of type QRCellData\");\n\n              case 4:\n                if (!(!numberHelper_1.NumberHelper.isNumber(cellSize) || cellSize <= 0)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error(\"The cellSize must be a number > 0, it is \".concat(cellSize));\n\n              case 6:\n                if (!(!numberHelper_1.NumberHelper.isNumber(marginSize) || marginSize < 0)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error(\"The marginSize must be a number >= 0, it is \".concat(marginSize));\n\n              case 8:\n                dimensions = cellData.length * cellSize + 2 * marginSize;\n                data = new Uint8Array(dimensions * dimensions * 4);\n\n                for (i = 0; i < data.length; i += 4) {\n                  data[i] = this._options.background.red();\n                  data[i + 1] = this._options.background.green();\n                  data[i + 2] = this._options.background.blue();\n                  data[i + 3] = 0xFF;\n                }\n\n                dc = marginSize * dimensions * 4;\n\n                for (x = 0; x < cellData.length; x++) {\n                  row = new Uint8Array(dimensions * 4);\n                  r = 0;\n\n                  for (_i = 0; _i < marginSize; _i++) {\n                    row[r++] = this._options.background.red();\n                    row[r++] = this._options.background.green();\n                    row[r++] = this._options.background.blue();\n                    row[r++] = 0xFF;\n                  }\n\n                  for (y = 0; y < cellData[x].length; y++) {\n                    colour = cellData[y][x] ? this._options.foreground : this._options.background;\n\n                    for (c = 0; c < cellSize; c++) {\n                      row[r++] = colour.red();\n                      row[r++] = colour.green();\n                      row[r++] = colour.blue();\n                      row[r++] = 0xFF;\n                    }\n                  }\n\n                  for (_i2 = 0; _i2 < marginSize; _i2++) {\n                    row[r++] = this._options.background.red();\n                    row[r++] = this._options.background.green();\n                    row[r++] = this._options.background.blue();\n                    row[r++] = 0xFF;\n                  }\n\n                  for (_c = 0; _c < cellSize; _c++) {\n                    data.set(row, dc);\n                    dc += row.length;\n                  }\n                }\n\n                return _context.abrupt(\"return\", new jpegEncoder_1.JpegEncoder().encode(dimensions, dimensions, data, 75));\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function renderRaw(_x) {\n        return _renderRaw.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Render the cell data as an HTML element.\r\n     * @param cellData The cell data to render.\r\n     * @param cellSize The size in pixels of each cell.\r\n     * @param marginSize The margin size in pixels to leave around the qr code.\r\n     * @returns The object rendered as an html element.\r\n     */\n\n  }, {\n    key: \"renderHtml\",\n    value: function () {\n      var _renderHtml = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2(cellData) {\n        var cellSize,\n            marginSize,\n            raw,\n            img,\n            _args2 = arguments;\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cellSize = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 5;\n                marginSize = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : 10;\n                _context2.next = 4;\n                return this.renderRaw(cellData, cellSize, marginSize);\n\n              case 4:\n                raw = _context2.sent;\n                img = document.createElement(\"img\");\n                img.classList.add(this._options.cssClass);\n                img.src = imageHelper_1.ImageHelper.dataToImageSource(\"image/jpeg\", raw);\n                return _context2.abrupt(\"return\", img);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function renderHtml(_x2) {\n        return _renderHtml.apply(this, arguments);\n      };\n    }()\n  }]);\n\n  return JpegRenderer;\n}();\n\nexports.JpegRenderer = JpegRenderer;\n\n/***/ }),\n\n/***/ \"../iota-qr-render/dist/renderTypes/jpegRendererOptions.js\":\n/*!*****************************************************************!*\\\n  !*** ../iota-qr-render/dist/renderTypes/jpegRendererOptions.js ***!\n  \\*****************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Options for Jpeg renderer.\r\n */\n\nvar JpegRendererOptions = function JpegRendererOptions() {\n  _classCallCheck(this, JpegRendererOptions);\n};\n\nexports.JpegRendererOptions = JpegRendererOptions;\n\n/***/ }),\n\n/***/ \"../iota-qr-render/dist/renderTypes/pngRenderer.js\":\n/*!*********************************************************!*\\\n  !*** ../iota-qr-render/dist/renderTypes/pngRenderer.js ***!\n  \\*********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ \"../iota-qr-render/node_modules/@babel/runtime/regenerator/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar color_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/data/color */ \"../iota-core/dist/data/color.js\");\n\nvar arrayHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/arrayHelper */ \"../iota-core/dist/helpers/arrayHelper.js\");\n\nvar numberHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/numberHelper */ \"../iota-core/dist/helpers/numberHelper.js\");\n\nvar objectHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/objectHelper */ \"../iota-core/dist/helpers/objectHelper.js\");\n\nvar imageHelper_1 = __webpack_require__(/*! ../helpers/imageHelper */ \"../iota-qr-render/dist/helpers/imageHelper.js\");\n\nvar pngEncoder_1 = __webpack_require__(/*! ../images/pngEncoder */ \"../iota-qr-render/dist/images/pngEncoder.js\");\n/**\r\n * Class to render qr data as png.\r\n */\n\n\nvar PngRenderer =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Create a new instance of Svg renderer.\r\n   * @param options The options for the renderer.\r\n   */\n  function PngRenderer(options) {\n    _classCallCheck(this, PngRenderer);\n\n    this._options = options || {};\n    this._options.foreground = this._options.foreground || color_1.Color.fromHex(\"#000000\");\n    this._options.background = this._options.background || color_1.Color.fromHex(\"#FFFFFF\");\n    this._options.cssClass = this._options.cssClass || \"qr-png\";\n\n    if (!objectHelper_1.ObjectHelper.isType(this._options.foreground, color_1.Color)) {\n      throw new Error(\"The options foreground is not a Color object\");\n    }\n\n    if (!objectHelper_1.ObjectHelper.isType(this._options.background, color_1.Color)) {\n      throw new Error(\"The options background is not a Color object\");\n    }\n  }\n  /**\r\n   * Render the QR code data as a bitmap.\r\n   * @param cellData The cell data for the QR code.\r\n   * @param cellSize The size of each cell.\r\n   * @param marginSize The margin to keep around the qr code.\r\n   * @returns The bitmap content.\r\n   */\n\n\n  _createClass(PngRenderer, [{\n    key: \"renderRaw\",\n    value: function () {\n      var _renderRaw = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(cellData) {\n        var cellSize,\n            marginSize,\n            dimensions,\n            data,\n            i,\n            dc,\n            x,\n            row,\n            r,\n            _i,\n            y,\n            colour,\n            c,\n            _i2,\n            _c,\n            _args = arguments;\n\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cellSize = _args.length > 1 && _args[1] !== undefined ? _args[1] : 5;\n                marginSize = _args.length > 2 && _args[2] !== undefined ? _args[2] : 10;\n\n                if (arrayHelper_1.ArrayHelper.isArray(cellData)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error(\"The cellData must be of type QRCellData\");\n\n              case 4:\n                if (!(!numberHelper_1.NumberHelper.isNumber(cellSize) || cellSize <= 0)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error(\"The cellSize must be a number > 0, it is \".concat(cellSize));\n\n              case 6:\n                if (!(!numberHelper_1.NumberHelper.isNumber(marginSize) || marginSize < 0)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error(\"The marginSize must be a number >= 0, it is \".concat(marginSize));\n\n              case 8:\n                dimensions = cellData.length * cellSize + 2 * marginSize;\n                data = new Uint8Array(dimensions * dimensions * 4);\n\n                for (i = 0; i < data.length; i += 4) {\n                  data[i] = this._options.background.red();\n                  data[i + 1] = this._options.background.green();\n                  data[i + 2] = this._options.background.blue();\n                  data[i + 3] = this._options.background.alpha();\n                }\n\n                dc = marginSize * dimensions * 4;\n\n                for (x = 0; x < cellData.length; x++) {\n                  row = new Uint8Array(dimensions * 4);\n                  r = 0;\n\n                  for (_i = 0; _i < marginSize; _i++) {\n                    row[r++] = this._options.background.red();\n                    row[r++] = this._options.background.green();\n                    row[r++] = this._options.background.blue();\n                    row[r++] = this._options.background.alpha();\n                  }\n\n                  for (y = 0; y < cellData[x].length; y++) {\n                    colour = cellData[y][x] ? this._options.foreground : this._options.background;\n\n                    for (c = 0; c < cellSize; c++) {\n                      row[r++] = colour.red();\n                      row[r++] = colour.green();\n                      row[r++] = colour.blue();\n                      row[r++] = colour.alpha();\n                    }\n                  }\n\n                  for (_i2 = 0; _i2 < marginSize; _i2++) {\n                    row[r++] = this._options.background.red();\n                    row[r++] = this._options.background.green();\n                    row[r++] = this._options.background.blue();\n                    row[r++] = this._options.background.alpha();\n                  }\n\n                  for (_c = 0; _c < cellSize; _c++) {\n                    data.set(row, dc);\n                    dc += row.length;\n                  }\n                }\n\n                return _context.abrupt(\"return\", new pngEncoder_1.PngEncoder().encode([data.buffer], dimensions, dimensions));\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function renderRaw(_x) {\n        return _renderRaw.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Render the cell data as an HTML element.\r\n     * @param cellData The cell data to render.\r\n     * @param cellSize The size in pixels of each cell.\r\n     * @param marginSize The margin size in pixels to leave around the qr code.\r\n     * @returns The object rendered as an html element.\r\n     */\n\n  }, {\n    key: \"renderHtml\",\n    value: function () {\n      var _renderHtml = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2(cellData) {\n        var cellSize,\n            marginSize,\n            raw,\n            img,\n            _args2 = arguments;\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cellSize = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 5;\n                marginSize = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : 10;\n                _context2.next = 4;\n                return this.renderRaw(cellData, cellSize, marginSize);\n\n              case 4:\n                raw = _context2.sent;\n                img = document.createElement(\"img\");\n                img.classList.add(this._options.cssClass);\n                img.src = imageHelper_1.ImageHelper.dataToImageSource(\"image/png\", raw);\n                return _context2.abrupt(\"return\", img);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function renderHtml(_x2) {\n        return _renderHtml.apply(this, arguments);\n      };\n    }()\n  }]);\n\n  return PngRenderer;\n}();\n\nexports.PngRenderer = PngRenderer;\n\n/***/ }),\n\n/***/ \"../iota-qr-render/dist/renderTypes/pngRendererOptions.js\":\n/*!****************************************************************!*\\\n  !*** ../iota-qr-render/dist/renderTypes/pngRendererOptions.js ***!\n  \\****************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Options for Png renderer.\r\n */\n\nvar PngRendererOptions = function PngRendererOptions() {\n  _classCallCheck(this, PngRendererOptions);\n};\n\nexports.PngRendererOptions = PngRendererOptions;\n\n/***/ }),\n\n/***/ \"../iota-qr-render/dist/renderTypes/svgRenderer.js\":\n/*!*********************************************************!*\\\n  !*** ../iota-qr-render/dist/renderTypes/svgRenderer.js ***!\n  \\*********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ \"../iota-qr-render/node_modules/@babel/runtime/regenerator/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar color_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/data/color */ \"../iota-core/dist/data/color.js\");\n\nvar linearGradient_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/data/linearGradient */ \"../iota-core/dist/data/linearGradient.js\");\n\nvar radialGradient_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/data/radialGradient */ \"../iota-core/dist/data/radialGradient.js\");\n\nvar arrayHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/arrayHelper */ \"../iota-core/dist/helpers/arrayHelper.js\");\n\nvar numberHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/numberHelper */ \"../iota-core/dist/helpers/numberHelper.js\");\n\nvar objectHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/objectHelper */ \"../iota-core/dist/helpers/objectHelper.js\");\n/**\r\n * Class to render qr data as svg.\r\n */\n\n\nvar SvgRenderer =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Create a new instance of Svg renderer.\r\n   * @param options The options for the renderer.\r\n   */\n  function SvgRenderer(options) {\n    _classCallCheck(this, SvgRenderer);\n\n    this._options = options || {};\n    this._options.foregroundType = this._options.foregroundType || \"solid\";\n\n    if (this._options.foregroundType !== \"solid\" && this._options.foregroundType !== \"linear\" && this._options.foregroundType !== \"radial\") {\n      throw new Error(\"The options foregroundType must be solid, linear or radial\");\n    }\n\n    if (this._options.foregroundType === \"solid\") {\n      this._options.foreground = this._options.foreground || color_1.Color.fromHex(\"#000000\");\n\n      if (!objectHelper_1.ObjectHelper.isType(this._options.foreground, color_1.Color)) {\n        throw new Error(\"The options foreground is not a Color object\");\n      }\n    } else if (this._options.foregroundType === \"linear\") {\n      if (!objectHelper_1.ObjectHelper.isType(this._options.foregroundLinear, linearGradient_1.LinearGradient)) {\n        throw new Error(\"The options foregroundLinear must be a LinearGradient object\");\n      }\n    } else if (this._options.foregroundType === \"radial\") {\n      if (!objectHelper_1.ObjectHelper.isType(this._options.foregroundRadial, radialGradient_1.RadialGradient)) {\n        throw new Error(\"The options foregroundRadial must be a RadialGradient object\");\n      }\n    }\n\n    this._options.background = this._options.background || color_1.Color.fromHex(\"#FFFFFF\");\n    this._options.cssClass = this._options.cssClass || \"qr-svg\";\n\n    if (!objectHelper_1.ObjectHelper.isType(this._options.background, color_1.Color)) {\n      throw new Error(\"The options background is not a Color object\");\n    }\n  }\n  /**\r\n   * Wrap svg content with outer xml.\r\n   * @param width The width of the svg.\r\n   * @param height The height of the svg.\r\n   * @param content The inner content of the svg.\r\n   * @param includeXmlDeclaration Include an xml declaration at the start of the content\r\n   * @returns The SVG content.\r\n   */\n\n\n  _createClass(SvgRenderer, [{\n    key: \"renderRaw\",\n\n    /**\r\n     * Render the QR code data as an SVG.\r\n     * @param cellData The cell data for the QR code.\r\n     * @param cellSize The size of each cell.\r\n     * @param marginSize The margin to keep around the qr code.\r\n     * @returns The SVG content.\r\n     */\n    value: function () {\n      var _renderRaw = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(cellData) {\n        var cellSize,\n            marginSize,\n            rendered,\n            _args = arguments;\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cellSize = _args.length > 1 && _args[1] !== undefined ? _args[1] : 5;\n                marginSize = _args.length > 2 && _args[2] !== undefined ? _args[2] : 10;\n                rendered = this.renderContent(cellData, cellSize, marginSize);\n                return _context.abrupt(\"return\", SvgRenderer.renderWrapper(rendered.width, rendered.height, rendered.content, false));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function renderRaw(_x) {\n        return _renderRaw.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Render the cell data as an HTML element.\r\n     * @param cellData The cell data to render.\r\n     * @param cellSize The size in pixels of each cell.\r\n     * @param marginSize The margin size in pixels to leave around the qr code.\r\n     * @returns The object rendered as an html element.\r\n     */\n\n  }, {\n    key: \"renderHtml\",\n    value: function () {\n      var _renderHtml = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2(cellData) {\n        var cellSize,\n            marginSize,\n            rendered,\n            svg,\n            _args2 = arguments;\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cellSize = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 5;\n                marginSize = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : 10;\n                rendered = this.renderContent(cellData, cellSize, marginSize);\n                svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                svg.setAttribute(\"width\", \"\".concat(rendered.width, \"px\"));\n                svg.setAttribute(\"height\", \"\".concat(rendered.height, \"px\"));\n                svg.classList.add(this._options.cssClass); // tslint:disable-next-line:no-inner-html\n\n                svg.innerHTML = rendered.content;\n                return _context2.abrupt(\"return\", svg);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function renderHtml(_x2) {\n        return _renderHtml.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Render the internal content of the svg.\r\n     * @param cellData The cell data to render.\r\n     * @param cellSize The size of the cell.\r\n     * @param marginSize The size of the margin.\r\n     * @returns The dimension and content of the svg.\r\n     */\n\n  }, {\n    key: \"renderContent\",\n    value: function renderContent(cellData, cellSize, marginSize) {\n      if (!arrayHelper_1.ArrayHelper.isArray(cellData)) {\n        throw new Error(\"The cellData must be of type QRCellData\");\n      }\n\n      if (!numberHelper_1.NumberHelper.isNumber(cellSize) || cellSize <= 0) {\n        throw new Error(\"The cellSize must be a number > 0, it is \".concat(cellSize));\n      }\n\n      if (!numberHelper_1.NumberHelper.isNumber(marginSize) || marginSize < 0) {\n        throw new Error(\"The marginSize must be a number >= 0, it is \".concat(marginSize));\n      }\n\n      var dimensions = cellData.length * cellSize + 2 * marginSize;\n      var content = \"\";\n      var fillRef = \"\";\n\n      if (this._options.foregroundType === \"linear\" || this._options.foregroundType === \"radial\") {\n        fillRef = \"url(#qrfill)\";\n        content += \"<defs>\";\n\n        if (this._options.foregroundType === \"linear\") {\n          content += this.renderLinearGradient(this._options.foregroundLinear, \"qrfill\");\n        } else {\n          content += this.renderRadialGradient(this._options.foregroundRadial, \"qrfill\");\n        }\n\n        content += \"</defs>\";\n      } else {\n        fillRef = this._options.foreground.hex();\n      }\n\n      content += \"<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"\".concat(dimensions, \"\\\" height=\\\"\").concat(dimensions, \"\\\" fill=\\\"\").concat(this._options.background.hex(), \"\\\" />\");\n      var pathContent = \"\";\n\n      for (var x = 0; x < cellData.length; x++) {\n        for (var y = 0; y < cellData[x].length; y++) {\n          if (cellData[x][y]) {\n            pathContent += \"M\".concat(x * cellSize + marginSize, \",\").concat(y * cellSize + marginSize, \" h\").concat(cellSize, \" v\").concat(cellSize, \" h-\").concat(cellSize, \"z \");\n          }\n        }\n      }\n\n      content += \"<path fill=\\\"\".concat(fillRef, \"\\\" d=\\\"\").concat(pathContent.trim(), \"\\\"/>\");\n      return {\n        width: dimensions,\n        height: dimensions,\n        content: content\n      };\n    }\n  }, {\n    key: \"renderGradientStops\",\n    value: function renderGradientStops(stops) {\n      var render = \"\";\n\n      for (var i = 0; i < stops.length; i++) {\n        render += \"<stop offset=\\\"\".concat(stops[i].offsetPercent, \"%\\\" stop-color=\\\"\").concat(stops[i].color.hex(), \"\\\"/>\");\n      }\n\n      return render;\n    }\n  }, {\n    key: \"renderLinearGradient\",\n    value: function renderLinearGradient(gradient, id) {\n      var render = \"<linearGradient id=\\\"\".concat(id, \"\\\"\");\n\n      if (gradient.angle() !== undefined) {\n        render += \" gradientTransform=\\\"rotate(\".concat(gradient.angle(), \")\\\"\");\n      }\n\n      render += \">\".concat(this.renderGradientStops(gradient.stops()), \"</linearGradient>\");\n      return render;\n    }\n  }, {\n    key: \"renderRadialGradient\",\n    value: function renderRadialGradient(gradient, id) {\n      var render = \"<radialGradient id=\\\"\".concat(id, \"\\\"\");\n\n      if (gradient.offsetXPercent() !== undefined) {\n        render += \" cx=\\\"\".concat(gradient.offsetXPercent(), \"%\\\"\");\n      }\n\n      if (gradient.offsetYPercent() !== undefined) {\n        render += \" cy=\\\"\".concat(gradient.offsetYPercent(), \"%\\\"\");\n      }\n\n      if (gradient.radiusPercent() !== undefined) {\n        render += \" r=\\\"\".concat(gradient.radiusPercent(), \"%\\\"\");\n      }\n\n      render += \">\".concat(this.renderGradientStops(gradient.stops()), \"</radialGradient>\");\n      return render;\n    }\n  }], [{\n    key: \"renderWrapper\",\n    value: function renderWrapper(width, height, content, includeXmlDeclaration) {\n      var text = \"\";\n\n      if (includeXmlDeclaration) {\n        text += \"<?xml version=\\\"1.0\\\" standalone=\\\"no\\\"?>\";\n      }\n\n      text += \"<svg width=\\\"\".concat(width, \"\\\" height=\\\"\").concat(height, \"\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\");\n      text += content;\n      text += \"</svg>\";\n      return text;\n    }\n  }]);\n\n  return SvgRenderer;\n}();\n\nexports.SvgRenderer = SvgRenderer;\n\n/***/ }),\n\n/***/ \"../iota-qr-render/dist/renderTypes/svgRendererOptions.js\":\n/*!****************************************************************!*\\\n  !*** ../iota-qr-render/dist/renderTypes/svgRendererOptions.js ***!\n  \\****************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Options for Svg renderer.\r\n */\n\nvar SvgRendererOptions = function SvgRendererOptions() {\n  _classCallCheck(this, SvgRendererOptions);\n};\n\nexports.SvgRendererOptions = SvgRendererOptions;\n\n/***/ }),\n\n/***/ \"../iota-qr-render/dist/renderTypes/textRenderer.js\":\n/*!**********************************************************!*\\\n  !*** ../iota-qr-render/dist/renderTypes/textRenderer.js ***!\n  \\**********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ \"../iota-qr-render/node_modules/@babel/runtime/regenerator/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar arrayHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/arrayHelper */ \"../iota-core/dist/helpers/arrayHelper.js\");\n\nvar numberHelper_1 = __webpack_require__(/*! @tangle-frost/iota-core/dist/helpers/numberHelper */ \"../iota-core/dist/helpers/numberHelper.js\");\n/**\r\n * Class to render qr data as t3xt.\r\n */\n\n\nvar TextRenderer =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * Create a new instance of Text renderer.\r\n   * @param options The options for the renderer.\r\n   */\n  function TextRenderer(options) {\n    _classCallCheck(this, TextRenderer);\n\n    this._options = options || {};\n    this._options.onChar = this._options.onChar || \"██\";\n    this._options.offChar = this._options.offChar || \"  \";\n    this._options.cssClass = this._options.cssClass || \"qr-text\";\n  }\n  /**\r\n   * Render the QR code data as text.\r\n   * @param cellData The cell data for the QR code.\r\n   * @param cellSize The size of each cell.\r\n   * @param marginSize The margin to keep around the qr code.\r\n   * @returns The text content.\r\n   */\n\n\n  _createClass(TextRenderer, [{\n    key: \"renderRaw\",\n    value: function () {\n      var _renderRaw = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(cellData) {\n        var cellSize,\n            marginSize,\n            text,\n            m,\n            x,\n            line,\n            y,\n            c,\n            _m,\n            _args = arguments;\n\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cellSize = _args.length > 1 && _args[1] !== undefined ? _args[1] : 1;\n                marginSize = _args.length > 2 && _args[2] !== undefined ? _args[2] : 2;\n\n                if (arrayHelper_1.ArrayHelper.isArray(cellData)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error(\"The cellData must be of type QRCellData\");\n\n              case 4:\n                if (!(!numberHelper_1.NumberHelper.isNumber(cellSize) || cellSize <= 0)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error(\"The cellSize must be a number > 0, it is \".concat(cellSize));\n\n              case 6:\n                if (!(!numberHelper_1.NumberHelper.isNumber(marginSize) || marginSize < 0)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error(\"The marginSize must be a number >= 0, it is \".concat(marginSize));\n\n              case 8:\n                text = \"\";\n\n                for (m = 0; m < marginSize; m++) {\n                  text += \"\".concat(this._options.offChar.repeat(cellSize * cellData.length), \"\\r\\n\");\n                }\n\n                for (x = 0; x < cellData.length; x++) {\n                  line = this._options.offChar.repeat(marginSize);\n\n                  for (y = 0; y < cellData[x].length; y++) {\n                    if (cellData[y][x]) {\n                      line += this._options.onChar.repeat(cellSize);\n                    } else {\n                      line += this._options.offChar.repeat(cellSize);\n                    }\n                  }\n\n                  line += this._options.offChar.repeat(marginSize);\n                  line += \"\\r\\n\";\n\n                  for (c = 0; c < cellSize; c++) {\n                    text += line;\n                  }\n                }\n\n                for (_m = 0; _m < marginSize; _m++) {\n                  text += \"\".concat(this._options.offChar.repeat(cellSize * cellData.length), \"\\r\\n\");\n                }\n\n                return _context.abrupt(\"return\", text);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function renderRaw(_x) {\n        return _renderRaw.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Render the cell data as an HTML element.\r\n     * @param cellData The cell data to render.\r\n     * @param cellSize The size in pixels of each cell.\r\n     * @param marginSize The margin size in pixels to leave around the qr code.\r\n     * @returns The object rendered as an html element.\r\n     */\n\n  }, {\n    key: \"renderHtml\",\n    value: function () {\n      var _renderHtml = _asyncToGenerator(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2(cellData) {\n        var cellSize,\n            marginSize,\n            raw,\n            div,\n            _args2 = arguments;\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cellSize = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 1;\n                marginSize = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : 2;\n                _context2.next = 4;\n                return this.renderRaw(cellData, cellSize, marginSize);\n\n              case 4:\n                raw = _context2.sent;\n                div = document.createElement(\"div\");\n                div.classList.add(this._options.cssClass); // tslint:disable-next-line:no-inner-html\n\n                div.innerHTML = raw.replace(/\\r/g, \"\").replace(/\\n/g, \"<br/>\").replace(/ /g, \"&nbsp;\");\n                return _context2.abrupt(\"return\", div);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function renderHtml(_x2) {\n        return _renderHtml.apply(this, arguments);\n      };\n    }()\n  }]);\n\n  return TextRenderer;\n}();\n\nexports.TextRenderer = TextRenderer;\n\n/***/ }),\n\n/***/ \"../iota-qr-render/dist/renderTypes/textRendererOptions.js\":\n/*!*****************************************************************!*\\\n  !*** ../iota-qr-render/dist/renderTypes/textRendererOptions.js ***!\n  \\*****************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Options for Text renderer.\r\n */\n\nvar TextRendererOptions = function TextRendererOptions() {\n  _classCallCheck(this, TextRendererOptions);\n};\n\nexports.TextRendererOptions = TextRendererOptions;\n\n/***/ }),\n\n/***/ \"../iota-qr-render/node_modules/@babel/runtime/regenerator/index.js\":\n/*!**************************************************************************!*\\\n  !*** ../iota-qr-render/node_modules/@babel/runtime/regenerator/index.js ***!\n  \\**************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(/*! regenerator-runtime */ \"../iota-qr-render/node_modules/regenerator-runtime/runtime-module.js\");\n\n\n/***/ }),\n\n/***/ \"../iota-qr-render/node_modules/pako/lib/deflate.js\":\n/*!**********************************************************!*\\\n  !*** ../iota-qr-render/node_modules/pako/lib/deflate.js ***!\n  \\**********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\nvar zlib_deflate = __webpack_require__(/*! ./zlib/deflate */ \"../iota-qr-render/node_modules/pako/lib/zlib/deflate.js\");\nvar utils        = __webpack_require__(/*! ./utils/common */ \"../iota-qr-render/node_modules/pako/lib/utils/common.js\");\nvar strings      = __webpack_require__(/*! ./utils/strings */ \"../iota-qr-render/node_modules/pako/lib/utils/strings.js\");\nvar msg          = __webpack_require__(/*! ./zlib/messages */ \"../iota-qr-render/node_modules/pako/lib/zlib/messages.js\");\nvar ZStream      = __webpack_require__(/*! ./zlib/zstream */ \"../iota-qr-render/node_modules/pako/lib/zlib/zstream.js\");\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n\n\n/***/ }),\n\n/***/ \"../iota-qr-render/node_modules/pako/lib/utils/common.js\":\n/*!***************************************************************!*\\\n  !*** ../iota-qr-render/node_modules/pako/lib/utils/common.js ***!\n  \\***************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n\n\n/***/ }),\n\n/***/ \"../iota-qr-render/node_modules/pako/lib/utils/strings.js\":\n/*!****************************************************************!*\\\n  !*** ../iota-qr-render/node_modules/pako/lib/utils/strings.js ***!\n  \\****************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n// String encode/decode helpers\n\n\n\nvar utils = __webpack_require__(/*! ./common */ \"../iota-qr-render/node_modules/pako/lib/utils/common.js\");\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // use fallback for big arrays to avoid stack overflow\n  if (len < 65537) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n\n/***/ }),\n\n/***/ \"../iota-qr-render/node_modules/pako/lib/zlib/adler32.js\":\n/*!***************************************************************!*\\\n  !*** ../iota-qr-render/node_modules/pako/lib/zlib/adler32.js ***!\n  \\***************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n\n\n/***/ }),\n\n/***/ \"../iota-qr-render/node_modules/pako/lib/zlib/crc32.js\":\n/*!*************************************************************!*\\\n  !*** ../iota-qr-render/node_modules/pako/lib/zlib/crc32.js ***!\n  \\*************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n\n\n/***/ }),\n\n/***/ \"../iota-qr-render/node_modules/pako/lib/zlib/deflate.js\":\n/*!***************************************************************!*\\\n  !*** ../iota-qr-render/node_modules/pako/lib/zlib/deflate.js ***!\n  \\***************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = __webpack_require__(/*! ../utils/common */ \"../iota-qr-render/node_modules/pako/lib/utils/common.js\");\nvar trees   = __webpack_require__(/*! ./trees */ \"../iota-qr-render/node_modules/pako/lib/zlib/trees.js\");\nvar adler32 = __webpack_require__(/*! ./adler32 */ \"../iota-qr-render/node_modules/pako/lib/zlib/adler32.js\");\nvar crc32   = __webpack_require__(/*! ./crc32 */ \"../iota-qr-render/node_modules/pako/lib/zlib/crc32.js\");\nvar msg     = __webpack_require__(/*! ./messages */ \"../iota-qr-render/node_modules/pako/lib/zlib/messages.js\");\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n                );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n\n\n/***/ }),\n\n/***/ \"../iota-qr-render/node_modules/pako/lib/zlib/messages.js\":\n/*!****************************************************************!*\\\n  !*** ../iota-qr-render/node_modules/pako/lib/zlib/messages.js ***!\n  \\****************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n\n/***/ }),\n\n/***/ \"../iota-qr-render/node_modules/pako/lib/zlib/trees.js\":\n/*!*************************************************************!*\\\n  !*** ../iota-qr-render/node_modules/pako/lib/zlib/trees.js ***!\n  \\*************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = __webpack_require__(/*! ../utils/common */ \"../iota-qr-render/node_modules/pako/lib/utils/common.js\");\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n\n\n/***/ }),\n\n/***/ \"../iota-qr-render/node_modules/pako/lib/zlib/zstream.js\":\n/*!***************************************************************!*\\\n  !*** ../iota-qr-render/node_modules/pako/lib/zlib/zstream.js ***!\n  \\***************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n\n\n/***/ }),\n\n/***/ \"../iota-qr-render/node_modules/regenerator-runtime/runtime-module.js\":\n/*!****************************************************************************!*\\\n  !*** ../iota-qr-render/node_modules/regenerator-runtime/runtime-module.js ***!\n  \\****************************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(/*! ./runtime */ \"../iota-qr-render/node_modules/regenerator-runtime/runtime.js\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n/***/ }),\n\n/***/ \"../iota-qr-render/node_modules/regenerator-runtime/runtime.js\":\n/*!*********************************************************************!*\\\n  !*** ../iota-qr-render/node_modules/regenerator-runtime/runtime.js ***!\n  \\*********************************************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n\n\n/***/ }),\n\n/***/ \"./dist/index-all.js\":\n/*!***************************!*\\\n  !*** ./dist/index-all.js ***!\n  \\***************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Combined index of all the modules.\r\n */\n\n__export(__webpack_require__(/*! @tangle-frost/iota-core */ \"../iota-core/dist/index.js\"));\n\n__export(__webpack_require__(/*! @tangle-frost/iota-qr-core */ \"../iota-qr-core/dist/index.js\"));\n\n__export(__webpack_require__(/*! @tangle-frost/iota-qr-render */ \"../iota-qr-render/dist/index.js\"));\n\n__export(__webpack_require__(/*! @tangle-frost/iota-qr-data */ \"../iota-qr-data/dist/index.js\"));\n\nvar iota_qr_render_1 = __webpack_require__(/*! @tangle-frost/iota-qr-render */ \"../iota-qr-render/dist/index.js\");\n\niota_qr_render_1.initRender();\n\n/***/ }),\n\n/***/ \"./pkg/bootstrap.js\":\n/*!**************************!*\\\n  !*** ./pkg/bootstrap.js ***!\n  \\**************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.default = __webpack_require__(/*! ../dist/index-all */ \"./dist/index-all.js\");\n\n/***/ })\n\n/******/ })[\"default\"];\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./IotaDonationButton.vue?vue&type=style&index=0&id=580b7f1b&scoped=true&lang=css&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add CSS to Shadow Root\nvar add = require(\"!../../node_modules/vue-style-loader/lib/addStylesShadow.js\").default\nmodule.exports.__inject__ = function (shadowRoot) {\n  add(\"4e736bb8\", content, shadowRoot)\n};"],"sourceRoot":""}